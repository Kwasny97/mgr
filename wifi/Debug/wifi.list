
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  0800ab08  0800ab08  0001ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b684  0800b684  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b68c  0800b68c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b690  0800b690  0001b690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039d8  200001ec  0800b880  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bc4  0800b880  00023bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018207  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003519  00000000  00000000  00038423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c20  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e4b  00000000  00000000  00057690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966ef  00000000  00000000  0006d4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae8  00000000  00000000  00103c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aaf0 	.word	0x0800aaf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800aaf0 	.word	0x0800aaf0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  return wire_init();
 8000f74:	f002 fb4a 	bl	800360c <wire_init>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <send_cmd>:




static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000f8a:	f002 fb61 	bl	8003650 <wire_reset>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <send_cmd+0x1a>
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e01e      	b.n	8000fd6 <send_cmd+0x58>

  if (!rom_code) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000f9e:	20cc      	movs	r0, #204	; 0xcc
 8000fa0:	f002 fbf2 	bl	8003788 <wire_write>
 8000fa4:	e012      	b.n	8000fcc <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000fa6:	2055      	movs	r0, #85	; 0x55
 8000fa8:	f002 fbee 	bl	8003788 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e009      	b.n	8000fc6 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fbe4 	bl	8003788 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	ddf2      	ble.n	8000fb2 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fbda 	bl	8003788 <wire_write>
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <ds18b20_start_measure>:


HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000fe6:	2144      	movs	r1, #68	; 0x44
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffc8 	bl	8000f7e <send_cmd>
 8000fee:	4603      	mov	r3, r0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <ds18b20_read_scratchpad>:


static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001002:	21be      	movs	r1, #190	; 0xbe
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffba 	bl	8000f7e <send_cmd>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e01e      	b.n	8001052 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e009      	b.n	800102e <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	18d4      	adds	r4, r2, r3
 8001020:	f002 fb64 	bl	80036ec <wire_read>
 8001024:	4603      	mov	r3, r0
 8001026:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b08      	cmp	r3, #8
 8001032:	ddf2      	ble.n	800101a <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001034:	2108      	movs	r1, #8
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f002 fbee 	bl	8003818 <wire_crc>
 800103c:	4603      	mov	r3, r0
 800103e:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3308      	adds	r3, #8
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	7afa      	ldrb	r2, [r7, #11]
 8001048:	429a      	cmp	r2, r3
 800104a:	d101      	bne.n	8001050 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
	...

0800105c <ds18b20_get_temp>:


float ds18b20_get_temp(const uint8_t* rom_code)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;
  int i;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffc4 	bl	8000ff8 <ds18b20_read_scratchpad>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <ds18b20_get_temp+0x20>
    return 85.0f;
 8001076:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010d0 <ds18b20_get_temp+0x74>
 800107a:	e022      	b.n	80010c2 <ds18b20_get_temp+0x66>

  for(i=0 ; i<DS18B20_SCRATCHPAD_SIZE ; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e00c      	b.n	800109c <ds18b20_get_temp+0x40>
  moj_scratchpad[i] = scratchpad[i];
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	4413      	add	r3, r2
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <ds18b20_get_temp+0x78>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	4413      	add	r3, r2
 8001092:	460a      	mov	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
  for(i=0 ; i<DS18B20_SCRATCHPAD_SIZE ; i++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	ddef      	ble.n	8001082 <ds18b20_get_temp+0x26>
 80010a2:	8a3b      	ldrh	r3, [r7, #16]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80010a4:	81fb      	strh	r3, [r7, #14]
  temp2 = temp;
 80010a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <ds18b20_get_temp+0x7c>)
 80010ac:	801a      	strh	r2, [r3, #0]


  return temp / 16.0f;
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c2:	eef0 7a47 	vmov.f32	s15, s14
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	42aa0000 	.word	0x42aa0000
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000222 	.word	0x20000222

080010dc <esp_write_line>:
#include "esp.h"

char esp_IP2 [1000]; //[30]
// Funkcja wysyłająca podany ciąg znaków przez interfejs UART
void esp_write_line(UART_HandleTypeDef * handler, char * text) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
HAL_UART_Transmit(handler, text, strlen(text), 1000);
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f884 	bl	80001f4 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f005 f8e6 	bl	80062c8 <HAL_UART_Transmit>
HAL_UART_Transmit(handler, "\r\n", 2, 100);
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	2202      	movs	r2, #2
 8001100:	4903      	ldr	r1, [pc, #12]	; (8001110 <esp_write_line+0x34>)
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f005 f8e0 	bl	80062c8 <HAL_UART_Transmit>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800ab08 	.word	0x0800ab08

08001114 <esp_read_line>:
// Funkcja odbierająca linię tekstu przez interfejs UART
void esp_read_line(UART_HandleTypeDef * handler, char * buffer, uint16_t buffer_size) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	80fb      	strh	r3, [r7, #6]
HAL_StatusTypeDef status;
char current_char;
uint16_t char_counter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	82fb      	strh	r3, [r7, #22]
while (char_counter < buffer_size - 1) {
 8001126:	e01d      	b.n	8001164 <esp_read_line+0x50>
status = HAL_UART_Receive(handler, &current_char, 1, 1);
 8001128:	f107 0114 	add.w	r1, r7, #20
 800112c:	2301      	movs	r3, #1
 800112e:	2201      	movs	r2, #1
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f005 f95b 	bl	80063ec <HAL_UART_Receive>
 8001136:	4603      	mov	r3, r0
 8001138:	757b      	strb	r3, [r7, #21]
if (status == HAL_OK) {
 800113a:	7d7b      	ldrb	r3, [r7, #21]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d111      	bne.n	8001164 <esp_read_line+0x50>
if (current_char == '\r' || current_char == '\n')
 8001140:	7d3b      	ldrb	r3, [r7, #20]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d002      	beq.n	800114c <esp_read_line+0x38>
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d103      	bne.n	8001154 <esp_read_line+0x40>
if (char_counter == 0) continue;
 800114c:	8afb      	ldrh	r3, [r7, #22]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10e      	bne.n	8001170 <esp_read_line+0x5c>
 8001152:	e007      	b.n	8001164 <esp_read_line+0x50>
else break;
*(buffer + char_counter++) = current_char;
 8001154:	8afb      	ldrh	r3, [r7, #22]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	82fa      	strh	r2, [r7, #22]
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4413      	add	r3, r2
 8001160:	7d3a      	ldrb	r2, [r7, #20]
 8001162:	701a      	strb	r2, [r3, #0]
while (char_counter < buffer_size - 1) {
 8001164:	8afa      	ldrh	r2, [r7, #22]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	3b01      	subs	r3, #1
 800116a:	429a      	cmp	r2, r3
 800116c:	dbdc      	blt.n	8001128 <esp_read_line+0x14>
 800116e:	e000      	b.n	8001172 <esp_read_line+0x5e>
else break;
 8001170:	bf00      	nop
}
}
*(buffer + char_counter) = '\0';
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <esp_read_char>:
// Funkcja odczytująca pojedynczy znak odebrany przez UART
char esp_read_char(UART_HandleTypeDef * handler) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
char buffer = '\0';
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
HAL_UART_Receive(handler, &buffer, 1, 1000);
 8001190:	f107 010f 	add.w	r1, r7, #15
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	2201      	movs	r2, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f005 f926 	bl	80063ec <HAL_UART_Receive>
return buffer;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <esp_send_cmd>:
// Funkcja wysyłająca polecenie do modułu ESP8266
// i oczekująca na jego potwierdzenie
uint8_t esp_send_cmd(UART_HandleTypeDef * uart, char * command) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	6018      	str	r0, [r3, #0]
 80011b8:	463b      	mov	r3, r7
 80011ba:	6019      	str	r1, [r3, #0]
char response[1000]; //[30]
response[0] = '\0';
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
int i = 1000;//dołożone
 80011c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
esp_write_line(uart, command);
 80011cc:	463a      	mov	r2, r7
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	6811      	ldr	r1, [r2, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f7ff ff82 	bl	80010dc <esp_write_line>
__HAL_UART_FLUSH_DRREGISTER(&huart1);
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <esp_send_cmd+0x9c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
//i++;
//}
//strcat(esp_IP2,response);
//return 1;

while (strcmp(response, "OK") != 0 && strcmp(response, "no change") != 0 && strcmp(response, "ERROR") != 0)
 80011de:	e006      	b.n	80011ee <esp_send_cmd+0x42>
esp_read_line(uart, response, 30);
 80011e0:	f107 010c 	add.w	r1, r7, #12
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	221e      	movs	r2, #30
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f7ff ff93 	bl	8001114 <esp_read_line>
while (strcmp(response, "OK") != 0 && strcmp(response, "no change") != 0 && strcmp(response, "ERROR") != 0)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4916      	ldr	r1, [pc, #88]	; (800124c <esp_send_cmd+0xa0>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe fff3 	bl	80001e0 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d011      	beq.n	8001224 <esp_send_cmd+0x78>
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4912      	ldr	r1, [pc, #72]	; (8001250 <esp_send_cmd+0xa4>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffea 	bl	80001e0 <strcmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <esp_send_cmd+0x78>
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	490f      	ldr	r1, [pc, #60]	; (8001254 <esp_send_cmd+0xa8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffe1 	bl	80001e0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1dd      	bne.n	80011e0 <esp_send_cmd+0x34>
if (strcmp(response, "ERROR") == 0) return 0;
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	490a      	ldr	r1, [pc, #40]	; (8001254 <esp_send_cmd+0xa8>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ffd8 	bl	80001e0 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <esp_send_cmd+0x8e>
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <esp_send_cmd+0x90>
else return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20003b6c 	.word	0x20003b6c
 800124c:	0800ab0c 	.word	0x0800ab0c
 8001250:	0800ab10 	.word	0x0800ab10
 8001254:	0800ab1c 	.word	0x0800ab1c

08001258 <esp_send_data_and_close>:
}
//

// Funkcja wysyłająca dane przez nawiązane połączenie TCP
// i zamykająca to połączenie
void esp_send_data_and_close(UART_HandleTypeDef * uart, char mux_id, char * content) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	460b      	mov	r3, r1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	72fb      	strb	r3, [r7, #11]
	char cmd[17];
	sprintf(cmd, "AT+CIPSEND=%c,%d", mux_id, strlen(content));
 8001266:	7afc      	ldrb	r4, [r7, #11]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ffc3 	bl	80001f4 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	f107 0014 	add.w	r0, r7, #20
 8001274:	4622      	mov	r2, r4
 8001276:	4917      	ldr	r1, [pc, #92]	; (80012d4 <esp_send_data_and_close+0x7c>)
 8001278:	f007 f94e 	bl	8008518 <siprintf>
	esp_write_line(uart, cmd);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ff2a 	bl	80010dc <esp_write_line>
	HAL_Delay(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f002 fb83 	bl	8003994 <HAL_Delay>
	HAL_UART_Transmit(uart, content, strlen(content),5000 ); /// 5000
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7fe ffb0 	bl	80001f4 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f241 3388 	movw	r3, #5000	; 0x1388
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f005 f812 	bl	80062c8 <HAL_UART_Transmit>
	HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f002 fb75 	bl	8003994 <HAL_Delay>
	sprintf(cmd, "AT+CIPCLOSE=%c", esp_recv_mux);
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <esp_send_data_and_close+0x80>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <esp_send_data_and_close+0x84>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 f92d 	bl	8008518 <siprintf>
	esp_write_line(uart, cmd);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff ff09 	bl	80010dc <esp_write_line>


}
 80012ca:	bf00      	nop
 80012cc:	372c      	adds	r7, #44	; 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800ab30 	.word	0x0800ab30
 80012d8:	2000060c 	.word	0x2000060c
 80012dc:	0800ab44 	.word	0x0800ab44

080012e0 <esp_start_int_recv>:
// Funkcja uruchamiająca obsługę przerwań
void esp_start_int_recv(UART_HandleTypeDef * uart) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(uart);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 80012ee:	2201      	movs	r2, #1
 80012f0:	4903      	ldr	r1, [pc, #12]	; (8001300 <esp_start_int_recv+0x20>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f005 f91c 	bl	8006530 <HAL_UART_Receive_IT>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000610 	.word	0x20000610

08001304 <esp_restart_int_recv>:
// Funkcja wznawiająca obsługę przerwań
void esp_restart_int_recv(UART_HandleTypeDef * uart) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	esp_recv_flag = 0;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <esp_restart_int_recv+0x20>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <esp_restart_int_recv+0x24>)
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f005 f90a 	bl	8006530 <HAL_UART_Receive_IT>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000a14 	.word	0x20000a14
 8001328:	20000610 	.word	0x20000610

0800132c <HAL_UART_RxCpltCallback>:

// Funkcja obsługująca przerwanie, wywoływana w momencie odebrania
// przez interfejs UART pojedynczego bajtu danych
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * uart) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (esp_recv_char == esp_pattern[esp_char_counter]) {
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_UART_RxCpltCallback+0xc0>)
 800133e:	5c9a      	ldrb	r2, [r3, r2]
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	d143      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0xa6>
		esp_char_counter++;
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 8001356:	701a      	strb	r2, [r3, #0]
		if (esp_char_counter == 5) {
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d13a      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0xac>
			// Jeśli odbierzemy ciąg znaków "+IPD,":
			// Odczytujemy numer połączenia do zmiennej esp_recv_mux
			esp_recv_mux = esp_read_char(uart);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff0e 	bl	8001184 <esp_read_char>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_UART_RxCpltCallback+0xc8>)
 800136e:	701a      	strb	r2, [r3, #0]
			esp_read_char(uart);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff07 	bl	8001184 <esp_read_char>
			// Odczytujemy długość odebranych danych do esp_recv_len
			char length_str[5];
			char current_char = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75bb      	strb	r3, [r7, #22]
			uint8_t char_counter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
			do {
				current_char = esp_read_char(uart);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff00 	bl	8001184 <esp_read_char>
 8001384:	4603      	mov	r3, r0
 8001386:	75bb      	strb	r3, [r7, #22]
				length_str[char_counter++] = current_char;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	75fa      	strb	r2, [r7, #23]
 800138e:	f107 0218 	add.w	r2, r7, #24
 8001392:	4413      	add	r3, r2
 8001394:	7dba      	ldrb	r2, [r7, #22]
 8001396:	f803 2c0c 	strb.w	r2, [r3, #-12]
			} while (current_char != ':');
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	2b3a      	cmp	r3, #58	; 0x3a
 800139e:	d1ee      	bne.n	800137e <HAL_UART_RxCpltCallback+0x52>

			length_str[char_counter] = '\0';
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	f107 0218 	add.w	r2, r7, #24
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
			uint16_t esp_recv_len = atoi(&length_str);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fbe8 	bl	8007b88 <atoi>
 80013b8:	4603      	mov	r3, r0
 80013ba:	82bb      	strh	r3, [r7, #20]
			// Odbieramy dane do bufora esp_recv_buffer
			HAL_UART_Receive(uart, esp_recv_buffer,
 80013bc:	8aba      	ldrh	r2, [r7, #20]
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <HAL_UART_RxCpltCallback+0xcc>)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f005 f811 	bl	80063ec <HAL_UART_Receive>
			esp_recv_len, 1000);
			esp_recv_flag = 1;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_UART_RxCpltCallback+0xd0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_UART_RxCpltCallback+0xb6>

			return;
		}
	} else esp_char_counter = 0;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	// Ponowne uruchomienie przerwania
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	4905      	ldr	r1, [pc, #20]	; (80013f0 <HAL_UART_RxCpltCallback+0xc4>)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f005 f8a7 	bl	8006530 <HAL_UART_Receive_IT>
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000611 	.word	0x20000611
 80013ec:	20000a18 	.word	0x20000a18
 80013f0:	20000610 	.word	0x20000610
 80013f4:	2000060c 	.word	0x2000060c
 80013f8:	20000614 	.word	0x20000614
 80013fc:	20000a14 	.word	0x20000a14

08001400 <esp_setup>:
// Funkcja przesyłająca do modułu ESP8266 polecenia konfigurujące
uint8_t esp_setup(UART_HandleTypeDef * uart, char * wifi_name, char * wifi_pass) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b09e      	sub	sp, #120	; 0x78
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
esp_char_counter = 0;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <esp_setup+0xb0>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
strcpy(esp_pattern, "+IPD,");
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <esp_setup+0xb4>)
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <esp_setup+0xb8>)
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	6018      	str	r0, [r3, #0]
 800141a:	8892      	ldrh	r2, [r2, #4]
 800141c:	809a      	strh	r2, [r3, #4]
esp_recv_flag = 0;
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <esp_setup+0xbc>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
char conn_str[100];
sprintf(conn_str, "AT+CWJAP_CUR=\"%s\",\"%s\"", wifi_name, wifi_pass);
 8001424:	f107 0014 	add.w	r0, r7, #20
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4924      	ldr	r1, [pc, #144]	; (80014c0 <esp_setup+0xc0>)
 800142e:	f007 f873 	bl	8008518 <siprintf>
HAL_Delay(500); // Oczekujemy na uruchomienie modułu
 8001432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001436:	f002 faad 	bl	8003994 <HAL_Delay>
if (!esp_send_cmd(uart, "AT+CWMODE=1")) return 0;
 800143a:	4922      	ldr	r1, [pc, #136]	; (80014c4 <esp_setup+0xc4>)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff feb5 	bl	80011ac <esp_send_cmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <esp_setup+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e02d      	b.n	80014a8 <esp_setup+0xa8>
if (!esp_send_cmd(uart, conn_str)) return 0;
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff feaa 	bl	80011ac <esp_send_cmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <esp_setup+0x62>
 800145e:	2300      	movs	r3, #0
 8001460:	e022      	b.n	80014a8 <esp_setup+0xa8>
if (!esp_send_cmd(uart, "AT+CIPMUX=1")) return 0;
 8001462:	4919      	ldr	r1, [pc, #100]	; (80014c8 <esp_setup+0xc8>)
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fea1 	bl	80011ac <esp_send_cmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <esp_setup+0x74>
 8001470:	2300      	movs	r3, #0
 8001472:	e019      	b.n	80014a8 <esp_setup+0xa8>
if (!esp_send_cmd(uart, "AT+CIPSERVER=1,80")) return 0;
 8001474:	4915      	ldr	r1, [pc, #84]	; (80014cc <esp_setup+0xcc>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff fe98 	bl	80011ac <esp_send_cmd>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <esp_setup+0x86>
 8001482:	2300      	movs	r3, #0
 8001484:	e010      	b.n	80014a8 <esp_setup+0xa8>
//if (!esp_send_cmd(uart, "AT+CWJAP")) return 0; // dołożone
if (!esp_send_cmd(uart, "AT+CIPSTA?")) return 0; // dołożone
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <esp_setup+0xd0>)
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fe8f 	bl	80011ac <esp_send_cmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <esp_setup+0x98>
 8001494:	2300      	movs	r3, #0
 8001496:	e007      	b.n	80014a8 <esp_setup+0xa8>
HAL_Delay(1500); // dołożone
 8001498:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800149c:	f002 fa7a 	bl	8003994 <HAL_Delay>
esp_start_int_recv(uart);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff ff1d 	bl	80012e0 <esp_start_int_recv>
return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3778      	adds	r7, #120	; 0x78
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000611 	.word	0x20000611
 80014b4:	20000a18 	.word	0x20000a18
 80014b8:	0800ab54 	.word	0x0800ab54
 80014bc:	20000a14 	.word	0x20000a14
 80014c0:	0800ab5c 	.word	0x0800ab5c
 80014c4:	0800ab74 	.word	0x0800ab74
 80014c8:	0800ab80 	.word	0x0800ab80
 80014cc:	0800ab8c 	.word	0x0800ab8c
 80014d0:	0800ab24 	.word	0x0800ab24

080014d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_GPIO_Init+0xfc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <MX_GPIO_Init+0xfc>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0xfc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_GPIO_Init+0xfc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <MX_GPIO_Init+0xfc>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_CH_PD_Pin|DS_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2128      	movs	r1, #40	; 0x28
 800155e:	481d      	ldr	r0, [pc, #116]	; (80015d4 <MX_GPIO_Init+0x100>)
 8001560:	f002 fd7c 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800156a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_GPIO_Init+0x100>)
 800157c:	f002 fbd2 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_CH_PD_Pin;
 8001580:	2308      	movs	r3, #8
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_CH_PD_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <MX_GPIO_Init+0x100>)
 8001598:	f002 fbc4 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 800159c:	2320      	movs	r3, #32
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a0:	2311      	movs	r3, #17
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <MX_GPIO_Init+0x100>)
 80015b4:	f002 fbb6 	bl	8003d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f002 fae8 	bl	8003b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f002 fb01 	bl	8003bca <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400

080015d8 <HAL_GPIO_EXTI_Callback>:

void Log_Time(void); // pobranie aktualnego czasu i wpisanie aktualnego loga

// tu powinna być tylko deklaracja funkcji, a poniżej maina jej ciało, no ale dobra
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // funkcja z redefinicji
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]

	  Log_Time();
 80015e2:	f000 f9a9 	bl	8001938 <Log_Time>
	//interrupt++;

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <set_led_brightness>:


// Funkcja obliczająca korekcję gamma i ustawiająca jasność diody
void set_led_brightness(TIM_HandleTypeDef * timer,
		uint32_t channel, uint8_t brightness)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	71fb      	strb	r3, [r7, #7]
	int32_t value = powf((double) brightness / 255.0, 2.2) * 49999;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff97 	bl	8000534 <__aeabi_ui2d>
 8001606:	a320      	add	r3, pc, #128	; (adr r3, 8001688 <set_led_brightness+0x98>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f936 	bl	800087c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fade 	bl	8000bd8 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001680 <set_led_brightness+0x90>
 8001622:	ee00 3a10 	vmov	s0, r3
 8001626:	f005 fe6b 	bl	8007300 <powf>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001684 <set_led_brightness+0x94>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163a:	ee17 3a90 	vmov	r3, s15
 800163e:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <set_led_brightness+0x60>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800164e:	e013      	b.n	8001678 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d104      	bne.n	8001660 <set_led_brightness+0x70>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800165e:	e00b      	b.n	8001678 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d104      	bne.n	8001670 <set_led_brightness+0x80>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800166e:	e003      	b.n	8001678 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	400ccccd 	.word	0x400ccccd
 8001684:	47434f00 	.word	0x47434f00
 8001688:	00000000 	.word	0x00000000
 800168c:	406fe000 	.word	0x406fe000

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int web_state=0; // stan jako niezalogowany
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169a:	f002 f909 	bl	80038b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f8e1 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f7ff ff17 	bl	80014d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80016a6:	f000 fbc1 	bl	8001e2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016aa:	f000 fd29 	bl	8002100 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016ae:	f000 fc59 	bl	8001f64 <MX_TIM2_Init>
  MX_RTC_Init();
 80016b2:	f000 f9ef 	bl	8001a94 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016b6:	2100      	movs	r1, #0
 80016b8:	4859      	ldr	r0, [pc, #356]	; (8001820 <main+0x190>)
 80016ba:	f004 fc13 	bl	8005ee4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016be:	2104      	movs	r1, #4
 80016c0:	4857      	ldr	r0, [pc, #348]	; (8001820 <main+0x190>)
 80016c2:	f004 fc0f 	bl	8005ee4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80016c6:	2108      	movs	r1, #8
 80016c8:	4855      	ldr	r0, [pc, #340]	; (8001820 <main+0x190>)
 80016ca:	f004 fc0b 	bl	8005ee4 <HAL_TIMEx_PWMN_Start>


  if(ds18b20_init() != HAL_OK) Error_Handler();
 80016ce:	f7ff fc4f 	bl	8000f70 <ds18b20_init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <main+0x4c>
 80016d8:	f000 f9d6 	bl	8001a88 <Error_Handler>
  //if(ds18b20_read_address(ds1)!= HAL_OK)Error_Handler(); // do odczytywania adresów czujników

  web_def(); // przepisanie stron internetowych
 80016dc:	f001 f870 	bl	80027c0 <web_def>
//  if (esp_setup(&huart1, "BUS OBSERWACYJNY 1504", "HUNDERTWASSERHAUS"))
//	  set_color(100, 100, 0);
//  else
//	  set_color(30, 30, 0);           //////// Docelowy router

  if (esp_setup(&huart1, "BUS OBSERWACYJNY 1504", "HUNDERTWASSERHAUS"))
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <main+0x194>)
 80016e2:	4951      	ldr	r1, [pc, #324]	; (8001828 <main+0x198>)
 80016e4:	4851      	ldr	r0, [pc, #324]	; (800182c <main+0x19c>)
 80016e6:	f7ff fe8b 	bl	8001400 <esp_setup>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <main+0x6c>
	  set_color(100, 100, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2164      	movs	r1, #100	; 0x64
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f000 f9a5 	bl	8001a44 <set_color>
 80016fa:	e004      	b.n	8001706 <main+0x76>
  else
	  set_color(30, 30, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	211e      	movs	r1, #30
 8001700:	201e      	movs	r0, #30
 8001702:	f000 f99f 	bl	8001a44 <set_color>
	//esp_send_data_and_close(&huart1, esp_recv_mux, webpage); // dodałem, żeby wysyłało stronę zanim wejdzie do while
	//esp_restart_int_recv(&huart1);


  //  //set time
    if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2) // próba zrobienia, żeby się nie resetowało
 8001706:	2101      	movs	r1, #1
 8001708:	4849      	ldr	r0, [pc, #292]	; (8001830 <main+0x1a0>)
 800170a:	f003 fd6f 	bl	80051ec <HAL_RTCEx_BKUPRead>
 800170e:	4603      	mov	r3, r0
 8001710:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <main+0xa4>
    {
    sTime.Hours = 0;
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <main+0x1a4>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0;
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <main+0x1a4>)
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0;
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <main+0x1a4>)
 8001726:	2200      	movs	r2, #0
 8001728:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 800172a:	2200      	movs	r2, #0
 800172c:	4941      	ldr	r1, [pc, #260]	; (8001834 <main+0x1a4>)
 800172e:	4840      	ldr	r0, [pc, #256]	; (8001830 <main+0x1a0>)
 8001730:	f003 fabb 	bl	8004caa <HAL_RTC_SetTime>
    }

    sDate.Date = 22;
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <main+0x1a8>)
 8001736:	2216      	movs	r2, #22
 8001738:	709a      	strb	r2, [r3, #2]
    sDate.Month = RTC_MONTH_NOVEMBER;
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <main+0x1a8>)
 800173c:	2211      	movs	r2, #17
 800173e:	705a      	strb	r2, [r3, #1]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <main+0x1a8>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
    sDate.Year = 22;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <main+0x1a8>)
 8001748:	2216      	movs	r2, #22
 800174a:	70da      	strb	r2, [r3, #3]
    HAL_RTC_SetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 800174c:	2200      	movs	r2, #0
 800174e:	493a      	ldr	r1, [pc, #232]	; (8001838 <main+0x1a8>)
 8001750:	4837      	ldr	r0, [pc, #220]	; (8001830 <main+0x1a0>)
 8001752:	f003 fbc5 	bl	8004ee0 <HAL_RTC_SetDate>
//	  esp_send_data_and_close(&huart1, esp_recv_mux, frontpage);
//	  HAL_Delay(15000);



	  if (esp_recv_flag == 1)
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <main+0x1ac>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <main+0xda>
	  {

		select_web(&huart1, &web_state); // &
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4831      	ldr	r0, [pc, #196]	; (800182c <main+0x19c>)
 8001766:	f000 fd45 	bl	80021f4 <select_web>


	  }


	  if (interrupt_flag == 1){
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <main+0x1b0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <main+0xe6>
	  Log_Time();
 8001772:	f000 f8e1 	bl	8001938 <Log_Time>
	  }

	  ds18b20_start_measure(ds1);
 8001776:	4833      	ldr	r0, [pc, #204]	; (8001844 <main+0x1b4>)
 8001778:	f7ff fc31 	bl	8000fde <ds18b20_start_measure>
	  temperature1 = ds18b20_get_temp(ds1);
 800177c:	4831      	ldr	r0, [pc, #196]	; (8001844 <main+0x1b4>)
 800177e:	f7ff fc6d 	bl	800105c <ds18b20_get_temp>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <main+0x1b8>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(temp_char_air,"%0.1f",temperature1);
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <main+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fef1 	bl	8000578 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	492c      	ldr	r1, [pc, #176]	; (800184c <main+0x1bc>)
 800179c:	482c      	ldr	r0, [pc, #176]	; (8001850 <main+0x1c0>)
 800179e:	f006 febb 	bl	8008518 <siprintf>

	  ds18b20_start_measure(ds2);
 80017a2:	482c      	ldr	r0, [pc, #176]	; (8001854 <main+0x1c4>)
 80017a4:	f7ff fc1b 	bl	8000fde <ds18b20_start_measure>
	  temperature2 = ds18b20_get_temp(ds2);
 80017a8:	482a      	ldr	r0, [pc, #168]	; (8001854 <main+0x1c4>)
 80017aa:	f7ff fc57 	bl	800105c <ds18b20_get_temp>
 80017ae:	eef0 7a40 	vmov.f32	s15, s0
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <main+0x1c8>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(temp_char_water,"%0.1f",temperature2);
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <main+0x1c8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fedb 	bl	8000578 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4921      	ldr	r1, [pc, #132]	; (800184c <main+0x1bc>)
 80017c8:	4824      	ldr	r0, [pc, #144]	; (800185c <main+0x1cc>)
 80017ca:	f006 fea5 	bl	8008518 <siprintf>

	  //strcat(&heizung[216], temp_char);
	  heizung[232] = temp_char_air[0];
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <main+0x1c0>)
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <main+0x1d0>)
 80017d4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	  heizung[233] = temp_char_air[1];
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <main+0x1c0>)
 80017da:	785a      	ldrb	r2, [r3, #1]
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <main+0x1d0>)
 80017de:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	  heizung[234] = temp_char_air[2];
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <main+0x1c0>)
 80017e4:	789a      	ldrb	r2, [r3, #2]
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <main+0x1d0>)
 80017e8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	  heizung[235] = temp_char_air[3];
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <main+0x1c0>)
 80017ee:	78da      	ldrb	r2, [r3, #3]
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <main+0x1d0>)
 80017f2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb

	  heizung[285] = temp_char_water[0];
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <main+0x1cc>)
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <main+0x1d0>)
 80017fc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
	  heizung[286] = temp_char_water[1];
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <main+0x1cc>)
 8001802:	785a      	ldrb	r2, [r3, #1]
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <main+0x1d0>)
 8001806:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
	  heizung[287] = temp_char_water[2];
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <main+0x1cc>)
 800180c:	789a      	ldrb	r2, [r3, #2]
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <main+0x1d0>)
 8001810:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
	  heizung[288] = temp_char_water[3];
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <main+0x1cc>)
 8001816:	78da      	ldrb	r2, [r3, #3]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <main+0x1d0>)
 800181a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	  if (esp_recv_flag == 1)
 800181e:	e79a      	b.n	8001756 <main+0xc6>
 8001820:	20003adc 	.word	0x20003adc
 8001824:	0800aba0 	.word	0x0800aba0
 8001828:	0800abb4 	.word	0x0800abb4
 800182c:	20003b6c 	.word	0x20003b6c
 8001830:	20002cc8 	.word	0x20002cc8
 8001834:	20000a24 	.word	0x20000a24
 8001838:	20002cc0 	.word	0x20002cc0
 800183c:	20000a14 	.word	0x20000a14
 8001840:	20000208 	.word	0x20000208
 8001844:	20000000 	.word	0x20000000
 8001848:	20000a20 	.word	0x20000a20
 800184c:	0800abcc 	.word	0x0800abcc
 8001850:	20002c98 	.word	0x20002c98
 8001854:	20000008 	.word	0x20000008
 8001858:	200038e4 	.word	0x200038e4
 800185c:	200038dc 	.word	0x200038dc
 8001860:	20000a38 	.word	0x20000a38

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f006 f9de 	bl	8007c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <SystemClock_Config+0xcc>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <SystemClock_Config+0xcc>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <SystemClock_Config+0xcc>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <SystemClock_Config+0xd0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <SystemClock_Config+0xd0>)
 80018ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <SystemClock_Config+0xd0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80018c0:	2305      	movs	r3, #5
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018ca:	2301      	movs	r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d8:	2304      	movs	r3, #4
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e4:	2304      	movs	r3, #4
 80018e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fbe7 	bl	80040c0 <HAL_RCC_OscConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018f8:	f000 f8c6 	bl	8001a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fc:	230f      	movs	r3, #15
 80018fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2103      	movs	r1, #3
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fe49 	bl	80045b0 <HAL_RCC_ClockConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001924:	f000 f8b0 	bl	8001a88 <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	; 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <Log_Time>:

/* USER CODE BEGIN 4 */

void Log_Time(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

	int i=644;
 800193e:	f44f 7321 	mov.w	r3, #644	; 0x284
 8001942:	60fb      	str	r3, [r7, #12]
	//char seconds[2]={'0','0'};
	char seconds[3]={0,0,0};
 8001944:	4a3a      	ldr	r2, [pc, #232]	; (8001a30 <Log_Time+0xf8>)
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	8019      	strh	r1, [r3, #0]
 8001950:	3302      	adds	r3, #2
 8001952:	0c12      	lsrs	r2, r2, #16
 8001954:	701a      	strb	r2, [r3, #0]
	char minutes[3]={0,0,0};
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <Log_Time+0xf8>)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	8019      	strh	r1, [r3, #0]
 8001960:	3302      	adds	r3, #2
 8001962:	0c12      	lsrs	r2, r2, #16
 8001964:	701a      	strb	r2, [r3, #0]
	//seconds[0]=48;
	//seconds[1]=48;
	//seconds[2]=48;
	  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 8001966:	2200      	movs	r2, #0
 8001968:	4932      	ldr	r1, [pc, #200]	; (8001a34 <Log_Time+0xfc>)
 800196a:	4833      	ldr	r0, [pc, #204]	; (8001a38 <Log_Time+0x100>)
 800196c:	f003 fa5a 	bl	8004e24 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 8001970:	2200      	movs	r2, #0
 8001972:	4932      	ldr	r1, [pc, #200]	; (8001a3c <Log_Time+0x104>)
 8001974:	4830      	ldr	r0, [pc, #192]	; (8001a38 <Log_Time+0x100>)
 8001976:	f003 fb5a 	bl	800502e <HAL_RTC_GetDate>
	  //presence[299]=(int)(sTime.Seconds);
	  //itoa(sTime.Seconds,presence+298,10);
	  itoa(sTime.Seconds,seconds,10);
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <Log_Time+0xfc>)
 800197c:	789b      	ldrb	r3, [r3, #2]
 800197e:	4618      	mov	r0, r3
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	220a      	movs	r2, #10
 8001986:	4619      	mov	r1, r3
 8001988:	f006 f944 	bl	8007c14 <itoa>
	  itoa(sTime.Minutes,minutes,10);
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <Log_Time+0xfc>)
 800198e:	785b      	ldrb	r3, [r3, #1]
 8001990:	4618      	mov	r0, r3
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	220a      	movs	r2, #10
 8001996:	4619      	mov	r1, r3
 8001998:	f006 f93c 	bl	8007c14 <itoa>


	  if (seconds[1]=='\0'){
 800199c:	7a7b      	ldrb	r3, [r7, #9]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <Log_Time+0x6e>
		  seconds[1]='0';
 80019a2:	2330      	movs	r3, #48	; 0x30
 80019a4:	727b      	strb	r3, [r7, #9]
	  }

	  if(minutes[1]=='\0'){
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <Log_Time+0x78>
		 minutes[1]='0';
 80019ac:	2330      	movs	r3, #48	; 0x30
 80019ae:	717b      	strb	r3, [r7, #5]
	 }

	  if(sTime.Seconds < 10){
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <Log_Time+0xfc>)
 80019b2:	789b      	ldrb	r3, [r3, #2]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d808      	bhi.n	80019ca <Log_Time+0x92>
	  presence[298]=seconds[1];
 80019b8:	7a7a      	ldrb	r2, [r7, #9]
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <Log_Time+0x108>)
 80019bc:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
	  presence[299]=seconds[0];
 80019c0:	7a3a      	ldrb	r2, [r7, #8]
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <Log_Time+0x108>)
 80019c4:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 80019c8:	e007      	b.n	80019da <Log_Time+0xa2>
	  }
	  else{
		  presence[298]=seconds[0];
 80019ca:	7a3a      	ldrb	r2, [r7, #8]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <Log_Time+0x108>)
 80019ce:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
		  presence[299]=seconds[1];
 80019d2:	7a7a      	ldrb	r2, [r7, #9]
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <Log_Time+0x108>)
 80019d6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
	  }

	  if (sTime.Minutes < 10){
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <Log_Time+0xfc>)
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	2b09      	cmp	r3, #9
 80019e0:	d808      	bhi.n	80019f4 <Log_Time+0xbc>
	  presence[295]=minutes[1];
 80019e2:	797a      	ldrb	r2, [r7, #5]
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <Log_Time+0x108>)
 80019e6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	  presence[296]=minutes[0];
 80019ea:	793a      	ldrb	r2, [r7, #4]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <Log_Time+0x108>)
 80019ee:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80019f2:	e014      	b.n	8001a1e <Log_Time+0xe6>
	  }
	  else{
		  presence[295]=minutes[0];
 80019f4:	793a      	ldrb	r2, [r7, #4]
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <Log_Time+0x108>)
 80019f8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
		  presence[296]=minutes[1];
 80019fc:	797a      	ldrb	r2, [r7, #5]
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <Log_Time+0x108>)
 8001a00:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	  }


	  while(i>311){
 8001a04:	e00b      	b.n	8001a1e <Log_Time+0xe6>
		  presence[i]=presence[i-37];
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b25      	subs	r3, #37	; 0x25
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <Log_Time+0x108>)
 8001a0c:	5cd1      	ldrb	r1, [r2, r3]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <Log_Time+0x108>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	460a      	mov	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
		  i--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
	  while(i>311){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001a24:	daef      	bge.n	8001a06 <Log_Time+0xce>
	  //presence_page(UART_HandleTypeDef * uart ,*web_state);
	  //esp_send_data_and_close(&huart1, esp_recv_mux, presence);

	  //interrupt_flag=0;

}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800abd4 	.word	0x0800abd4
 8001a34:	20000a24 	.word	0x20000a24
 8001a38:	20002cc8 	.word	0x20002cc8
 8001a3c:	20002cc0 	.word	0x20002cc0
 8001a40:	20000d58 	.word	0x20000d58

08001a44 <set_color>:

void set_color(uint8_t red, uint8_t green, uint8_t blue)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	4613      	mov	r3, r2
 8001a54:	717b      	strb	r3, [r7, #5]
	set_led_brightness(&htim1, TIM_CHANNEL_2, red);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <set_color+0x40>)
 8001a5e:	f7ff fdc7 	bl	80015f0 <set_led_brightness>
	set_led_brightness(&htim1, TIM_CHANNEL_3, green);
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2108      	movs	r1, #8
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <set_color+0x40>)
 8001a6a:	f7ff fdc1 	bl	80015f0 <set_led_brightness>
	set_led_brightness(&htim1, TIM_CHANNEL_1, blue);
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	461a      	mov	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <set_color+0x40>)
 8001a76:	f7ff fdbb 	bl	80015f0 <set_led_brightness>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20003adc 	.word	0x20003adc

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <MX_RTC_Init+0xac>)
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <MX_RTC_Init+0xb0>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_RTC_Init+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_RTC_Init+0xac>)
 8001aba:	227f      	movs	r2, #127	; 0x7f
 8001abc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_RTC_Init+0xac>)
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_RTC_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_RTC_Init+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_RTC_Init+0xac>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ad6:	481a      	ldr	r0, [pc, #104]	; (8001b40 <MX_RTC_Init+0xac>)
 8001ad8:	f003 f856 	bl	8004b88 <HAL_RTC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ae2:	f7ff ffd1 	bl	8001a88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2201      	movs	r2, #1
 8001afe:	4619      	mov	r1, r3
 8001b00:	480f      	ldr	r0, [pc, #60]	; (8001b40 <MX_RTC_Init+0xac>)
 8001b02:	f003 f8d2 	bl	8004caa <HAL_RTC_SetTime>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001b0c:	f7ff ffbc 	bl	8001a88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b10:	2301      	movs	r3, #1
 8001b12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b14:	2301      	movs	r3, #1
 8001b16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	2201      	movs	r2, #1
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_RTC_Init+0xac>)
 8001b28:	f003 f9da 	bl	8004ee0 <HAL_RTC_SetDate>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b32:	f7ff ffa9 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20002cc8 	.word	0x20002cc8
 8001b44:	40002800 	.word	0x40002800

08001b48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_RTC_MspInit+0x50>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b74:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 ff14 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001b86:	f7ff ff7f 	bl	8001a88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_RTC_MspInit+0x54>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40002800 	.word	0x40002800
 8001b9c:	42470e3c 	.word	0x42470e3c

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_MspInit+0x4c>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_MspInit+0x4c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_MspInit+0x4c>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_MspInit+0x4c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler+0x4>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f001 fe8a 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM2_IRQHandler+0x10>)
 8001c4a:	f003 fbe0 	bl	800540e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20003b24 	.word	0x20003b24

08001c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <USART1_IRQHandler+0x10>)
 8001c5e:	f004 fc97 	bl	8006590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20003b6c 	.word	0x20003b6c

08001c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c74:	f002 fa0c 	bl	8004090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c96:	f005 ff7b 	bl	8007b90 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0x12>

08001cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
	}

return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf1      	blt.n	8001d0c <_write+0x12>
	}
	return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f005 fee0 	bl	8007b90 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20020000 	.word	0x20020000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	2000020c 	.word	0x2000020c
 8001e04:	20003bc8 	.word	0x20003bc8

08001e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b092      	sub	sp, #72	; 0x48
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2220      	movs	r2, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 feec 	bl	8007c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e5e:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <MX_TIM1_Init+0x134>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e70:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e88:	4834      	ldr	r0, [pc, #208]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001e8a:	f003 fa71 	bl	8005370 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e94:	f7ff fdf8 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	482d      	ldr	r0, [pc, #180]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001ea8:	f004 f8c8 	bl	800603c <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001eb2:	f7ff fde9 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	; 0x60
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4820      	ldr	r0, [pc, #128]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001edc:	f003 fba0 	bl	8005620 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001ee6:	f7ff fdcf 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481a      	ldr	r0, [pc, #104]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001ef4:	f003 fb94 	bl	8005620 <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001efe:	f7ff fdc3 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	2208      	movs	r2, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4814      	ldr	r0, [pc, #80]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001f0c:	f003 fb88 	bl	8005620 <HAL_TIM_PWM_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001f16:	f7ff fdb7 	bl	8001a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001f3e:	f004 f8eb 	bl	8006118 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001f48:	f7ff fd9e 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <MX_TIM1_Init+0x130>)
 8001f4e:	f000 f89d 	bl	800208c <HAL_TIM_MspPostInit>

}
 8001f52:	bf00      	nop
 8001f54:	3748      	adds	r7, #72	; 0x48
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20003adc 	.word	0x20003adc
 8001f60:	40010000 	.word	0x40010000

08001f64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001f8a:	224f      	movs	r2, #79	; 0x4f
 8001f8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001faa:	f003 f937 	bl	800521c <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fb4:	f7ff fd68 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001fc6:	f003 fbed 	bl	80057a4 <HAL_TIM_ConfigClockSource>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fd0:	f7ff fd5a 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM2_Init+0x94>)
 8001fe2:	f004 f82b 	bl	800603c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fec:	f7ff fd4c 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20003b24 	.word	0x20003b24

08001ffc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_TIM_PWM_MspInit+0x3c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10d      	bne.n	800202a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_TIM_PWM_MspInit+0x40>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_TIM_PWM_MspInit+0x40>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_TIM_PWM_MspInit+0x40>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d115      	bne.n	800207e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	201c      	movs	r0, #28
 8002074:	f001 fd8d 	bl	8003b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002078:	201c      	movs	r0, #28
 800207a:	f001 fda6 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_TIM_MspPostInit+0x68>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11e      	bne.n	80020ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_TIM_MspPostInit+0x6c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_TIM_MspPostInit+0x6c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 80020ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020dc:	2301      	movs	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	4619      	mov	r1, r3
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_TIM_MspPostInit+0x70>)
 80020e8:	f001 fe1c 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020400 	.word	0x40020400

08002100 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_USART1_UART_Init+0x50>)
 8002108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_USART1_UART_Init+0x4c>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USART1_UART_Init+0x4c>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USART1_UART_Init+0x4c>)
 8002138:	f004 f879 	bl	800622e <HAL_UART_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002142:	f7ff fca1 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20003b6c 	.word	0x20003b6c
 8002150:	40011000 	.word	0x40011000

08002154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_UART_MspInit+0x94>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d134      	bne.n	80021e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_UART_MspInit+0x98>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_UART_MspInit+0x98>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_UART_MspInit+0x98>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_UART_MspInit+0x98>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c0:	2307      	movs	r3, #7
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4809      	ldr	r0, [pc, #36]	; (80021f0 <HAL_UART_MspInit+0x9c>)
 80021cc:	f001 fdaa 	bl	8003d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2025      	movs	r0, #37	; 0x25
 80021d6:	f001 fcdc 	bl	8003b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021da:	2025      	movs	r0, #37	; 0x25
 80021dc:	f001 fcf5 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <select_web>:
#include <tim.h>



void select_web (UART_HandleTypeDef *huart, int *web_state)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	// Odczytujemy pierwsze 6 znaków odebranego żądania HTTP
	char request_begining[7];

	for (uint8_t i = 0; i < 6; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e00c      	b.n	800221e <select_web+0x2a>
		request_begining[i] = esp_recv_buffer[i];
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	4938      	ldr	r1, [pc, #224]	; (80022ec <select_web+0xf8>)
 800220a:	5c8a      	ldrb	r2, [r1, r2]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f107 0110 	add.w	r1, r7, #16
 8002212:	440b      	add	r3, r1
 8002214:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 6; i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d9ef      	bls.n	8002204 <select_web+0x10>
	request_begining[6] = '\0';
 8002224:	2300      	movs	r3, #0
 8002226:	73bb      	strb	r3, [r7, #14]
	// Jeśli przesłane zostały parametry - początek żądania:
	// "GET /?red=XXX&green=XXX&blue=XXX HTTP/1.1"
	if (strcmp(request_begining, "GET /?") == 0)
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <select_web+0xfc>)
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ffd6 	bl	80001e0 <strcmp>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d12f      	bne.n	800229a <select_web+0xa6>
	{
		set_color(0,0,80);
 800223a:	2250      	movs	r2, #80	; 0x50
 800223c:	2100      	movs	r1, #0
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fc00 	bl	8001a44 <set_color>
		//HAL_Delay(500);

		switch (*web_state)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d846      	bhi.n	80022da <select_web+0xe6>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <select_web+0x60>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002269 	.word	0x08002269
 8002258:	08002273 	.word	0x08002273
 800225c:	0800227d 	.word	0x0800227d
 8002260:	08002287 	.word	0x08002287
 8002264:	08002291 	.word	0x08002291
		{
		case NOT_LOGGED:
			login(&huart1,web_state);
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <select_web+0x100>)
 800226c:	f000 f84c 	bl	8002308 <login>
			break;
 8002270:	e034      	b.n	80022dc <select_web+0xe8>
		case LOGGED:
			handle_request_strona(&huart1,web_state);
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	481f      	ldr	r0, [pc, #124]	; (80022f4 <select_web+0x100>)
 8002276:	f000 f8c3 	bl	8002400 <handle_request_strona>
			break;
 800227a:	e02f      	b.n	80022dc <select_web+0xe8>
		case LIGHTS:
			lights_page(&huart1,web_state);
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <select_web+0x100>)
 8002280:	f000 f9c0 	bl	8002604 <lights_page>
			break;
 8002284:	e02a      	b.n	80022dc <select_web+0xe8>
		case HEIZUNG:
			heizung_seite(&huart1,web_state);
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	481a      	ldr	r0, [pc, #104]	; (80022f4 <select_web+0x100>)
 800228a:	f000 fa05 	bl	8002698 <heizung_seite>
		break;
 800228e:	e025      	b.n	80022dc <select_web+0xe8>
		case PRESENCE:
			presence_page(&huart1,web_state);
 8002290:	6839      	ldr	r1, [r7, #0]
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <select_web+0x100>)
 8002294:	f000 fa4a 	bl	800272c <presence_page>
		break;
 8002298:	e020      	b.n	80022dc <select_web+0xe8>
		default:
			break;
		}

////// Sprawdzenie loginu
	}else if (strcmp(request_begining, "GET / ") == 0)
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4916      	ldr	r1, [pc, #88]	; (80022f8 <select_web+0x104>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd ff9d 	bl	80001e0 <strcmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10d      	bne.n	80022c8 <select_web+0xd4>
	{
		set_color(200,0,0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	20c8      	movs	r0, #200	; 0xc8
 80022b2:	f7ff fbc7 	bl	8001a44 <set_color>
		esp_send_data_and_close(huart, esp_recv_mux, frontpage);
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <select_web+0x108>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4a10      	ldr	r2, [pc, #64]	; (8002300 <select_web+0x10c>)
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe ffc9 	bl	8001258 <esp_send_data_and_close>
 80022c6:	e009      	b.n	80022dc <select_web+0xe8>
	}
	else
		esp_send_data_and_close(huart, esp_recv_mux, error);
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <select_web+0x108>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <select_web+0x110>)
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe ffc0 	bl	8001258 <esp_send_data_and_close>
 80022d8:	e000      	b.n	80022dc <select_web+0xe8>
			break;
 80022da:	bf00      	nop
///////////////////////////////////////////////////////////////////////////////
	esp_restart_int_recv(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff f811 	bl	8001304 <esp_restart_int_recv>

	//return web_state;

}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000614 	.word	0x20000614
 80022f0:	0800abd8 	.word	0x0800abd8
 80022f4:	20003b6c 	.word	0x20003b6c
 80022f8:	0800abe0 	.word	0x0800abe0
 80022fc:	2000060c 	.word	0x2000060c
 8002300:	200038e8 	.word	0x200038e8
 8002304:	200034d4 	.word	0x200034d4

08002308 <login>:

void login(UART_HandleTypeDef * uart, int *web_state)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	int l=0; //litera logowania
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]


	for(int i=12 ; i<=17 ; i++)
 8002316:	230c      	movs	r3, #12
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e00f      	b.n	800233c <login+0x34>
	{
		check_login[l]=esp_recv_buffer[i];
 800231c:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <login+0xdc>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2d9      	uxtb	r1, r3
 8002326:	4a30      	ldr	r2, [pc, #192]	; (80023e8 <login+0xe0>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4413      	add	r3, r2
 800232c:	460a      	mov	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
		l++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
	for(int i=12 ; i<=17 ; i++)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3301      	adds	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b11      	cmp	r3, #17
 8002340:	ddec      	ble.n	800231c <login+0x14>
	}
	l=0;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

	//////Sprawdzenie hasła
	for(int i=25 ; i<=30 ; i++)
 8002346:	2319      	movs	r3, #25
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e00f      	b.n	800236c <login+0x64>
	{
		check_password[l]=esp_recv_buffer[i];
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <login+0xdc>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	4a25      	ldr	r2, [pc, #148]	; (80023ec <login+0xe4>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	460a      	mov	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]
		l++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
	for(int i=25 ; i<=30 ; i++)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b1e      	cmp	r3, #30
 8002370:	ddec      	ble.n	800234c <login+0x44>
	}
	l=0;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

///////////////////////Sprawdzenie poprawności logowania
    if((strcmp(check_login,"kwas97")==0)  &&  (strcmp(check_password,"kwas97")==0))
 8002376:	491e      	ldr	r1, [pc, #120]	; (80023f0 <login+0xe8>)
 8002378:	481b      	ldr	r0, [pc, #108]	; (80023e8 <login+0xe0>)
 800237a:	f7fd ff31 	bl	80001e0 <strcmp>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d117      	bne.n	80023b4 <login+0xac>
 8002384:	491a      	ldr	r1, [pc, #104]	; (80023f0 <login+0xe8>)
 8002386:	4819      	ldr	r0, [pc, #100]	; (80023ec <login+0xe4>)
 8002388:	f7fd ff2a 	bl	80001e0 <strcmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d110      	bne.n	80023b4 <login+0xac>
	{
		set_color(250,250,250);
 8002392:	22fa      	movs	r2, #250	; 0xfa
 8002394:	21fa      	movs	r1, #250	; 0xfa
 8002396:	20fa      	movs	r0, #250	; 0xfa
 8002398:	f7ff fb54 	bl	8001a44 <set_color>
		*web_state=LOGGED;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <login+0xec>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <login+0xf0>)
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe ff53 	bl	8001258 <esp_send_data_and_close>
	{
 80023b2:	e00f      	b.n	80023d4 <login+0xcc>

	}
    else //((strcmp(check_login,"kwas97")!=0)||(strcmp(check_password,"kwas97")!=0))
	{
		set_color(30,30,30);
 80023b4:	221e      	movs	r2, #30
 80023b6:	211e      	movs	r1, #30
 80023b8:	201e      	movs	r0, #30
 80023ba:	f7ff fb43 	bl	8001a44 <set_color>
		*web_state=NOT_LOGGED;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, frontpage);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <login+0xec>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <login+0xf4>)
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe ff42 	bl	8001258 <esp_send_data_and_close>
		//select_web(uart,web_state);
	}

    	esp_restart_int_recv(uart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe ff95 	bl	8001304 <esp_restart_int_recv>
    		//return web_state;
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000614 	.word	0x20000614
 80023e8:	200036c8 	.word	0x200036c8
 80023ec:	20002ca0 	.word	0x20002ca0
 80023f0:	0800abe8 	.word	0x0800abe8
 80023f4:	2000060c 	.word	0x2000060c
 80023f8:	200036e8 	.word	0x200036e8
 80023fc:	200038e8 	.word	0x200038e8

08002400 <handle_request_strona>:



// Funkcja wywoływana w momencie otrzymania danych przez połączenie TCP
void handle_request_strona(UART_HandleTypeDef * uart, int *web_state)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	// Odczytujemy pierwsze 6 znaków odebranego żądania HTTP

	// Odczytujemy pierwsze 3 liczby, jakie pojawią się w adresie
	// - są to wartości poszczególnych kolorów składowych (RGB)
	int nums[3] = { 0, 0, 0 };
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
	int num_counter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
	int l=0;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
	uint8_t last_char_was_digit = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	77fb      	strb	r3, [r7, #31]
	for (int i = 6; i < 41; i++)
 8002422:	2306      	movs	r3, #6
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e047      	b.n	80024b8 <handle_request_strona+0xb8>
	if (esp_recv_buffer[i] >= '0' && esp_recv_buffer[i] <= '9') {
 8002428:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <handle_request_strona+0x1d0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b2f      	cmp	r3, #47	; 0x2f
 8002434:	d932      	bls.n	800249c <handle_request_strona+0x9c>
 8002436:	4a66      	ldr	r2, [pc, #408]	; (80025d0 <handle_request_strona+0x1d0>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b39      	cmp	r3, #57	; 0x39
 8002442:	d82b      	bhi.n	800249c <handle_request_strona+0x9c>
	last_char_was_digit = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
	nums[num_counter] *= 10;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002450:	4413      	add	r3, r2
 8002452:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	461a      	mov	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002468:	440b      	add	r3, r1
 800246a:	f843 2c20 	str.w	r2, [r3, #-32]
	nums[num_counter] += esp_recv_buffer[i] - '0';
 800246e:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <handle_request_strona+0x1d0>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002484:	440b      	add	r3, r1
 8002486:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800248a:	441a      	add	r2, r3
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002494:	440b      	add	r3, r1
 8002496:	f843 2c20 	str.w	r2, [r3, #-32]
 800249a:	e00a      	b.n	80024b2 <handle_request_strona+0xb2>
	} else if (last_char_was_digit == 1) {
 800249c:	7ffb      	ldrb	r3, [r7, #31]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <handle_request_strona+0xb2>
	last_char_was_digit = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	77fb      	strb	r3, [r7, #31]
	num_counter++;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
	if (num_counter == 4)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d006      	beq.n	80024c0 <handle_request_strona+0xc0>
	for (int i = 6; i < 41; i++)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b28      	cmp	r3, #40	; 0x28
 80024bc:	ddb4      	ble.n	8002428 <handle_request_strona+0x28>
 80024be:	e000      	b.n	80024c2 <handle_request_strona+0xc2>
	break;
 80024c0:	bf00      	nop
	}

	for (int i=6 ; i<=7; i++)
 80024c2:	2306      	movs	r3, #6
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e00f      	b.n	80024e8 <handle_request_strona+0xe8>
	{
		button_check[l]=esp_recv_buffer[i];
 80024c8:	4a41      	ldr	r2, [pc, #260]	; (80025d0 <handle_request_strona+0x1d0>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2d9      	uxtb	r1, r3
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <handle_request_strona+0x1d4>)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	4413      	add	r3, r2
 80024d8:	460a      	mov	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
		l++;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	3301      	adds	r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
	for (int i=6 ; i<=7; i++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	ddec      	ble.n	80024c8 <handle_request_strona+0xc8>
	}
	l=0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]

	if(strcmp(button_check,"wl")==0){
 80024f2:	4939      	ldr	r1, [pc, #228]	; (80025d8 <handle_request_strona+0x1d8>)
 80024f4:	4837      	ldr	r0, [pc, #220]	; (80025d4 <handle_request_strona+0x1d4>)
 80024f6:	f7fd fe73 	bl	80001e0 <strcmp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <handle_request_strona+0x118>
		*web_state=NOT_LOGGED;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, frontpage);
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <handle_request_strona+0x1dc>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <handle_request_strona+0x1e0>)
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe fea1 	bl	8001258 <esp_send_data_and_close>
 8002516:	e053      	b.n	80025c0 <handle_request_strona+0x1c0>
	}
	else if(strcmp(button_check,"os")==0){
 8002518:	4932      	ldr	r1, [pc, #200]	; (80025e4 <handle_request_strona+0x1e4>)
 800251a:	482e      	ldr	r0, [pc, #184]	; (80025d4 <handle_request_strona+0x1d4>)
 800251c:	f7fd fe60 	bl	80001e0 <strcmp>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <handle_request_strona+0x13e>
		*web_state=LIGHTS;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2202      	movs	r2, #2
 800252a:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, lights);
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <handle_request_strona+0x1dc>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <handle_request_strona+0x1e8>)
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fe8e 	bl	8001258 <esp_send_data_and_close>
 800253c:	e040      	b.n	80025c0 <handle_request_strona+0x1c0>
	}
	else if(strcmp(button_check,"og")==0){
 800253e:	492b      	ldr	r1, [pc, #172]	; (80025ec <handle_request_strona+0x1ec>)
 8002540:	4824      	ldr	r0, [pc, #144]	; (80025d4 <handle_request_strona+0x1d4>)
 8002542:	f7fd fe4d 	bl	80001e0 <strcmp>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <handle_request_strona+0x164>
		*web_state=HEIZUNG;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2203      	movs	r2, #3
 8002550:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, heizung );
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <handle_request_strona+0x1dc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <handle_request_strona+0x1f0>)
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fe7b 	bl	8001258 <esp_send_data_and_close>
 8002562:	e02d      	b.n	80025c0 <handle_request_strona+0x1c0>
	}

	else if(strcmp(button_check,"ob")==0){
 8002564:	4923      	ldr	r1, [pc, #140]	; (80025f4 <handle_request_strona+0x1f4>)
 8002566:	481b      	ldr	r0, [pc, #108]	; (80025d4 <handle_request_strona+0x1d4>)
 8002568:	f7fd fe3a 	bl	80001e0 <strcmp>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <handle_request_strona+0x18a>
		*web_state=PRESENCE;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2204      	movs	r2, #4
 8002576:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, presence);
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <handle_request_strona+0x1dc>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <handle_request_strona+0x1f8>)
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fe68 	bl	8001258 <esp_send_data_and_close>
 8002588:	e01a      	b.n	80025c0 <handle_request_strona+0x1c0>
	}



	else if(strcmp(button_check,"pw")==0){
 800258a:	491c      	ldr	r1, [pc, #112]	; (80025fc <handle_request_strona+0x1fc>)
 800258c:	4811      	ldr	r0, [pc, #68]	; (80025d4 <handle_request_strona+0x1d4>)
 800258e:	f7fd fe27 	bl	80001e0 <strcmp>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <handle_request_strona+0x1b0>
		*web_state=LOGGED;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <handle_request_strona+0x1dc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <handle_request_strona+0x200>)
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe fe55 	bl	8001258 <esp_send_data_and_close>
 80025ae:	e007      	b.n	80025c0 <handle_request_strona+0x1c0>
	}

	else esp_send_data_and_close(uart, esp_recv_mux, webpage);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <handle_request_strona+0x1dc>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <handle_request_strona+0x200>)
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fe4c 	bl	8001258 <esp_send_data_and_close>
	//set_color(nums[0], nums[1], nums[2]);
	// Zwracamy stronę WWW z formularzem wyboru kolorów
	//esp_send_data_and_close(uart, esp_recv_mux, webpage);
	// Jeśli żądanie dotyczy strony głównej - "GET / HTTP/1.1"

	esp_restart_int_recv(uart);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fe9f 	bl	8001304 <esp_restart_int_recv>
}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000614 	.word	0x20000614
 80025d4:	20002cc4 	.word	0x20002cc4
 80025d8:	0800abf0 	.word	0x0800abf0
 80025dc:	2000060c 	.word	0x2000060c
 80025e0:	200038e8 	.word	0x200038e8
 80025e4:	0800abf4 	.word	0x0800abf4
 80025e8:	20002ce8 	.word	0x20002ce8
 80025ec:	0800abf8 	.word	0x0800abf8
 80025f0:	20000a38 	.word	0x20000a38
 80025f4:	0800abfc 	.word	0x0800abfc
 80025f8:	20000d58 	.word	0x20000d58
 80025fc:	0800ac00 	.word	0x0800ac00
 8002600:	200036e8 	.word	0x200036e8

08002604 <lights_page>:

void lights_page(UART_HandleTypeDef * uart, int *web_state)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]

	int l=0;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]

	for (int i=6 ; i<=7; i++)
 8002612:	2306      	movs	r3, #6
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	e00f      	b.n	8002638 <lights_page+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <lights_page+0x7c>)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b2d9      	uxtb	r1, r3
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <lights_page+0x80>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	460a      	mov	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
		l++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
	for (int i=6 ; i<=7; i++)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3301      	adds	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b07      	cmp	r3, #7
 800263c:	ddec      	ble.n	8002618 <lights_page+0x14>
	}
	l=0;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]

	if(strcmp(button_check,"pw")==0)
 8002642:	4911      	ldr	r1, [pc, #68]	; (8002688 <lights_page+0x84>)
 8002644:	480f      	ldr	r0, [pc, #60]	; (8002684 <lights_page+0x80>)
 8002646:	f7fd fdcb 	bl	80001e0 <strcmp>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <lights_page+0x64>
	{
		*web_state=LOGGED;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <lights_page+0x88>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <lights_page+0x8c>)
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fdf9 	bl	8001258 <esp_send_data_and_close>
	{
	esp_send_data_and_close(uart, esp_recv_mux, lights);
	//esp_restart_int_recv(uart);
	}

}
 8002666:	e007      	b.n	8002678 <lights_page+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, lights);
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <lights_page+0x88>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <lights_page+0x90>)
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fdf0 	bl	8001258 <esp_send_data_and_close>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000614 	.word	0x20000614
 8002684:	20002cc4 	.word	0x20002cc4
 8002688:	0800ac00 	.word	0x0800ac00
 800268c:	2000060c 	.word	0x2000060c
 8002690:	200036e8 	.word	0x200036e8
 8002694:	20002ce8 	.word	0x20002ce8

08002698 <heizung_seite>:



void heizung_seite(UART_HandleTypeDef * uart ,int *web_state) //uint8_t
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]

	int l=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]

	for (int i=21 ; i<=22; i++)
 80026a6:	2315      	movs	r3, #21
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	e00f      	b.n	80026cc <heizung_seite+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <heizung_seite+0x7c>)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2d9      	uxtb	r1, r3
 80026b6:	4a18      	ldr	r2, [pc, #96]	; (8002718 <heizung_seite+0x80>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	460a      	mov	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
		l++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
	for (int i=21 ; i<=22; i++)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b16      	cmp	r3, #22
 80026d0:	ddec      	ble.n	80026ac <heizung_seite+0x14>
	}
	l=0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]


	if(strcmp(button_check,"pw")==0) // zmień na pw
 80026d6:	4911      	ldr	r1, [pc, #68]	; (800271c <heizung_seite+0x84>)
 80026d8:	480f      	ldr	r0, [pc, #60]	; (8002718 <heizung_seite+0x80>)
 80026da:	f7fd fd81 	bl	80001e0 <strcmp>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <heizung_seite+0x64>
	{
		*web_state=LOGGED;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <heizung_seite+0x88>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <heizung_seite+0x8c>)
 80026f2:	4619      	mov	r1, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fdaf 	bl	8001258 <esp_send_data_and_close>
	else
	{
	esp_send_data_and_close(uart, esp_recv_mux, heizung);
	}

}
 80026fa:	e007      	b.n	800270c <heizung_seite+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, heizung);
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <heizung_seite+0x88>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <heizung_seite+0x90>)
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fda6 	bl	8001258 <esp_send_data_and_close>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000614 	.word	0x20000614
 8002718:	20002cc4 	.word	0x20002cc4
 800271c:	0800ac00 	.word	0x0800ac00
 8002720:	2000060c 	.word	0x2000060c
 8002724:	200036e8 	.word	0x200036e8
 8002728:	20000a38 	.word	0x20000a38

0800272c <presence_page>:

void presence_page(UART_HandleTypeDef * uart ,int *web_state) //uint8_t
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]

	int l=0;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]

	for (int i=6 ; i<=7; i++)
 800273a:	2306      	movs	r3, #6
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	e00f      	b.n	8002760 <presence_page+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <presence_page+0x7c>)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2d9      	uxtb	r1, r3
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <presence_page+0x80>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	460a      	mov	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
		l++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
	for (int i=6 ; i<=7; i++)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b07      	cmp	r3, #7
 8002764:	ddec      	ble.n	8002740 <presence_page+0x14>
	}
	l=0;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]


	if(strcmp(button_check,"pw")==0) // zmień na pw
 800276a:	4911      	ldr	r1, [pc, #68]	; (80027b0 <presence_page+0x84>)
 800276c:	480f      	ldr	r0, [pc, #60]	; (80027ac <presence_page+0x80>)
 800276e:	f7fd fd37 	bl	80001e0 <strcmp>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <presence_page+0x64>
	{
		*web_state=LOGGED;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <presence_page+0x88>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <presence_page+0x8c>)
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fe fd65 	bl	8001258 <esp_send_data_and_close>
	else
	{
	esp_send_data_and_close(uart, esp_recv_mux, presence);
	}

}
 800278e:	e007      	b.n	80027a0 <presence_page+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, presence);
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <presence_page+0x88>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <presence_page+0x90>)
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fd5c 	bl	8001258 <esp_send_data_and_close>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000614 	.word	0x20000614
 80027ac:	20002cc4 	.word	0x20002cc4
 80027b0:	0800ac00 	.word	0x0800ac00
 80027b4:	2000060c 	.word	0x2000060c
 80027b8:	200036e8 	.word	0x200036e8
 80027bc:	20000d58 	.word	0x20000d58

080027c0 <web_def>:



void web_def (void)
{
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	af00      	add	r7, sp, #0
//////////////OBECNOŚĆ/////////////////////////////////////////////
	  strcpy(presence, "HTTP/1.1 200 OK\r\n");
 80027c4:	4acd      	ldr	r2, [pc, #820]	; (8002afc <web_def+0x33c>)
 80027c6:	4bce      	ldr	r3, [pc, #824]	; (8002b00 <web_def+0x340>)
 80027c8:	4615      	mov	r5, r2
 80027ca:	461c      	mov	r4, r3
 80027cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ce:	6028      	str	r0, [r5, #0]
 80027d0:	6069      	str	r1, [r5, #4]
 80027d2:	60aa      	str	r2, [r5, #8]
 80027d4:	60eb      	str	r3, [r5, #12]
 80027d6:	8823      	ldrh	r3, [r4, #0]
 80027d8:	822b      	strh	r3, [r5, #16]
	  strcat(presence, "Content-Type: text/html\r\n");
 80027da:	48c8      	ldr	r0, [pc, #800]	; (8002afc <web_def+0x33c>)
 80027dc:	f7fd fd0a 	bl	80001f4 <strlen>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4bc5      	ldr	r3, [pc, #788]	; (8002afc <web_def+0x33c>)
 80027e6:	4413      	add	r3, r2
 80027e8:	4ac6      	ldr	r2, [pc, #792]	; (8002b04 <web_def+0x344>)
 80027ea:	461d      	mov	r5, r3
 80027ec:	4614      	mov	r4, r2
 80027ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f0:	6028      	str	r0, [r5, #0]
 80027f2:	6069      	str	r1, [r5, #4]
 80027f4:	60aa      	str	r2, [r5, #8]
 80027f6:	60eb      	str	r3, [r5, #12]
 80027f8:	cc03      	ldmia	r4!, {r0, r1}
 80027fa:	6128      	str	r0, [r5, #16]
 80027fc:	6169      	str	r1, [r5, #20]
 80027fe:	8823      	ldrh	r3, [r4, #0]
 8002800:	832b      	strh	r3, [r5, #24]
	  strcat(presence, "Content-Lenght: 398\r\n");
 8002802:	48be      	ldr	r0, [pc, #760]	; (8002afc <web_def+0x33c>)
 8002804:	f7fd fcf6 	bl	80001f4 <strlen>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4bbb      	ldr	r3, [pc, #748]	; (8002afc <web_def+0x33c>)
 800280e:	4413      	add	r3, r2
 8002810:	4abd      	ldr	r2, [pc, #756]	; (8002b08 <web_def+0x348>)
 8002812:	461d      	mov	r5, r3
 8002814:	4614      	mov	r4, r2
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	6028      	str	r0, [r5, #0]
 800281a:	6069      	str	r1, [r5, #4]
 800281c:	60aa      	str	r2, [r5, #8]
 800281e:	60eb      	str	r3, [r5, #12]
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	6128      	str	r0, [r5, #16]
 8002824:	88a3      	ldrh	r3, [r4, #4]
 8002826:	82ab      	strh	r3, [r5, #20]
	  strcat(presence, "Connection: close\r\n\r\n");
 8002828:	48b4      	ldr	r0, [pc, #720]	; (8002afc <web_def+0x33c>)
 800282a:	f7fd fce3 	bl	80001f4 <strlen>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	4bb2      	ldr	r3, [pc, #712]	; (8002afc <web_def+0x33c>)
 8002834:	4413      	add	r3, r2
 8002836:	4ab5      	ldr	r2, [pc, #724]	; (8002b0c <web_def+0x34c>)
 8002838:	461d      	mov	r5, r3
 800283a:	4614      	mov	r4, r2
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	6028      	str	r0, [r5, #0]
 8002840:	6069      	str	r1, [r5, #4]
 8002842:	60aa      	str	r2, [r5, #8]
 8002844:	60eb      	str	r3, [r5, #12]
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	6128      	str	r0, [r5, #16]
 800284a:	88a3      	ldrh	r3, [r4, #4]
 800284c:	82ab      	strh	r3, [r5, #20]
	  strcat(presence, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 800284e:	48ab      	ldr	r0, [pc, #684]	; (8002afc <web_def+0x33c>)
 8002850:	f7fd fcd0 	bl	80001f4 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	4ba8      	ldr	r3, [pc, #672]	; (8002afc <web_def+0x33c>)
 800285a:	4413      	add	r3, r2
 800285c:	4aac      	ldr	r2, [pc, #688]	; (8002b10 <web_def+0x350>)
 800285e:	4614      	mov	r4, r2
 8002860:	469c      	mov	ip, r3
 8002862:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002866:	4665      	mov	r5, ip
 8002868:	4626      	mov	r6, r4
 800286a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800286c:	6028      	str	r0, [r5, #0]
 800286e:	6069      	str	r1, [r5, #4]
 8002870:	60aa      	str	r2, [r5, #8]
 8002872:	60eb      	str	r3, [r5, #12]
 8002874:	3410      	adds	r4, #16
 8002876:	f10c 0c10 	add.w	ip, ip, #16
 800287a:	4574      	cmp	r4, lr
 800287c:	d1f3      	bne.n	8002866 <web_def+0xa6>
 800287e:	4662      	mov	r2, ip
 8002880:	4623      	mov	r3, r4
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	8013      	strh	r3, [r2, #0]
	  strcat(presence, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8002886:	489d      	ldr	r0, [pc, #628]	; (8002afc <web_def+0x33c>)
 8002888:	f7fd fcb4 	bl	80001f4 <strlen>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b9a      	ldr	r3, [pc, #616]	; (8002afc <web_def+0x33c>)
 8002892:	4413      	add	r3, r2
 8002894:	4a9f      	ldr	r2, [pc, #636]	; (8002b14 <web_def+0x354>)
 8002896:	4614      	mov	r4, r2
 8002898:	469c      	mov	ip, r3
 800289a:	f104 0e20 	add.w	lr, r4, #32
 800289e:	4665      	mov	r5, ip
 80028a0:	4626      	mov	r6, r4
 80028a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028a4:	6028      	str	r0, [r5, #0]
 80028a6:	6069      	str	r1, [r5, #4]
 80028a8:	60aa      	str	r2, [r5, #8]
 80028aa:	60eb      	str	r3, [r5, #12]
 80028ac:	3410      	adds	r4, #16
 80028ae:	f10c 0c10 	add.w	ip, ip, #16
 80028b2:	4574      	cmp	r4, lr
 80028b4:	d1f3      	bne.n	800289e <web_def+0xde>
 80028b6:	4663      	mov	r3, ip
 80028b8:	4622      	mov	r2, r4
 80028ba:	6810      	ldr	r0, [r2, #0]
 80028bc:	6018      	str	r0, [r3, #0]
	  strcat(presence, "<body>\r\n<form method=\"get\">\r\n");
 80028be:	488f      	ldr	r0, [pc, #572]	; (8002afc <web_def+0x33c>)
 80028c0:	f7fd fc98 	bl	80001f4 <strlen>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <web_def+0x33c>)
 80028ca:	4413      	add	r3, r2
 80028cc:	4a92      	ldr	r2, [pc, #584]	; (8002b18 <web_def+0x358>)
 80028ce:	461d      	mov	r5, r3
 80028d0:	4614      	mov	r4, r2
 80028d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d4:	6028      	str	r0, [r5, #0]
 80028d6:	6069      	str	r1, [r5, #4]
 80028d8:	60aa      	str	r2, [r5, #8]
 80028da:	60eb      	str	r3, [r5, #12]
 80028dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028de:	6128      	str	r0, [r5, #16]
 80028e0:	6169      	str	r1, [r5, #20]
 80028e2:	61aa      	str	r2, [r5, #24]
 80028e4:	8823      	ldrh	r3, [r4, #0]
 80028e6:	83ab      	strh	r3, [r5, #28]
	  // stąd wyciągnąłem napis obecnosc
	  //strcat(presence, "<p><b>Temperatura wody w zasobniku:    °C</b> </p></p>\r\n"); //°C
	  //strcat(presence, "<p><b>Zadana temperatura (10-33):</b><input type=\"text\"name=\"tm\" value=\"22\" /></p>\r\n");
	  //strcat(presence, "<p><b>  <input type=\"range\" id=\"volume\" name=\"volume\"min=\"0\" max=\"9\"><label for=\"volume\">Volume</label>\r\n");
	  strcat(presence, "<p><b>Obecnosc w pomieszczeniu  </b> </p>\r\n"); //°C
 80028e8:	4884      	ldr	r0, [pc, #528]	; (8002afc <web_def+0x33c>)
 80028ea:	f7fd fc83 	bl	80001f4 <strlen>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b82      	ldr	r3, [pc, #520]	; (8002afc <web_def+0x33c>)
 80028f4:	4413      	add	r3, r2
 80028f6:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <web_def+0x35c>)
 80028f8:	4614      	mov	r4, r2
 80028fa:	469c      	mov	ip, r3
 80028fc:	f104 0e20 	add.w	lr, r4, #32
 8002900:	4665      	mov	r5, ip
 8002902:	4626      	mov	r6, r4
 8002904:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002906:	6028      	str	r0, [r5, #0]
 8002908:	6069      	str	r1, [r5, #4]
 800290a:	60aa      	str	r2, [r5, #8]
 800290c:	60eb      	str	r3, [r5, #12]
 800290e:	3410      	adds	r4, #16
 8002910:	f10c 0c10 	add.w	ip, ip, #16
 8002914:	4574      	cmp	r4, lr
 8002916:	d1f3      	bne.n	8002900 <web_def+0x140>
 8002918:	4665      	mov	r5, ip
 800291a:	4623      	mov	r3, r4
 800291c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800291e:	6028      	str	r0, [r5, #0]
 8002920:	6069      	str	r1, [r5, #4]
 8002922:	60aa      	str	r2, [r5, #8]
	  strcat(presence, "<p><b>Data:  Godzina:  </b> </p>\r\n");
 8002924:	4875      	ldr	r0, [pc, #468]	; (8002afc <web_def+0x33c>)
 8002926:	f7fd fc65 	bl	80001f4 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <web_def+0x33c>)
 8002930:	4413      	add	r3, r2
 8002932:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <web_def+0x360>)
 8002934:	4614      	mov	r4, r2
 8002936:	469c      	mov	ip, r3
 8002938:	f104 0e20 	add.w	lr, r4, #32
 800293c:	4665      	mov	r5, ip
 800293e:	4626      	mov	r6, r4
 8002940:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002942:	6028      	str	r0, [r5, #0]
 8002944:	6069      	str	r1, [r5, #4]
 8002946:	60aa      	str	r2, [r5, #8]
 8002948:	60eb      	str	r3, [r5, #12]
 800294a:	3410      	adds	r4, #16
 800294c:	f10c 0c10 	add.w	ip, ip, #16
 8002950:	4574      	cmp	r4, lr
 8002952:	d1f3      	bne.n	800293c <web_def+0x17c>
 8002954:	4663      	mov	r3, ip
 8002956:	4622      	mov	r2, r4
 8002958:	8811      	ldrh	r1, [r2, #0]
 800295a:	7892      	ldrb	r2, [r2, #2]
 800295c:	8019      	strh	r1, [r3, #0]
 800295e:	709a      	strb	r2, [r3, #2]
	  strcat(presence, "<p><b> --:--:-- , --:--:50 </b> </p>\r\n");
 8002960:	4866      	ldr	r0, [pc, #408]	; (8002afc <web_def+0x33c>)
 8002962:	f7fd fc47 	bl	80001f4 <strlen>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b64      	ldr	r3, [pc, #400]	; (8002afc <web_def+0x33c>)
 800296c:	4413      	add	r3, r2
 800296e:	4a6d      	ldr	r2, [pc, #436]	; (8002b24 <web_def+0x364>)
 8002970:	4614      	mov	r4, r2
 8002972:	469c      	mov	ip, r3
 8002974:	f104 0e20 	add.w	lr, r4, #32
 8002978:	4665      	mov	r5, ip
 800297a:	4626      	mov	r6, r4
 800297c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800297e:	6028      	str	r0, [r5, #0]
 8002980:	6069      	str	r1, [r5, #4]
 8002982:	60aa      	str	r2, [r5, #8]
 8002984:	60eb      	str	r3, [r5, #12]
 8002986:	3410      	adds	r4, #16
 8002988:	f10c 0c10 	add.w	ip, ip, #16
 800298c:	4574      	cmp	r4, lr
 800298e:	d1f3      	bne.n	8002978 <web_def+0x1b8>
 8002990:	4663      	mov	r3, ip
 8002992:	4622      	mov	r2, r4
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	8891      	ldrh	r1, [r2, #4]
 800299a:	7992      	ldrb	r2, [r2, #6]
 800299c:	8099      	strh	r1, [r3, #4]
 800299e:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:40 </b> </p>\r\n");
 80029a0:	4856      	ldr	r0, [pc, #344]	; (8002afc <web_def+0x33c>)
 80029a2:	f7fd fc27 	bl	80001f4 <strlen>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <web_def+0x33c>)
 80029ac:	4413      	add	r3, r2
 80029ae:	4a5e      	ldr	r2, [pc, #376]	; (8002b28 <web_def+0x368>)
 80029b0:	4614      	mov	r4, r2
 80029b2:	469c      	mov	ip, r3
 80029b4:	f104 0e20 	add.w	lr, r4, #32
 80029b8:	4665      	mov	r5, ip
 80029ba:	4626      	mov	r6, r4
 80029bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029be:	6028      	str	r0, [r5, #0]
 80029c0:	6069      	str	r1, [r5, #4]
 80029c2:	60aa      	str	r2, [r5, #8]
 80029c4:	60eb      	str	r3, [r5, #12]
 80029c6:	3410      	adds	r4, #16
 80029c8:	f10c 0c10 	add.w	ip, ip, #16
 80029cc:	4574      	cmp	r4, lr
 80029ce:	d1f3      	bne.n	80029b8 <web_def+0x1f8>
 80029d0:	4663      	mov	r3, ip
 80029d2:	4622      	mov	r2, r4
 80029d4:	6810      	ldr	r0, [r2, #0]
 80029d6:	6018      	str	r0, [r3, #0]
 80029d8:	8891      	ldrh	r1, [r2, #4]
 80029da:	7992      	ldrb	r2, [r2, #6]
 80029dc:	8099      	strh	r1, [r3, #4]
 80029de:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:30 </b> </p>\r\n");
 80029e0:	4846      	ldr	r0, [pc, #280]	; (8002afc <web_def+0x33c>)
 80029e2:	f7fd fc07 	bl	80001f4 <strlen>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b44      	ldr	r3, [pc, #272]	; (8002afc <web_def+0x33c>)
 80029ec:	4413      	add	r3, r2
 80029ee:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <web_def+0x36c>)
 80029f0:	4614      	mov	r4, r2
 80029f2:	469c      	mov	ip, r3
 80029f4:	f104 0e20 	add.w	lr, r4, #32
 80029f8:	4665      	mov	r5, ip
 80029fa:	4626      	mov	r6, r4
 80029fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029fe:	6028      	str	r0, [r5, #0]
 8002a00:	6069      	str	r1, [r5, #4]
 8002a02:	60aa      	str	r2, [r5, #8]
 8002a04:	60eb      	str	r3, [r5, #12]
 8002a06:	3410      	adds	r4, #16
 8002a08:	f10c 0c10 	add.w	ip, ip, #16
 8002a0c:	4574      	cmp	r4, lr
 8002a0e:	d1f3      	bne.n	80029f8 <web_def+0x238>
 8002a10:	4663      	mov	r3, ip
 8002a12:	4622      	mov	r2, r4
 8002a14:	6810      	ldr	r0, [r2, #0]
 8002a16:	6018      	str	r0, [r3, #0]
 8002a18:	8891      	ldrh	r1, [r2, #4]
 8002a1a:	7992      	ldrb	r2, [r2, #6]
 8002a1c:	8099      	strh	r1, [r3, #4]
 8002a1e:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:20 </b> </p>\r\n");
 8002a20:	4836      	ldr	r0, [pc, #216]	; (8002afc <web_def+0x33c>)
 8002a22:	f7fd fbe7 	bl	80001f4 <strlen>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <web_def+0x33c>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <web_def+0x370>)
 8002a30:	4614      	mov	r4, r2
 8002a32:	469c      	mov	ip, r3
 8002a34:	f104 0e20 	add.w	lr, r4, #32
 8002a38:	4665      	mov	r5, ip
 8002a3a:	4626      	mov	r6, r4
 8002a3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a3e:	6028      	str	r0, [r5, #0]
 8002a40:	6069      	str	r1, [r5, #4]
 8002a42:	60aa      	str	r2, [r5, #8]
 8002a44:	60eb      	str	r3, [r5, #12]
 8002a46:	3410      	adds	r4, #16
 8002a48:	f10c 0c10 	add.w	ip, ip, #16
 8002a4c:	4574      	cmp	r4, lr
 8002a4e:	d1f3      	bne.n	8002a38 <web_def+0x278>
 8002a50:	4663      	mov	r3, ip
 8002a52:	4622      	mov	r2, r4
 8002a54:	6810      	ldr	r0, [r2, #0]
 8002a56:	6018      	str	r0, [r3, #0]
 8002a58:	8891      	ldrh	r1, [r2, #4]
 8002a5a:	7992      	ldrb	r2, [r2, #6]
 8002a5c:	8099      	strh	r1, [r3, #4]
 8002a5e:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:10 </b> </p>\r\n");
 8002a60:	4826      	ldr	r0, [pc, #152]	; (8002afc <web_def+0x33c>)
 8002a62:	f7fd fbc7 	bl	80001f4 <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <web_def+0x33c>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <web_def+0x374>)
 8002a70:	4614      	mov	r4, r2
 8002a72:	469c      	mov	ip, r3
 8002a74:	f104 0e20 	add.w	lr, r4, #32
 8002a78:	4665      	mov	r5, ip
 8002a7a:	4626      	mov	r6, r4
 8002a7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	6069      	str	r1, [r5, #4]
 8002a82:	60aa      	str	r2, [r5, #8]
 8002a84:	60eb      	str	r3, [r5, #12]
 8002a86:	3410      	adds	r4, #16
 8002a88:	f10c 0c10 	add.w	ip, ip, #16
 8002a8c:	4574      	cmp	r4, lr
 8002a8e:	d1f3      	bne.n	8002a78 <web_def+0x2b8>
 8002a90:	4663      	mov	r3, ip
 8002a92:	4622      	mov	r2, r4
 8002a94:	6810      	ldr	r0, [r2, #0]
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	8891      	ldrh	r1, [r2, #4]
 8002a9a:	7992      	ldrb	r2, [r2, #6]
 8002a9c:	8099      	strh	r1, [r3, #4]
 8002a9e:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:00 </b> </p>\r\n");
 8002aa0:	4816      	ldr	r0, [pc, #88]	; (8002afc <web_def+0x33c>)
 8002aa2:	f7fd fba7 	bl	80001f4 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <web_def+0x33c>)
 8002aac:	4413      	add	r3, r2
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <web_def+0x378>)
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	469c      	mov	ip, r3
 8002ab4:	f104 0e20 	add.w	lr, r4, #32
 8002ab8:	4665      	mov	r5, ip
 8002aba:	4626      	mov	r6, r4
 8002abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002abe:	6028      	str	r0, [r5, #0]
 8002ac0:	6069      	str	r1, [r5, #4]
 8002ac2:	60aa      	str	r2, [r5, #8]
 8002ac4:	60eb      	str	r3, [r5, #12]
 8002ac6:	3410      	adds	r4, #16
 8002ac8:	f10c 0c10 	add.w	ip, ip, #16
 8002acc:	4574      	cmp	r4, lr
 8002ace:	d1f3      	bne.n	8002ab8 <web_def+0x2f8>
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	6810      	ldr	r0, [r2, #0]
 8002ad6:	6018      	str	r0, [r3, #0]
 8002ad8:	8891      	ldrh	r1, [r2, #4]
 8002ada:	7992      	ldrb	r2, [r2, #6]
 8002adc:	8099      	strh	r1, [r3, #4]
 8002ade:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:50 </b> </p>\r\n");
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <web_def+0x33c>)
 8002ae2:	f7fd fb87 	bl	80001f4 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <web_def+0x33c>)
 8002aec:	4413      	add	r3, r2
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <web_def+0x364>)
 8002af0:	4614      	mov	r4, r2
 8002af2:	469c      	mov	ip, r3
 8002af4:	f104 0e20 	add.w	lr, r4, #32
 8002af8:	e020      	b.n	8002b3c <web_def+0x37c>
 8002afa:	bf00      	nop
 8002afc:	20000d58 	.word	0x20000d58
 8002b00:	0800ac04 	.word	0x0800ac04
 8002b04:	0800ac18 	.word	0x0800ac18
 8002b08:	0800ac34 	.word	0x0800ac34
 8002b0c:	0800ac4c 	.word	0x0800ac4c
 8002b10:	0800ac64 	.word	0x0800ac64
 8002b14:	0800ac98 	.word	0x0800ac98
 8002b18:	0800acbc 	.word	0x0800acbc
 8002b1c:	0800acdc 	.word	0x0800acdc
 8002b20:	0800ad08 	.word	0x0800ad08
 8002b24:	0800ad2c 	.word	0x0800ad2c
 8002b28:	0800ad54 	.word	0x0800ad54
 8002b2c:	0800ad7c 	.word	0x0800ad7c
 8002b30:	0800ada4 	.word	0x0800ada4
 8002b34:	0800adcc 	.word	0x0800adcc
 8002b38:	0800adf4 	.word	0x0800adf4
 8002b3c:	4665      	mov	r5, ip
 8002b3e:	4626      	mov	r6, r4
 8002b40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b42:	6028      	str	r0, [r5, #0]
 8002b44:	6069      	str	r1, [r5, #4]
 8002b46:	60aa      	str	r2, [r5, #8]
 8002b48:	60eb      	str	r3, [r5, #12]
 8002b4a:	3410      	adds	r4, #16
 8002b4c:	f10c 0c10 	add.w	ip, ip, #16
 8002b50:	4574      	cmp	r4, lr
 8002b52:	d1f3      	bne.n	8002b3c <web_def+0x37c>
 8002b54:	4663      	mov	r3, ip
 8002b56:	4622      	mov	r2, r4
 8002b58:	6810      	ldr	r0, [r2, #0]
 8002b5a:	6018      	str	r0, [r3, #0]
 8002b5c:	8891      	ldrh	r1, [r2, #4]
 8002b5e:	7992      	ldrb	r2, [r2, #6]
 8002b60:	8099      	strh	r1, [r3, #4]
 8002b62:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:40 </b> </p>\r\n");
 8002b64:	48d1      	ldr	r0, [pc, #836]	; (8002eac <web_def+0x6ec>)
 8002b66:	f7fd fb45 	bl	80001f4 <strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4bcf      	ldr	r3, [pc, #828]	; (8002eac <web_def+0x6ec>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4acf      	ldr	r2, [pc, #828]	; (8002eb0 <web_def+0x6f0>)
 8002b74:	4614      	mov	r4, r2
 8002b76:	469c      	mov	ip, r3
 8002b78:	f104 0e20 	add.w	lr, r4, #32
 8002b7c:	4665      	mov	r5, ip
 8002b7e:	4626      	mov	r6, r4
 8002b80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b82:	6028      	str	r0, [r5, #0]
 8002b84:	6069      	str	r1, [r5, #4]
 8002b86:	60aa      	str	r2, [r5, #8]
 8002b88:	60eb      	str	r3, [r5, #12]
 8002b8a:	3410      	adds	r4, #16
 8002b8c:	f10c 0c10 	add.w	ip, ip, #16
 8002b90:	4574      	cmp	r4, lr
 8002b92:	d1f3      	bne.n	8002b7c <web_def+0x3bc>
 8002b94:	4663      	mov	r3, ip
 8002b96:	4622      	mov	r2, r4
 8002b98:	6810      	ldr	r0, [r2, #0]
 8002b9a:	6018      	str	r0, [r3, #0]
 8002b9c:	8891      	ldrh	r1, [r2, #4]
 8002b9e:	7992      	ldrb	r2, [r2, #6]
 8002ba0:	8099      	strh	r1, [r3, #4]
 8002ba2:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:30 </b> </p>\r\n");
 8002ba4:	48c1      	ldr	r0, [pc, #772]	; (8002eac <web_def+0x6ec>)
 8002ba6:	f7fd fb25 	bl	80001f4 <strlen>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4bbf      	ldr	r3, [pc, #764]	; (8002eac <web_def+0x6ec>)
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4ac0      	ldr	r2, [pc, #768]	; (8002eb4 <web_def+0x6f4>)
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	469c      	mov	ip, r3
 8002bb8:	f104 0e20 	add.w	lr, r4, #32
 8002bbc:	4665      	mov	r5, ip
 8002bbe:	4626      	mov	r6, r4
 8002bc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bc2:	6028      	str	r0, [r5, #0]
 8002bc4:	6069      	str	r1, [r5, #4]
 8002bc6:	60aa      	str	r2, [r5, #8]
 8002bc8:	60eb      	str	r3, [r5, #12]
 8002bca:	3410      	adds	r4, #16
 8002bcc:	f10c 0c10 	add.w	ip, ip, #16
 8002bd0:	4574      	cmp	r4, lr
 8002bd2:	d1f3      	bne.n	8002bbc <web_def+0x3fc>
 8002bd4:	4663      	mov	r3, ip
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	6810      	ldr	r0, [r2, #0]
 8002bda:	6018      	str	r0, [r3, #0]
 8002bdc:	8891      	ldrh	r1, [r2, #4]
 8002bde:	7992      	ldrb	r2, [r2, #6]
 8002be0:	8099      	strh	r1, [r3, #4]
 8002be2:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b> --:--:-- , --:--:20 </b> </p>\r\n");
 8002be4:	48b1      	ldr	r0, [pc, #708]	; (8002eac <web_def+0x6ec>)
 8002be6:	f7fd fb05 	bl	80001f4 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	4baf      	ldr	r3, [pc, #700]	; (8002eac <web_def+0x6ec>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4ab1      	ldr	r2, [pc, #708]	; (8002eb8 <web_def+0x6f8>)
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	469c      	mov	ip, r3
 8002bf8:	f104 0e20 	add.w	lr, r4, #32
 8002bfc:	4665      	mov	r5, ip
 8002bfe:	4626      	mov	r6, r4
 8002c00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c02:	6028      	str	r0, [r5, #0]
 8002c04:	6069      	str	r1, [r5, #4]
 8002c06:	60aa      	str	r2, [r5, #8]
 8002c08:	60eb      	str	r3, [r5, #12]
 8002c0a:	3410      	adds	r4, #16
 8002c0c:	f10c 0c10 	add.w	ip, ip, #16
 8002c10:	4574      	cmp	r4, lr
 8002c12:	d1f3      	bne.n	8002bfc <web_def+0x43c>
 8002c14:	4663      	mov	r3, ip
 8002c16:	4622      	mov	r2, r4
 8002c18:	6810      	ldr	r0, [r2, #0]
 8002c1a:	6018      	str	r0, [r3, #0]
 8002c1c:	8891      	ldrh	r1, [r2, #4]
 8002c1e:	7992      	ldrb	r2, [r2, #6]
 8002c20:	8099      	strh	r1, [r3, #4]
 8002c22:	719a      	strb	r2, [r3, #6]
	  strcat(presence, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8002c24:	48a1      	ldr	r0, [pc, #644]	; (8002eac <web_def+0x6ec>)
 8002c26:	f7fd fae5 	bl	80001f4 <strlen>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b9f      	ldr	r3, [pc, #636]	; (8002eac <web_def+0x6ec>)
 8002c30:	4413      	add	r3, r2
 8002c32:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <web_def+0x6fc>)
 8002c34:	4614      	mov	r4, r2
 8002c36:	469c      	mov	ip, r3
 8002c38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002c3c:	4665      	mov	r5, ip
 8002c3e:	4626      	mov	r6, r4
 8002c40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c42:	6028      	str	r0, [r5, #0]
 8002c44:	6069      	str	r1, [r5, #4]
 8002c46:	60aa      	str	r2, [r5, #8]
 8002c48:	60eb      	str	r3, [r5, #12]
 8002c4a:	3410      	adds	r4, #16
 8002c4c:	f10c 0c10 	add.w	ip, ip, #16
 8002c50:	4574      	cmp	r4, lr
 8002c52:	d1f3      	bne.n	8002c3c <web_def+0x47c>
 8002c54:	4662      	mov	r2, ip
 8002c56:	4623      	mov	r3, r4
 8002c58:	cb03      	ldmia	r3!, {r0, r1}
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	6051      	str	r1, [r2, #4]
 8002c5e:	8819      	ldrh	r1, [r3, #0]
 8002c60:	789b      	ldrb	r3, [r3, #2]
 8002c62:	8111      	strh	r1, [r2, #8]
 8002c64:	7293      	strb	r3, [r2, #10]
///////////////////////////////////////////////////////////////


///////////// OGRZEWANIE ///////////////////////////////////////////////

  strcpy(heizung, "HTTP/1.1 200 OK\r\n");
 8002c66:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <web_def+0x700>)
 8002c68:	4b96      	ldr	r3, [pc, #600]	; (8002ec4 <web_def+0x704>)
 8002c6a:	4615      	mov	r5, r2
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c70:	6028      	str	r0, [r5, #0]
 8002c72:	6069      	str	r1, [r5, #4]
 8002c74:	60aa      	str	r2, [r5, #8]
 8002c76:	60eb      	str	r3, [r5, #12]
 8002c78:	8823      	ldrh	r3, [r4, #0]
 8002c7a:	822b      	strh	r3, [r5, #16]
  strcat(heizung, "Content-Type: text/html\r\n");
 8002c7c:	4890      	ldr	r0, [pc, #576]	; (8002ec0 <web_def+0x700>)
 8002c7e:	f7fd fab9 	bl	80001f4 <strlen>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <web_def+0x700>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a8f      	ldr	r2, [pc, #572]	; (8002ec8 <web_def+0x708>)
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	4614      	mov	r4, r2
 8002c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c92:	6028      	str	r0, [r5, #0]
 8002c94:	6069      	str	r1, [r5, #4]
 8002c96:	60aa      	str	r2, [r5, #8]
 8002c98:	60eb      	str	r3, [r5, #12]
 8002c9a:	cc03      	ldmia	r4!, {r0, r1}
 8002c9c:	6128      	str	r0, [r5, #16]
 8002c9e:	6169      	str	r1, [r5, #20]
 8002ca0:	8823      	ldrh	r3, [r4, #0]
 8002ca2:	832b      	strh	r3, [r5, #24]
  strcat(heizung, "Content-Lenght: 398\r\n");
 8002ca4:	4886      	ldr	r0, [pc, #536]	; (8002ec0 <web_def+0x700>)
 8002ca6:	f7fd faa5 	bl	80001f4 <strlen>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <web_def+0x700>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a86      	ldr	r2, [pc, #536]	; (8002ecc <web_def+0x70c>)
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	4614      	mov	r4, r2
 8002cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cba:	6028      	str	r0, [r5, #0]
 8002cbc:	6069      	str	r1, [r5, #4]
 8002cbe:	60aa      	str	r2, [r5, #8]
 8002cc0:	60eb      	str	r3, [r5, #12]
 8002cc2:	6820      	ldr	r0, [r4, #0]
 8002cc4:	6128      	str	r0, [r5, #16]
 8002cc6:	88a3      	ldrh	r3, [r4, #4]
 8002cc8:	82ab      	strh	r3, [r5, #20]
  strcat(heizung, "Connection: close\r\n\r\n");
 8002cca:	487d      	ldr	r0, [pc, #500]	; (8002ec0 <web_def+0x700>)
 8002ccc:	f7fd fa92 	bl	80001f4 <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <web_def+0x700>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a7d      	ldr	r2, [pc, #500]	; (8002ed0 <web_def+0x710>)
 8002cda:	461d      	mov	r5, r3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce0:	6028      	str	r0, [r5, #0]
 8002ce2:	6069      	str	r1, [r5, #4]
 8002ce4:	60aa      	str	r2, [r5, #8]
 8002ce6:	60eb      	str	r3, [r5, #12]
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	6128      	str	r0, [r5, #16]
 8002cec:	88a3      	ldrh	r3, [r4, #4]
 8002cee:	82ab      	strh	r3, [r5, #20]
  strcat(heizung, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 8002cf0:	4873      	ldr	r0, [pc, #460]	; (8002ec0 <web_def+0x700>)
 8002cf2:	f7fd fa7f 	bl	80001f4 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <web_def+0x700>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a75      	ldr	r2, [pc, #468]	; (8002ed4 <web_def+0x714>)
 8002d00:	4614      	mov	r4, r2
 8002d02:	469c      	mov	ip, r3
 8002d04:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002d08:	4665      	mov	r5, ip
 8002d0a:	4626      	mov	r6, r4
 8002d0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d0e:	6028      	str	r0, [r5, #0]
 8002d10:	6069      	str	r1, [r5, #4]
 8002d12:	60aa      	str	r2, [r5, #8]
 8002d14:	60eb      	str	r3, [r5, #12]
 8002d16:	3410      	adds	r4, #16
 8002d18:	f10c 0c10 	add.w	ip, ip, #16
 8002d1c:	4574      	cmp	r4, lr
 8002d1e:	d1f3      	bne.n	8002d08 <web_def+0x548>
 8002d20:	4662      	mov	r2, ip
 8002d22:	4623      	mov	r3, r4
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	8013      	strh	r3, [r2, #0]
  strcat(heizung, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8002d28:	4865      	ldr	r0, [pc, #404]	; (8002ec0 <web_def+0x700>)
 8002d2a:	f7fd fa63 	bl	80001f4 <strlen>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <web_def+0x700>)
 8002d34:	4413      	add	r3, r2
 8002d36:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <web_def+0x718>)
 8002d38:	4614      	mov	r4, r2
 8002d3a:	469c      	mov	ip, r3
 8002d3c:	f104 0e20 	add.w	lr, r4, #32
 8002d40:	4665      	mov	r5, ip
 8002d42:	4626      	mov	r6, r4
 8002d44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d46:	6028      	str	r0, [r5, #0]
 8002d48:	6069      	str	r1, [r5, #4]
 8002d4a:	60aa      	str	r2, [r5, #8]
 8002d4c:	60eb      	str	r3, [r5, #12]
 8002d4e:	3410      	adds	r4, #16
 8002d50:	f10c 0c10 	add.w	ip, ip, #16
 8002d54:	4574      	cmp	r4, lr
 8002d56:	d1f3      	bne.n	8002d40 <web_def+0x580>
 8002d58:	4663      	mov	r3, ip
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	6810      	ldr	r0, [r2, #0]
 8002d5e:	6018      	str	r0, [r3, #0]
  strcat(heizung, "<body>\r\n<form method=\"get\">\r\n");
 8002d60:	4857      	ldr	r0, [pc, #348]	; (8002ec0 <web_def+0x700>)
 8002d62:	f7fd fa47 	bl	80001f4 <strlen>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <web_def+0x700>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	; (8002edc <web_def+0x71c>)
 8002d70:	461d      	mov	r5, r3
 8002d72:	4614      	mov	r4, r2
 8002d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d76:	6028      	str	r0, [r5, #0]
 8002d78:	6069      	str	r1, [r5, #4]
 8002d7a:	60aa      	str	r2, [r5, #8]
 8002d7c:	60eb      	str	r3, [r5, #12]
 8002d7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002d80:	6128      	str	r0, [r5, #16]
 8002d82:	6169      	str	r1, [r5, #20]
 8002d84:	61aa      	str	r2, [r5, #24]
 8002d86:	8823      	ldrh	r3, [r4, #0]
 8002d88:	83ab      	strh	r3, [r5, #28]
  strcat(heizung, "<p><b>Temperatura w pomieszczeniu:    °C</b> </p>\r\n"); //°C
 8002d8a:	484d      	ldr	r0, [pc, #308]	; (8002ec0 <web_def+0x700>)
 8002d8c:	f7fd fa32 	bl	80001f4 <strlen>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <web_def+0x700>)
 8002d96:	4413      	add	r3, r2
 8002d98:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <web_def+0x720>)
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	469c      	mov	ip, r3
 8002d9e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002da2:	4665      	mov	r5, ip
 8002da4:	4626      	mov	r6, r4
 8002da6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002da8:	6028      	str	r0, [r5, #0]
 8002daa:	6069      	str	r1, [r5, #4]
 8002dac:	60aa      	str	r2, [r5, #8]
 8002dae:	60eb      	str	r3, [r5, #12]
 8002db0:	3410      	adds	r4, #16
 8002db2:	f10c 0c10 	add.w	ip, ip, #16
 8002db6:	4574      	cmp	r4, lr
 8002db8:	d1f3      	bne.n	8002da2 <web_def+0x5e2>
 8002dba:	4663      	mov	r3, ip
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	6810      	ldr	r0, [r2, #0]
 8002dc0:	6018      	str	r0, [r3, #0]
 8002dc2:	7912      	ldrb	r2, [r2, #4]
 8002dc4:	711a      	strb	r2, [r3, #4]
  strcat(heizung, "<p><b>Temperatura wody w zasobniku:    °C</b> </p></p>\r\n"); //°C
 8002dc6:	483e      	ldr	r0, [pc, #248]	; (8002ec0 <web_def+0x700>)
 8002dc8:	f7fd fa14 	bl	80001f4 <strlen>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <web_def+0x700>)
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <web_def+0x724>)
 8002dd6:	4614      	mov	r4, r2
 8002dd8:	469c      	mov	ip, r3
 8002dda:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002dde:	4665      	mov	r5, ip
 8002de0:	4626      	mov	r6, r4
 8002de2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002de4:	6028      	str	r0, [r5, #0]
 8002de6:	6069      	str	r1, [r5, #4]
 8002de8:	60aa      	str	r2, [r5, #8]
 8002dea:	60eb      	str	r3, [r5, #12]
 8002dec:	3410      	adds	r4, #16
 8002dee:	f10c 0c10 	add.w	ip, ip, #16
 8002df2:	4574      	cmp	r4, lr
 8002df4:	d1f3      	bne.n	8002dde <web_def+0x61e>
 8002df6:	4662      	mov	r2, ip
 8002df8:	4623      	mov	r3, r4
 8002dfa:	cb03      	ldmia	r3!, {r0, r1}
 8002dfc:	6010      	str	r0, [r2, #0]
 8002dfe:	6051      	str	r1, [r2, #4]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	8113      	strh	r3, [r2, #8]
  strcat(heizung, "<p><b>Zadana temperatura (10-33):</b><input type=\"text\"name=\"tm\" value=\"22\" /></p>\r\n");
 8002e04:	482e      	ldr	r0, [pc, #184]	; (8002ec0 <web_def+0x700>)
 8002e06:	f7fd f9f5 	bl	80001f4 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <web_def+0x700>)
 8002e10:	4413      	add	r3, r2
 8002e12:	4a35      	ldr	r2, [pc, #212]	; (8002ee8 <web_def+0x728>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	4611      	mov	r1, r2
 8002e18:	2355      	movs	r3, #85	; 0x55
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f004 fefc 	bl	8007c18 <memcpy>
  strcat(heizung, "<p><b>  <input type=\"range\" id=\"volume\" name=\"volume\"min=\"0\" max=\"9\"><label for=\"volume\">Volume</label>\r\n");
 8002e20:	4827      	ldr	r0, [pc, #156]	; (8002ec0 <web_def+0x700>)
 8002e22:	f7fd f9e7 	bl	80001f4 <strlen>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <web_def+0x700>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <web_def+0x72c>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	4611      	mov	r1, r2
 8002e34:	236a      	movs	r3, #106	; 0x6a
 8002e36:	461a      	mov	r2, r3
 8002e38:	f004 feee 	bl	8007c18 <memcpy>
  strcat(heizung, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8002e3c:	4820      	ldr	r0, [pc, #128]	; (8002ec0 <web_def+0x700>)
 8002e3e:	f7fd f9d9 	bl	80001f4 <strlen>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <web_def+0x700>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <web_def+0x6fc>)
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	469c      	mov	ip, r3
 8002e50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002e54:	4665      	mov	r5, ip
 8002e56:	4626      	mov	r6, r4
 8002e58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e5a:	6028      	str	r0, [r5, #0]
 8002e5c:	6069      	str	r1, [r5, #4]
 8002e5e:	60aa      	str	r2, [r5, #8]
 8002e60:	60eb      	str	r3, [r5, #12]
 8002e62:	3410      	adds	r4, #16
 8002e64:	f10c 0c10 	add.w	ip, ip, #16
 8002e68:	4574      	cmp	r4, lr
 8002e6a:	d1f3      	bne.n	8002e54 <web_def+0x694>
 8002e6c:	4662      	mov	r2, ip
 8002e6e:	4623      	mov	r3, r4
 8002e70:	cb03      	ldmia	r3!, {r0, r1}
 8002e72:	6010      	str	r0, [r2, #0]
 8002e74:	6051      	str	r1, [r2, #4]
 8002e76:	8819      	ldrh	r1, [r3, #0]
 8002e78:	789b      	ldrb	r3, [r3, #2]
 8002e7a:	8111      	strh	r1, [r2, #8]
 8002e7c:	7293      	strb	r3, [r2, #10]

/////////////////////// OSWIETLENIE//////////////////////////////////////

  strcpy(lights, "HTTP/1.1 200 OK\r\n");
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <web_def+0x730>)
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <web_def+0x704>)
 8002e82:	4615      	mov	r5, r2
 8002e84:	461c      	mov	r4, r3
 8002e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e88:	6028      	str	r0, [r5, #0]
 8002e8a:	6069      	str	r1, [r5, #4]
 8002e8c:	60aa      	str	r2, [r5, #8]
 8002e8e:	60eb      	str	r3, [r5, #12]
 8002e90:	8823      	ldrh	r3, [r4, #0]
 8002e92:	822b      	strh	r3, [r5, #16]
  strcat(lights, "Content-Type: text/html\r\n");
 8002e94:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <web_def+0x730>)
 8002e96:	f7fd f9ad 	bl	80001f4 <strlen>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <web_def+0x730>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <web_def+0x708>)
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eaa:	e023      	b.n	8002ef4 <web_def+0x734>
 8002eac:	20000d58 	.word	0x20000d58
 8002eb0:	0800ad54 	.word	0x0800ad54
 8002eb4:	0800ad7c 	.word	0x0800ad7c
 8002eb8:	0800ada4 	.word	0x0800ada4
 8002ebc:	0800ae1c 	.word	0x0800ae1c
 8002ec0:	20000a38 	.word	0x20000a38
 8002ec4:	0800ac04 	.word	0x0800ac04
 8002ec8:	0800ac18 	.word	0x0800ac18
 8002ecc:	0800ac34 	.word	0x0800ac34
 8002ed0:	0800ac4c 	.word	0x0800ac4c
 8002ed4:	0800ac64 	.word	0x0800ac64
 8002ed8:	0800ac98 	.word	0x0800ac98
 8002edc:	0800acbc 	.word	0x0800acbc
 8002ee0:	0800ae58 	.word	0x0800ae58
 8002ee4:	0800ae90 	.word	0x0800ae90
 8002ee8:	0800aecc 	.word	0x0800aecc
 8002eec:	0800af24 	.word	0x0800af24
 8002ef0:	20002ce8 	.word	0x20002ce8
 8002ef4:	6028      	str	r0, [r5, #0]
 8002ef6:	6069      	str	r1, [r5, #4]
 8002ef8:	60aa      	str	r2, [r5, #8]
 8002efa:	60eb      	str	r3, [r5, #12]
 8002efc:	cc03      	ldmia	r4!, {r0, r1}
 8002efe:	6128      	str	r0, [r5, #16]
 8002f00:	6169      	str	r1, [r5, #20]
 8002f02:	8823      	ldrh	r3, [r4, #0]
 8002f04:	832b      	strh	r3, [r5, #24]
  strcat(lights, "Content-Lenght: 398\r\n");
 8002f06:	48d1      	ldr	r0, [pc, #836]	; (800324c <web_def+0xa8c>)
 8002f08:	f7fd f974 	bl	80001f4 <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4bce      	ldr	r3, [pc, #824]	; (800324c <web_def+0xa8c>)
 8002f12:	4413      	add	r3, r2
 8002f14:	4ace      	ldr	r2, [pc, #824]	; (8003250 <web_def+0xa90>)
 8002f16:	461d      	mov	r5, r3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1c:	6028      	str	r0, [r5, #0]
 8002f1e:	6069      	str	r1, [r5, #4]
 8002f20:	60aa      	str	r2, [r5, #8]
 8002f22:	60eb      	str	r3, [r5, #12]
 8002f24:	6820      	ldr	r0, [r4, #0]
 8002f26:	6128      	str	r0, [r5, #16]
 8002f28:	88a3      	ldrh	r3, [r4, #4]
 8002f2a:	82ab      	strh	r3, [r5, #20]
  strcat(lights, "Connection: close\r\n\r\n");
 8002f2c:	48c7      	ldr	r0, [pc, #796]	; (800324c <web_def+0xa8c>)
 8002f2e:	f7fd f961 	bl	80001f4 <strlen>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	4bc5      	ldr	r3, [pc, #788]	; (800324c <web_def+0xa8c>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4ac6      	ldr	r2, [pc, #792]	; (8003254 <web_def+0xa94>)
 8002f3c:	461d      	mov	r5, r3
 8002f3e:	4614      	mov	r4, r2
 8002f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f42:	6028      	str	r0, [r5, #0]
 8002f44:	6069      	str	r1, [r5, #4]
 8002f46:	60aa      	str	r2, [r5, #8]
 8002f48:	60eb      	str	r3, [r5, #12]
 8002f4a:	6820      	ldr	r0, [r4, #0]
 8002f4c:	6128      	str	r0, [r5, #16]
 8002f4e:	88a3      	ldrh	r3, [r4, #4]
 8002f50:	82ab      	strh	r3, [r5, #20]
  strcat(lights, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 8002f52:	48be      	ldr	r0, [pc, #760]	; (800324c <web_def+0xa8c>)
 8002f54:	f7fd f94e 	bl	80001f4 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4bbb      	ldr	r3, [pc, #748]	; (800324c <web_def+0xa8c>)
 8002f5e:	4413      	add	r3, r2
 8002f60:	4abd      	ldr	r2, [pc, #756]	; (8003258 <web_def+0xa98>)
 8002f62:	4614      	mov	r4, r2
 8002f64:	469c      	mov	ip, r3
 8002f66:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002f6a:	4665      	mov	r5, ip
 8002f6c:	4626      	mov	r6, r4
 8002f6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f70:	6028      	str	r0, [r5, #0]
 8002f72:	6069      	str	r1, [r5, #4]
 8002f74:	60aa      	str	r2, [r5, #8]
 8002f76:	60eb      	str	r3, [r5, #12]
 8002f78:	3410      	adds	r4, #16
 8002f7a:	f10c 0c10 	add.w	ip, ip, #16
 8002f7e:	4574      	cmp	r4, lr
 8002f80:	d1f3      	bne.n	8002f6a <web_def+0x7aa>
 8002f82:	4662      	mov	r2, ip
 8002f84:	4623      	mov	r3, r4
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	8013      	strh	r3, [r2, #0]
  strcat(lights, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8002f8a:	48b0      	ldr	r0, [pc, #704]	; (800324c <web_def+0xa8c>)
 8002f8c:	f7fd f932 	bl	80001f4 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	4bad      	ldr	r3, [pc, #692]	; (800324c <web_def+0xa8c>)
 8002f96:	4413      	add	r3, r2
 8002f98:	4ab0      	ldr	r2, [pc, #704]	; (800325c <web_def+0xa9c>)
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	469c      	mov	ip, r3
 8002f9e:	f104 0e20 	add.w	lr, r4, #32
 8002fa2:	4665      	mov	r5, ip
 8002fa4:	4626      	mov	r6, r4
 8002fa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fa8:	6028      	str	r0, [r5, #0]
 8002faa:	6069      	str	r1, [r5, #4]
 8002fac:	60aa      	str	r2, [r5, #8]
 8002fae:	60eb      	str	r3, [r5, #12]
 8002fb0:	3410      	adds	r4, #16
 8002fb2:	f10c 0c10 	add.w	ip, ip, #16
 8002fb6:	4574      	cmp	r4, lr
 8002fb8:	d1f3      	bne.n	8002fa2 <web_def+0x7e2>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6810      	ldr	r0, [r2, #0]
 8002fc0:	6018      	str	r0, [r3, #0]
  strcat(lights, "<body>\r\n<form method=\"get\">\r\n");
 8002fc2:	48a2      	ldr	r0, [pc, #648]	; (800324c <web_def+0xa8c>)
 8002fc4:	f7fd f916 	bl	80001f4 <strlen>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b9f      	ldr	r3, [pc, #636]	; (800324c <web_def+0xa8c>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	4aa3      	ldr	r2, [pc, #652]	; (8003260 <web_def+0xaa0>)
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	4614      	mov	r4, r2
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	6028      	str	r0, [r5, #0]
 8002fda:	6069      	str	r1, [r5, #4]
 8002fdc:	60aa      	str	r2, [r5, #8]
 8002fde:	60eb      	str	r3, [r5, #12]
 8002fe0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002fe2:	6128      	str	r0, [r5, #16]
 8002fe4:	6169      	str	r1, [r5, #20]
 8002fe6:	61aa      	str	r2, [r5, #24]
 8002fe8:	8823      	ldrh	r3, [r4, #0]
 8002fea:	83ab      	strh	r3, [r5, #28]

  strcat(lights, "<p><b><select><option value=\"auto\">automatyczne</option><option value=\"man\">Reczne</option></select>\r\n");
 8002fec:	4897      	ldr	r0, [pc, #604]	; (800324c <web_def+0xa8c>)
 8002fee:	f7fd f901 	bl	80001f4 <strlen>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b95      	ldr	r3, [pc, #596]	; (800324c <web_def+0xa8c>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4a9a      	ldr	r2, [pc, #616]	; (8003264 <web_def+0xaa4>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	4611      	mov	r1, r2
 8003000:	2367      	movs	r3, #103	; 0x67
 8003002:	461a      	mov	r2, r3
 8003004:	f004 fe08 	bl	8007c18 <memcpy>
  strcat(lights, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8003008:	4890      	ldr	r0, [pc, #576]	; (800324c <web_def+0xa8c>)
 800300a:	f7fd f8f3 	bl	80001f4 <strlen>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	4b8e      	ldr	r3, [pc, #568]	; (800324c <web_def+0xa8c>)
 8003014:	4413      	add	r3, r2
 8003016:	4a94      	ldr	r2, [pc, #592]	; (8003268 <web_def+0xaa8>)
 8003018:	4614      	mov	r4, r2
 800301a:	469c      	mov	ip, r3
 800301c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003020:	4665      	mov	r5, ip
 8003022:	4626      	mov	r6, r4
 8003024:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003026:	6028      	str	r0, [r5, #0]
 8003028:	6069      	str	r1, [r5, #4]
 800302a:	60aa      	str	r2, [r5, #8]
 800302c:	60eb      	str	r3, [r5, #12]
 800302e:	3410      	adds	r4, #16
 8003030:	f10c 0c10 	add.w	ip, ip, #16
 8003034:	4574      	cmp	r4, lr
 8003036:	d1f3      	bne.n	8003020 <web_def+0x860>
 8003038:	4662      	mov	r2, ip
 800303a:	4623      	mov	r3, r4
 800303c:	cb03      	ldmia	r3!, {r0, r1}
 800303e:	6010      	str	r0, [r2, #0]
 8003040:	6051      	str	r1, [r2, #4]
 8003042:	8819      	ldrh	r1, [r3, #0]
 8003044:	789b      	ldrb	r3, [r3, #2]
 8003046:	8111      	strh	r1, [r2, #8]
 8003048:	7293      	strb	r3, [r2, #10]
  ////////////////////////////////////////////////////////////////////////////


////////////////////// STRONA GŁÓWNA ////////////////////////////////////

  strcpy(webpage, "HTTP/1.1 200 OK\r\n");
 800304a:	4a88      	ldr	r2, [pc, #544]	; (800326c <web_def+0xaac>)
 800304c:	4b88      	ldr	r3, [pc, #544]	; (8003270 <web_def+0xab0>)
 800304e:	4615      	mov	r5, r2
 8003050:	461c      	mov	r4, r3
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	6028      	str	r0, [r5, #0]
 8003056:	6069      	str	r1, [r5, #4]
 8003058:	60aa      	str	r2, [r5, #8]
 800305a:	60eb      	str	r3, [r5, #12]
 800305c:	8823      	ldrh	r3, [r4, #0]
 800305e:	822b      	strh	r3, [r5, #16]
  strcat(webpage, "Content-Type: text/html\r\n");
 8003060:	4882      	ldr	r0, [pc, #520]	; (800326c <web_def+0xaac>)
 8003062:	f7fd f8c7 	bl	80001f4 <strlen>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4b80      	ldr	r3, [pc, #512]	; (800326c <web_def+0xaac>)
 800306c:	4413      	add	r3, r2
 800306e:	4a81      	ldr	r2, [pc, #516]	; (8003274 <web_def+0xab4>)
 8003070:	461d      	mov	r5, r3
 8003072:	4614      	mov	r4, r2
 8003074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003076:	6028      	str	r0, [r5, #0]
 8003078:	6069      	str	r1, [r5, #4]
 800307a:	60aa      	str	r2, [r5, #8]
 800307c:	60eb      	str	r3, [r5, #12]
 800307e:	cc03      	ldmia	r4!, {r0, r1}
 8003080:	6128      	str	r0, [r5, #16]
 8003082:	6169      	str	r1, [r5, #20]
 8003084:	8823      	ldrh	r3, [r4, #0]
 8003086:	832b      	strh	r3, [r5, #24]
  strcat(webpage, "Content-Lenght: 398\r\n");
 8003088:	4878      	ldr	r0, [pc, #480]	; (800326c <web_def+0xaac>)
 800308a:	f7fd f8b3 	bl	80001f4 <strlen>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	4b76      	ldr	r3, [pc, #472]	; (800326c <web_def+0xaac>)
 8003094:	4413      	add	r3, r2
 8003096:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <web_def+0xa90>)
 8003098:	461d      	mov	r5, r3
 800309a:	4614      	mov	r4, r2
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	6028      	str	r0, [r5, #0]
 80030a0:	6069      	str	r1, [r5, #4]
 80030a2:	60aa      	str	r2, [r5, #8]
 80030a4:	60eb      	str	r3, [r5, #12]
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	6128      	str	r0, [r5, #16]
 80030aa:	88a3      	ldrh	r3, [r4, #4]
 80030ac:	82ab      	strh	r3, [r5, #20]
  strcat(webpage, "Connection: close\r\n\r\n");
 80030ae:	486f      	ldr	r0, [pc, #444]	; (800326c <web_def+0xaac>)
 80030b0:	f7fd f8a0 	bl	80001f4 <strlen>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b6c      	ldr	r3, [pc, #432]	; (800326c <web_def+0xaac>)
 80030ba:	4413      	add	r3, r2
 80030bc:	4a65      	ldr	r2, [pc, #404]	; (8003254 <web_def+0xa94>)
 80030be:	461d      	mov	r5, r3
 80030c0:	4614      	mov	r4, r2
 80030c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c4:	6028      	str	r0, [r5, #0]
 80030c6:	6069      	str	r1, [r5, #4]
 80030c8:	60aa      	str	r2, [r5, #8]
 80030ca:	60eb      	str	r3, [r5, #12]
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	6128      	str	r0, [r5, #16]
 80030d0:	88a3      	ldrh	r3, [r4, #4]
 80030d2:	82ab      	strh	r3, [r5, #20]
  strcat(webpage, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 80030d4:	4865      	ldr	r0, [pc, #404]	; (800326c <web_def+0xaac>)
 80030d6:	f7fd f88d 	bl	80001f4 <strlen>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <web_def+0xaac>)
 80030e0:	4413      	add	r3, r2
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <web_def+0xa98>)
 80030e4:	4614      	mov	r4, r2
 80030e6:	469c      	mov	ip, r3
 80030e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80030ec:	4665      	mov	r5, ip
 80030ee:	4626      	mov	r6, r4
 80030f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030f2:	6028      	str	r0, [r5, #0]
 80030f4:	6069      	str	r1, [r5, #4]
 80030f6:	60aa      	str	r2, [r5, #8]
 80030f8:	60eb      	str	r3, [r5, #12]
 80030fa:	3410      	adds	r4, #16
 80030fc:	f10c 0c10 	add.w	ip, ip, #16
 8003100:	4574      	cmp	r4, lr
 8003102:	d1f3      	bne.n	80030ec <web_def+0x92c>
 8003104:	4662      	mov	r2, ip
 8003106:	4623      	mov	r3, r4
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	8013      	strh	r3, [r2, #0]
  strcat(webpage, "<title>Dioda RGB</title>\r\n</head>\r\n");
 800310c:	4857      	ldr	r0, [pc, #348]	; (800326c <web_def+0xaac>)
 800310e:	f7fd f871 	bl	80001f4 <strlen>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <web_def+0xaac>)
 8003118:	4413      	add	r3, r2
 800311a:	4a50      	ldr	r2, [pc, #320]	; (800325c <web_def+0xa9c>)
 800311c:	4614      	mov	r4, r2
 800311e:	469c      	mov	ip, r3
 8003120:	f104 0e20 	add.w	lr, r4, #32
 8003124:	4665      	mov	r5, ip
 8003126:	4626      	mov	r6, r4
 8003128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800312a:	6028      	str	r0, [r5, #0]
 800312c:	6069      	str	r1, [r5, #4]
 800312e:	60aa      	str	r2, [r5, #8]
 8003130:	60eb      	str	r3, [r5, #12]
 8003132:	3410      	adds	r4, #16
 8003134:	f10c 0c10 	add.w	ip, ip, #16
 8003138:	4574      	cmp	r4, lr
 800313a:	d1f3      	bne.n	8003124 <web_def+0x964>
 800313c:	4663      	mov	r3, ip
 800313e:	4622      	mov	r2, r4
 8003140:	6810      	ldr	r0, [r2, #0]
 8003142:	6018      	str	r0, [r3, #0]
  strcat(webpage, "<body>\r\n<form method=\"get\">\r\n");
 8003144:	4849      	ldr	r0, [pc, #292]	; (800326c <web_def+0xaac>)
 8003146:	f7fd f855 	bl	80001f4 <strlen>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <web_def+0xaac>)
 8003150:	4413      	add	r3, r2
 8003152:	4a43      	ldr	r2, [pc, #268]	; (8003260 <web_def+0xaa0>)
 8003154:	461d      	mov	r5, r3
 8003156:	4614      	mov	r4, r2
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	6028      	str	r0, [r5, #0]
 800315c:	6069      	str	r1, [r5, #4]
 800315e:	60aa      	str	r2, [r5, #8]
 8003160:	60eb      	str	r3, [r5, #12]
 8003162:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003164:	6128      	str	r0, [r5, #16]
 8003166:	6169      	str	r1, [r5, #20]
 8003168:	61aa      	str	r2, [r5, #24]
 800316a:	8823      	ldrh	r3, [r4, #0]
 800316c:	83ab      	strh	r3, [r5, #28]
//  strcat(webpage, " name=\"green\" value=\"0\" /></p>\r\n");
//  strcat(webpage, "<p><b>Niebieski (0-255):</b> <input type=\"text\"");
//  strcat(webpage, " name=\"blue\" value=\"0\" /></p>\r\n");
//strcat(webpage, "<input type=\"submit\" value=\"Ustaw kolor\" />\r\n");
//strcat(webpage, "</form>\r\n</body>\r\n</html>");
  strcat(webpage, "<p><b><input type=\"submit\" name=\"os\" value=\"OSWIETLENIE\"/>\r\n");
 800316e:	483f      	ldr	r0, [pc, #252]	; (800326c <web_def+0xaac>)
 8003170:	f7fd f840 	bl	80001f4 <strlen>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b3c      	ldr	r3, [pc, #240]	; (800326c <web_def+0xaac>)
 800317a:	4413      	add	r3, r2
 800317c:	4a3e      	ldr	r2, [pc, #248]	; (8003278 <web_def+0xab8>)
 800317e:	4614      	mov	r4, r2
 8003180:	469c      	mov	ip, r3
 8003182:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003186:	4665      	mov	r5, ip
 8003188:	4626      	mov	r6, r4
 800318a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800318c:	6028      	str	r0, [r5, #0]
 800318e:	6069      	str	r1, [r5, #4]
 8003190:	60aa      	str	r2, [r5, #8]
 8003192:	60eb      	str	r3, [r5, #12]
 8003194:	3410      	adds	r4, #16
 8003196:	f10c 0c10 	add.w	ip, ip, #16
 800319a:	4574      	cmp	r4, lr
 800319c:	d1f3      	bne.n	8003186 <web_def+0x9c6>
 800319e:	4665      	mov	r5, ip
 80031a0:	4623      	mov	r3, r4
 80031a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031a4:	6028      	str	r0, [r5, #0]
 80031a6:	6069      	str	r1, [r5, #4]
 80031a8:	60aa      	str	r2, [r5, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	732b      	strb	r3, [r5, #12]
  strcat(webpage, "<p><b><input type=\"submit\" name=\"og\" value=\"OGRZEWANIE\"/>\r\n");
 80031ae:	482f      	ldr	r0, [pc, #188]	; (800326c <web_def+0xaac>)
 80031b0:	f7fd f820 	bl	80001f4 <strlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <web_def+0xaac>)
 80031ba:	4413      	add	r3, r2
 80031bc:	4a2f      	ldr	r2, [pc, #188]	; (800327c <web_def+0xabc>)
 80031be:	4614      	mov	r4, r2
 80031c0:	469c      	mov	ip, r3
 80031c2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80031c6:	4665      	mov	r5, ip
 80031c8:	4626      	mov	r6, r4
 80031ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031cc:	6028      	str	r0, [r5, #0]
 80031ce:	6069      	str	r1, [r5, #4]
 80031d0:	60aa      	str	r2, [r5, #8]
 80031d2:	60eb      	str	r3, [r5, #12]
 80031d4:	3410      	adds	r4, #16
 80031d6:	f10c 0c10 	add.w	ip, ip, #16
 80031da:	4574      	cmp	r4, lr
 80031dc:	d1f3      	bne.n	80031c6 <web_def+0xa06>
 80031de:	4665      	mov	r5, ip
 80031e0:	4623      	mov	r3, r4
 80031e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031e4:	6028      	str	r0, [r5, #0]
 80031e6:	6069      	str	r1, [r5, #4]
 80031e8:	60aa      	str	r2, [r5, #8]
  strcat(webpage, "<p><b><input type=\"submit\" name=\"ob\" value=\"KONTROLA OBECNOSCI\"/>\r\n");
 80031ea:	4820      	ldr	r0, [pc, #128]	; (800326c <web_def+0xaac>)
 80031ec:	f7fd f802 	bl	80001f4 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <web_def+0xaac>)
 80031f6:	4413      	add	r3, r2
 80031f8:	4a21      	ldr	r2, [pc, #132]	; (8003280 <web_def+0xac0>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	4611      	mov	r1, r2
 80031fe:	2344      	movs	r3, #68	; 0x44
 8003200:	461a      	mov	r2, r3
 8003202:	f004 fd09 	bl	8007c18 <memcpy>
  strcat(webpage, "<p><b><b><input type=\"submit\" name=\"wl\" value=\"WYLOGUJ\"/>\r\n");
 8003206:	4819      	ldr	r0, [pc, #100]	; (800326c <web_def+0xaac>)
 8003208:	f7fc fff4 	bl	80001f4 <strlen>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <web_def+0xaac>)
 8003212:	4413      	add	r3, r2
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <web_def+0xac4>)
 8003216:	4614      	mov	r4, r2
 8003218:	469c      	mov	ip, r3
 800321a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800321e:	4665      	mov	r5, ip
 8003220:	4626      	mov	r6, r4
 8003222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003224:	6028      	str	r0, [r5, #0]
 8003226:	6069      	str	r1, [r5, #4]
 8003228:	60aa      	str	r2, [r5, #8]
 800322a:	60eb      	str	r3, [r5, #12]
 800322c:	3410      	adds	r4, #16
 800322e:	f10c 0c10 	add.w	ip, ip, #16
 8003232:	4574      	cmp	r4, lr
 8003234:	d1f3      	bne.n	800321e <web_def+0xa5e>
 8003236:	4665      	mov	r5, ip
 8003238:	4623      	mov	r3, r4
 800323a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800323c:	6028      	str	r0, [r5, #0]
 800323e:	6069      	str	r1, [r5, #4]
 8003240:	60aa      	str	r2, [r5, #8]
 // strcat(webpage, "<p><b><select><option value=\"auto\">automatyczne</option><option value=\"man\">Reczne</option></select\>\r\n");

//strcat(webpage, "<button onclick=\"getElementById('demo').innerHTML = Date()\">What is the time?</button>");   //niby czas
// strcat(webpage, "<p><input type=\"radio\" value=\"temperatura\" />\r\n"); // kropki wyboru
  strcat(webpage, "</form>\r\n</body>\r\n</html>");
 8003242:	480a      	ldr	r0, [pc, #40]	; (800326c <web_def+0xaac>)
 8003244:	f7fc ffd6 	bl	80001f4 <strlen>
 8003248:	e01e      	b.n	8003288 <web_def+0xac8>
 800324a:	bf00      	nop
 800324c:	20002ce8 	.word	0x20002ce8
 8003250:	0800ac34 	.word	0x0800ac34
 8003254:	0800ac4c 	.word	0x0800ac4c
 8003258:	0800ac64 	.word	0x0800ac64
 800325c:	0800ac98 	.word	0x0800ac98
 8003260:	0800acbc 	.word	0x0800acbc
 8003264:	0800af90 	.word	0x0800af90
 8003268:	0800ae1c 	.word	0x0800ae1c
 800326c:	200036e8 	.word	0x200036e8
 8003270:	0800ac04 	.word	0x0800ac04
 8003274:	0800ac18 	.word	0x0800ac18
 8003278:	0800aff8 	.word	0x0800aff8
 800327c:	0800b038 	.word	0x0800b038
 8003280:	0800b074 	.word	0x0800b074
 8003284:	0800b0b8 	.word	0x0800b0b8
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	4bcc      	ldr	r3, [pc, #816]	; (80035c0 <web_def+0xe00>)
 800328e:	4413      	add	r3, r2
 8003290:	4acc      	ldr	r2, [pc, #816]	; (80035c4 <web_def+0xe04>)
 8003292:	461d      	mov	r5, r3
 8003294:	4614      	mov	r4, r2
 8003296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003298:	6028      	str	r0, [r5, #0]
 800329a:	6069      	str	r1, [r5, #4]
 800329c:	60aa      	str	r2, [r5, #8]
 800329e:	60eb      	str	r3, [r5, #12]
 80032a0:	cc03      	ldmia	r4!, {r0, r1}
 80032a2:	6128      	str	r0, [r5, #16]
 80032a4:	6169      	str	r1, [r5, #20]
 80032a6:	8823      	ldrh	r3, [r4, #0]
 80032a8:	832b      	strh	r3, [r5, #24]



 /////////////////////// //strona logowania

  strcpy(frontpage, "HTTP/1.2 200 OK\r\n");
 80032aa:	4ac7      	ldr	r2, [pc, #796]	; (80035c8 <web_def+0xe08>)
 80032ac:	4bc7      	ldr	r3, [pc, #796]	; (80035cc <web_def+0xe0c>)
 80032ae:	4615      	mov	r5, r2
 80032b0:	461c      	mov	r4, r3
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	6028      	str	r0, [r5, #0]
 80032b6:	6069      	str	r1, [r5, #4]
 80032b8:	60aa      	str	r2, [r5, #8]
 80032ba:	60eb      	str	r3, [r5, #12]
 80032bc:	8823      	ldrh	r3, [r4, #0]
 80032be:	822b      	strh	r3, [r5, #16]
  strcat(frontpage, "Content-Type: text/html\r\n");
 80032c0:	48c1      	ldr	r0, [pc, #772]	; (80035c8 <web_def+0xe08>)
 80032c2:	f7fc ff97 	bl	80001f4 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4bbf      	ldr	r3, [pc, #764]	; (80035c8 <web_def+0xe08>)
 80032cc:	4413      	add	r3, r2
 80032ce:	4ac0      	ldr	r2, [pc, #768]	; (80035d0 <web_def+0xe10>)
 80032d0:	461d      	mov	r5, r3
 80032d2:	4614      	mov	r4, r2
 80032d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d6:	6028      	str	r0, [r5, #0]
 80032d8:	6069      	str	r1, [r5, #4]
 80032da:	60aa      	str	r2, [r5, #8]
 80032dc:	60eb      	str	r3, [r5, #12]
 80032de:	cc03      	ldmia	r4!, {r0, r1}
 80032e0:	6128      	str	r0, [r5, #16]
 80032e2:	6169      	str	r1, [r5, #20]
 80032e4:	8823      	ldrh	r3, [r4, #0]
 80032e6:	832b      	strh	r3, [r5, #24]
  strcat(frontpage, "Content-Lenght: 398\r\n");
 80032e8:	48b7      	ldr	r0, [pc, #732]	; (80035c8 <web_def+0xe08>)
 80032ea:	f7fc ff83 	bl	80001f4 <strlen>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4bb5      	ldr	r3, [pc, #724]	; (80035c8 <web_def+0xe08>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4ab7      	ldr	r2, [pc, #732]	; (80035d4 <web_def+0xe14>)
 80032f8:	461d      	mov	r5, r3
 80032fa:	4614      	mov	r4, r2
 80032fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fe:	6028      	str	r0, [r5, #0]
 8003300:	6069      	str	r1, [r5, #4]
 8003302:	60aa      	str	r2, [r5, #8]
 8003304:	60eb      	str	r3, [r5, #12]
 8003306:	6820      	ldr	r0, [r4, #0]
 8003308:	6128      	str	r0, [r5, #16]
 800330a:	88a3      	ldrh	r3, [r4, #4]
 800330c:	82ab      	strh	r3, [r5, #20]
  strcat(frontpage, "Connection: close\r\n\r\n");
 800330e:	48ae      	ldr	r0, [pc, #696]	; (80035c8 <web_def+0xe08>)
 8003310:	f7fc ff70 	bl	80001f4 <strlen>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	4bab      	ldr	r3, [pc, #684]	; (80035c8 <web_def+0xe08>)
 800331a:	4413      	add	r3, r2
 800331c:	4aae      	ldr	r2, [pc, #696]	; (80035d8 <web_def+0xe18>)
 800331e:	461d      	mov	r5, r3
 8003320:	4614      	mov	r4, r2
 8003322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003324:	6028      	str	r0, [r5, #0]
 8003326:	6069      	str	r1, [r5, #4]
 8003328:	60aa      	str	r2, [r5, #8]
 800332a:	60eb      	str	r3, [r5, #12]
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	6128      	str	r0, [r5, #16]
 8003330:	88a3      	ldrh	r3, [r4, #4]
 8003332:	82ab      	strh	r3, [r5, #20]
  strcat(frontpage, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 8003334:	48a4      	ldr	r0, [pc, #656]	; (80035c8 <web_def+0xe08>)
 8003336:	f7fc ff5d 	bl	80001f4 <strlen>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	4ba2      	ldr	r3, [pc, #648]	; (80035c8 <web_def+0xe08>)
 8003340:	4413      	add	r3, r2
 8003342:	4aa6      	ldr	r2, [pc, #664]	; (80035dc <web_def+0xe1c>)
 8003344:	4614      	mov	r4, r2
 8003346:	469c      	mov	ip, r3
 8003348:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800334c:	4665      	mov	r5, ip
 800334e:	4626      	mov	r6, r4
 8003350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003352:	6028      	str	r0, [r5, #0]
 8003354:	6069      	str	r1, [r5, #4]
 8003356:	60aa      	str	r2, [r5, #8]
 8003358:	60eb      	str	r3, [r5, #12]
 800335a:	3410      	adds	r4, #16
 800335c:	f10c 0c10 	add.w	ip, ip, #16
 8003360:	4574      	cmp	r4, lr
 8003362:	d1f3      	bne.n	800334c <web_def+0xb8c>
 8003364:	4662      	mov	r2, ip
 8003366:	4623      	mov	r3, r4
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	8013      	strh	r3, [r2, #0]
  strcat(frontpage, "<title>Dioda RGB</title>\r\n</head>\r\n");
 800336c:	4896      	ldr	r0, [pc, #600]	; (80035c8 <web_def+0xe08>)
 800336e:	f7fc ff41 	bl	80001f4 <strlen>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	4b94      	ldr	r3, [pc, #592]	; (80035c8 <web_def+0xe08>)
 8003378:	4413      	add	r3, r2
 800337a:	4a99      	ldr	r2, [pc, #612]	; (80035e0 <web_def+0xe20>)
 800337c:	4614      	mov	r4, r2
 800337e:	469c      	mov	ip, r3
 8003380:	f104 0e20 	add.w	lr, r4, #32
 8003384:	4665      	mov	r5, ip
 8003386:	4626      	mov	r6, r4
 8003388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800338a:	6028      	str	r0, [r5, #0]
 800338c:	6069      	str	r1, [r5, #4]
 800338e:	60aa      	str	r2, [r5, #8]
 8003390:	60eb      	str	r3, [r5, #12]
 8003392:	3410      	adds	r4, #16
 8003394:	f10c 0c10 	add.w	ip, ip, #16
 8003398:	4574      	cmp	r4, lr
 800339a:	d1f3      	bne.n	8003384 <web_def+0xbc4>
 800339c:	4663      	mov	r3, ip
 800339e:	4622      	mov	r2, r4
 80033a0:	6810      	ldr	r0, [r2, #0]
 80033a2:	6018      	str	r0, [r3, #0]
  strcat(frontpage, "<body>\r\n<form method=\"get\">\r\n");
 80033a4:	4888      	ldr	r0, [pc, #544]	; (80035c8 <web_def+0xe08>)
 80033a6:	f7fc ff25 	bl	80001f4 <strlen>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <web_def+0xe08>)
 80033b0:	4413      	add	r3, r2
 80033b2:	4a8c      	ldr	r2, [pc, #560]	; (80035e4 <web_def+0xe24>)
 80033b4:	461d      	mov	r5, r3
 80033b6:	4614      	mov	r4, r2
 80033b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ba:	6028      	str	r0, [r5, #0]
 80033bc:	6069      	str	r1, [r5, #4]
 80033be:	60aa      	str	r2, [r5, #8]
 80033c0:	60eb      	str	r3, [r5, #12]
 80033c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80033c4:	6128      	str	r0, [r5, #16]
 80033c6:	6169      	str	r1, [r5, #20]
 80033c8:	61aa      	str	r2, [r5, #24]
 80033ca:	8823      	ldrh	r3, [r4, #0]
 80033cc:	83ab      	strh	r3, [r5, #28]
  //strcat(frontpage,"<form><label for=\"username\">Username:</label><br><input type=\"text\" id=\"username\" name=\"username\"><br><label for=\"pwd\">Password:</label><br><input type=\"password\" id=\"pwd\" name=\"pwd\"><br><br><input type=\"submit\" value=\"loguj\"> </form>");
  strcat(frontpage, "<p><b>Login: </b><input type=\"text\"");
 80033ce:	487e      	ldr	r0, [pc, #504]	; (80035c8 <web_def+0xe08>)
 80033d0:	f7fc ff10 	bl	80001f4 <strlen>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <web_def+0xe08>)
 80033da:	4413      	add	r3, r2
 80033dc:	4a82      	ldr	r2, [pc, #520]	; (80035e8 <web_def+0xe28>)
 80033de:	4614      	mov	r4, r2
 80033e0:	469c      	mov	ip, r3
 80033e2:	f104 0e20 	add.w	lr, r4, #32
 80033e6:	4665      	mov	r5, ip
 80033e8:	4626      	mov	r6, r4
 80033ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80033ec:	6028      	str	r0, [r5, #0]
 80033ee:	6069      	str	r1, [r5, #4]
 80033f0:	60aa      	str	r2, [r5, #8]
 80033f2:	60eb      	str	r3, [r5, #12]
 80033f4:	3410      	adds	r4, #16
 80033f6:	f10c 0c10 	add.w	ip, ip, #16
 80033fa:	4574      	cmp	r4, lr
 80033fc:	d1f3      	bne.n	80033e6 <web_def+0xc26>
 80033fe:	4663      	mov	r3, ip
 8003400:	4622      	mov	r2, r4
 8003402:	6810      	ldr	r0, [r2, #0]
 8003404:	6018      	str	r0, [r3, #0]
  strcat(frontpage, " name=\"login\" value=\"\" /></p>\r\n");
 8003406:	4870      	ldr	r0, [pc, #448]	; (80035c8 <web_def+0xe08>)
 8003408:	f7fc fef4 	bl	80001f4 <strlen>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <web_def+0xe08>)
 8003412:	4413      	add	r3, r2
 8003414:	4a75      	ldr	r2, [pc, #468]	; (80035ec <web_def+0xe2c>)
 8003416:	461c      	mov	r4, r3
 8003418:	4615      	mov	r5, r2
 800341a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800341c:	6020      	str	r0, [r4, #0]
 800341e:	6061      	str	r1, [r4, #4]
 8003420:	60a2      	str	r2, [r4, #8]
 8003422:	60e3      	str	r3, [r4, #12]
 8003424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003426:	6120      	str	r0, [r4, #16]
 8003428:	6161      	str	r1, [r4, #20]
 800342a:	61a2      	str	r2, [r4, #24]
 800342c:	61e3      	str	r3, [r4, #28]
  strcat(frontpage, "<p><b>Haslo:</b> <input type=\"password\"");
 800342e:	4866      	ldr	r0, [pc, #408]	; (80035c8 <web_def+0xe08>)
 8003430:	f7fc fee0 	bl	80001f4 <strlen>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <web_def+0xe08>)
 800343a:	4413      	add	r3, r2
 800343c:	4a6c      	ldr	r2, [pc, #432]	; (80035f0 <web_def+0xe30>)
 800343e:	4614      	mov	r4, r2
 8003440:	469c      	mov	ip, r3
 8003442:	f104 0e20 	add.w	lr, r4, #32
 8003446:	4665      	mov	r5, ip
 8003448:	4626      	mov	r6, r4
 800344a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800344c:	6028      	str	r0, [r5, #0]
 800344e:	6069      	str	r1, [r5, #4]
 8003450:	60aa      	str	r2, [r5, #8]
 8003452:	60eb      	str	r3, [r5, #12]
 8003454:	3410      	adds	r4, #16
 8003456:	f10c 0c10 	add.w	ip, ip, #16
 800345a:	4574      	cmp	r4, lr
 800345c:	d1f3      	bne.n	8003446 <web_def+0xc86>
 800345e:	4662      	mov	r2, ip
 8003460:	4623      	mov	r3, r4
 8003462:	cb03      	ldmia	r3!, {r0, r1}
 8003464:	6010      	str	r0, [r2, #0]
 8003466:	6051      	str	r1, [r2, #4]
  strcat(frontpage, " name=\"haslo\" value=\"\" /></p>\r\n");
 8003468:	4857      	ldr	r0, [pc, #348]	; (80035c8 <web_def+0xe08>)
 800346a:	f7fc fec3 	bl	80001f4 <strlen>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	4b55      	ldr	r3, [pc, #340]	; (80035c8 <web_def+0xe08>)
 8003474:	4413      	add	r3, r2
 8003476:	4a5f      	ldr	r2, [pc, #380]	; (80035f4 <web_def+0xe34>)
 8003478:	461c      	mov	r4, r3
 800347a:	4615      	mov	r5, r2
 800347c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347e:	6020      	str	r0, [r4, #0]
 8003480:	6061      	str	r1, [r4, #4]
 8003482:	60a2      	str	r2, [r4, #8]
 8003484:	60e3      	str	r3, [r4, #12]
 8003486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003488:	6120      	str	r0, [r4, #16]
 800348a:	6161      	str	r1, [r4, #20]
 800348c:	61a2      	str	r2, [r4, #24]
 800348e:	61e3      	str	r3, [r4, #28]
  strcat(frontpage, "<input type=\"submit\" value=\"LOGUJ\" />\r\n");
 8003490:	484d      	ldr	r0, [pc, #308]	; (80035c8 <web_def+0xe08>)
 8003492:	f7fc feaf 	bl	80001f4 <strlen>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <web_def+0xe08>)
 800349c:	4413      	add	r3, r2
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <web_def+0xe38>)
 80034a0:	4614      	mov	r4, r2
 80034a2:	469c      	mov	ip, r3
 80034a4:	f104 0e20 	add.w	lr, r4, #32
 80034a8:	4665      	mov	r5, ip
 80034aa:	4626      	mov	r6, r4
 80034ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034ae:	6028      	str	r0, [r5, #0]
 80034b0:	6069      	str	r1, [r5, #4]
 80034b2:	60aa      	str	r2, [r5, #8]
 80034b4:	60eb      	str	r3, [r5, #12]
 80034b6:	3410      	adds	r4, #16
 80034b8:	f10c 0c10 	add.w	ip, ip, #16
 80034bc:	4574      	cmp	r4, lr
 80034be:	d1f3      	bne.n	80034a8 <web_def+0xce8>
 80034c0:	4662      	mov	r2, ip
 80034c2:	4623      	mov	r3, r4
 80034c4:	cb03      	ldmia	r3!, {r0, r1}
 80034c6:	6010      	str	r0, [r2, #0]
 80034c8:	6051      	str	r1, [r2, #4]
  strcat(frontpage, "</form>\r\n</body>\r\n</html>");
 80034ca:	483f      	ldr	r0, [pc, #252]	; (80035c8 <web_def+0xe08>)
 80034cc:	f7fc fe92 	bl	80001f4 <strlen>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <web_def+0xe08>)
 80034d6:	4413      	add	r3, r2
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <web_def+0xe04>)
 80034da:	461d      	mov	r5, r3
 80034dc:	4614      	mov	r4, r2
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	6028      	str	r0, [r5, #0]
 80034e2:	6069      	str	r1, [r5, #4]
 80034e4:	60aa      	str	r2, [r5, #8]
 80034e6:	60eb      	str	r3, [r5, #12]
 80034e8:	cc03      	ldmia	r4!, {r0, r1}
 80034ea:	6128      	str	r0, [r5, #16]
 80034ec:	6169      	str	r1, [r5, #20]
 80034ee:	8823      	ldrh	r3, [r4, #0]
 80034f0:	832b      	strh	r3, [r5, #24]

////// error

  strcpy(error, "HTTP/1.1 404 Not Found\r\n");
 80034f2:	4a42      	ldr	r2, [pc, #264]	; (80035fc <web_def+0xe3c>)
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <web_def+0xe40>)
 80034f6:	4615      	mov	r5, r2
 80034f8:	461c      	mov	r4, r3
 80034fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fc:	6028      	str	r0, [r5, #0]
 80034fe:	6069      	str	r1, [r5, #4]
 8003500:	60aa      	str	r2, [r5, #8]
 8003502:	60eb      	str	r3, [r5, #12]
 8003504:	cc03      	ldmia	r4!, {r0, r1}
 8003506:	6128      	str	r0, [r5, #16]
 8003508:	6169      	str	r1, [r5, #20]
 800350a:	7823      	ldrb	r3, [r4, #0]
 800350c:	762b      	strb	r3, [r5, #24]
  strcat(error, "Content-Type: text/html\r\n");
 800350e:	483b      	ldr	r0, [pc, #236]	; (80035fc <web_def+0xe3c>)
 8003510:	f7fc fe70 	bl	80001f4 <strlen>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4b38      	ldr	r3, [pc, #224]	; (80035fc <web_def+0xe3c>)
 800351a:	4413      	add	r3, r2
 800351c:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <web_def+0xe10>)
 800351e:	461d      	mov	r5, r3
 8003520:	4614      	mov	r4, r2
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	6028      	str	r0, [r5, #0]
 8003526:	6069      	str	r1, [r5, #4]
 8003528:	60aa      	str	r2, [r5, #8]
 800352a:	60eb      	str	r3, [r5, #12]
 800352c:	cc03      	ldmia	r4!, {r0, r1}
 800352e:	6128      	str	r0, [r5, #16]
 8003530:	6169      	str	r1, [r5, #20]
 8003532:	8823      	ldrh	r3, [r4, #0]
 8003534:	832b      	strh	r3, [r5, #24]
  strcat(error, "Content-Lenght: 48\r\n");
 8003536:	4831      	ldr	r0, [pc, #196]	; (80035fc <web_def+0xe3c>)
 8003538:	f7fc fe5c 	bl	80001f4 <strlen>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <web_def+0xe3c>)
 8003542:	4413      	add	r3, r2
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <web_def+0xe44>)
 8003546:	461d      	mov	r5, r3
 8003548:	4614      	mov	r4, r2
 800354a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354c:	6028      	str	r0, [r5, #0]
 800354e:	6069      	str	r1, [r5, #4]
 8003550:	60aa      	str	r2, [r5, #8]
 8003552:	60eb      	str	r3, [r5, #12]
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	6128      	str	r0, [r5, #16]
 8003558:	7923      	ldrb	r3, [r4, #4]
 800355a:	752b      	strb	r3, [r5, #20]
  strcat(error, "Connection: close\r\n\r\n");
 800355c:	4827      	ldr	r0, [pc, #156]	; (80035fc <web_def+0xe3c>)
 800355e:	f7fc fe49 	bl	80001f4 <strlen>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <web_def+0xe3c>)
 8003568:	4413      	add	r3, r2
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <web_def+0xe18>)
 800356c:	461d      	mov	r5, r3
 800356e:	4614      	mov	r4, r2
 8003570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003572:	6028      	str	r0, [r5, #0]
 8003574:	6069      	str	r1, [r5, #4]
 8003576:	60aa      	str	r2, [r5, #8]
 8003578:	60eb      	str	r3, [r5, #12]
 800357a:	6820      	ldr	r0, [r4, #0]
 800357c:	6128      	str	r0, [r5, #16]
 800357e:	88a3      	ldrh	r3, [r4, #4]
 8003580:	82ab      	strh	r3, [r5, #20]
  strcat(error, "<html><body><h1>404 Not Foundxdd</h1></body></html>");
 8003582:	481e      	ldr	r0, [pc, #120]	; (80035fc <web_def+0xe3c>)
 8003584:	f7fc fe36 	bl	80001f4 <strlen>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <web_def+0xe3c>)
 800358e:	4413      	add	r3, r2
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <web_def+0xe48>)
 8003592:	4614      	mov	r4, r2
 8003594:	469c      	mov	ip, r3
 8003596:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800359a:	4665      	mov	r5, ip
 800359c:	4626      	mov	r6, r4
 800359e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035a0:	6028      	str	r0, [r5, #0]
 80035a2:	6069      	str	r1, [r5, #4]
 80035a4:	60aa      	str	r2, [r5, #8]
 80035a6:	60eb      	str	r3, [r5, #12]
 80035a8:	3410      	adds	r4, #16
 80035aa:	f10c 0c10 	add.w	ip, ip, #16
 80035ae:	4574      	cmp	r4, lr
 80035b0:	d1f3      	bne.n	800359a <web_def+0xdda>
 80035b2:	4663      	mov	r3, ip
 80035b4:	4622      	mov	r2, r4
 80035b6:	6810      	ldr	r0, [r2, #0]
 80035b8:	6018      	str	r0, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035be:	bf00      	nop
 80035c0:	200036e8 	.word	0x200036e8
 80035c4:	0800b0f4 	.word	0x0800b0f4
 80035c8:	200038e8 	.word	0x200038e8
 80035cc:	0800b110 	.word	0x0800b110
 80035d0:	0800ac18 	.word	0x0800ac18
 80035d4:	0800ac34 	.word	0x0800ac34
 80035d8:	0800ac4c 	.word	0x0800ac4c
 80035dc:	0800ac64 	.word	0x0800ac64
 80035e0:	0800ac98 	.word	0x0800ac98
 80035e4:	0800acbc 	.word	0x0800acbc
 80035e8:	0800b124 	.word	0x0800b124
 80035ec:	0800b148 	.word	0x0800b148
 80035f0:	0800b168 	.word	0x0800b168
 80035f4:	0800b190 	.word	0x0800b190
 80035f8:	0800b1b0 	.word	0x0800b1b0
 80035fc:	200034d4 	.word	0x200034d4
 8003600:	0800b1d8 	.word	0x0800b1d8
 8003604:	0800b1f4 	.word	0x0800b1f4
 8003608:	0800b20c 	.word	0x0800b20c

0800360c <wire_init>:
#include <ds18b20.h>



HAL_StatusTypeDef wire_init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(TIMER);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <wire_init+0x10>)
 8003612:	f001 fe53 	bl	80052bc <HAL_TIM_Base_Start>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20003b24 	.word	0x20003b24

08003620 <delay_us>:

static void delay_us(uint32_t us)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(TIMER, 0);
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <delay_us+0x2c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(TIMER) < us) {}
 8003630:	bf00      	nop
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <delay_us+0x2c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d8f9      	bhi.n	8003632 <delay_us+0x12>
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20003b24 	.word	0x20003b24

08003650 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8003656:	2200      	movs	r2, #0
 8003658:	2120      	movs	r1, #32
 800365a:	4811      	ldr	r0, [pc, #68]	; (80036a0 <wire_reset+0x50>)
 800365c:	f000 fcfe 	bl	800405c <HAL_GPIO_WritePin>
  delay_us(480);
 8003660:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003664:	f7ff ffdc 	bl	8003620 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8003668:	2201      	movs	r2, #1
 800366a:	2120      	movs	r1, #32
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <wire_reset+0x50>)
 800366e:	f000 fcf5 	bl	800405c <HAL_GPIO_WritePin>
  delay_us(70);
 8003672:	2046      	movs	r0, #70	; 0x46
 8003674:	f7ff ffd4 	bl	8003620 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8003678:	2120      	movs	r1, #32
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <wire_reset+0x50>)
 800367c:	f000 fcd6 	bl	800402c <HAL_GPIO_ReadPin>
 8003680:	4603      	mov	r3, r0
 8003682:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8003684:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003688:	f7ff ffca 	bl	8003620 <delay_us>

  if (rc == 0)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <wire_reset+0x46>
    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40020400 	.word	0x40020400

080036a4 <read_bit>:

static int read_bit(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2120      	movs	r1, #32
 80036ae:	480e      	ldr	r0, [pc, #56]	; (80036e8 <read_bit+0x44>)
 80036b0:	f000 fcd4 	bl	800405c <HAL_GPIO_WritePin>
  delay_us(6);
 80036b4:	2006      	movs	r0, #6
 80036b6:	f7ff ffb3 	bl	8003620 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80036ba:	2201      	movs	r2, #1
 80036bc:	2120      	movs	r1, #32
 80036be:	480a      	ldr	r0, [pc, #40]	; (80036e8 <read_bit+0x44>)
 80036c0:	f000 fccc 	bl	800405c <HAL_GPIO_WritePin>
  delay_us(9);
 80036c4:	2009      	movs	r0, #9
 80036c6:	f7ff ffab 	bl	8003620 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80036ca:	2120      	movs	r1, #32
 80036cc:	4806      	ldr	r0, [pc, #24]	; (80036e8 <read_bit+0x44>)
 80036ce:	f000 fcad 	bl	800402c <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	607b      	str	r3, [r7, #4]
  delay_us(55);
 80036d6:	2037      	movs	r0, #55	; 0x37
 80036d8:	f7ff ffa2 	bl	8003620 <delay_us>
  return rc;
 80036dc:	687b      	ldr	r3, [r7, #4]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40020400 	.word	0x40020400

080036ec <wire_read>:

uint8_t wire_read(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	e00e      	b.n	800371a <wire_read+0x2e>
    value >>= 1;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8003702:	f7ff ffcf 	bl	80036a4 <read_bit>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <wire_read+0x28>
      value |= 0x80;
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003712:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b07      	cmp	r3, #7
 800371e:	dded      	ble.n	80036fc <wire_read+0x10>
  }
  return value;
 8003720:	79fb      	ldrb	r3, [r7, #7]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <write_bit>:

static void write_bit(int value)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if (value) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800373a:	2200      	movs	r2, #0
 800373c:	2120      	movs	r1, #32
 800373e:	4811      	ldr	r0, [pc, #68]	; (8003784 <write_bit+0x58>)
 8003740:	f000 fc8c 	bl	800405c <HAL_GPIO_WritePin>
    delay_us(6);
 8003744:	2006      	movs	r0, #6
 8003746:	f7ff ff6b 	bl	8003620 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800374a:	2201      	movs	r2, #1
 800374c:	2120      	movs	r1, #32
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <write_bit+0x58>)
 8003750:	f000 fc84 	bl	800405c <HAL_GPIO_WritePin>
    delay_us(64);
 8003754:	2040      	movs	r0, #64	; 0x40
 8003756:	f7ff ff63 	bl	8003620 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 800375a:	e00f      	b.n	800377c <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800375c:	2200      	movs	r2, #0
 800375e:	2120      	movs	r1, #32
 8003760:	4808      	ldr	r0, [pc, #32]	; (8003784 <write_bit+0x58>)
 8003762:	f000 fc7b 	bl	800405c <HAL_GPIO_WritePin>
    delay_us(60);
 8003766:	203c      	movs	r0, #60	; 0x3c
 8003768:	f7ff ff5a 	bl	8003620 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800376c:	2201      	movs	r2, #1
 800376e:	2120      	movs	r1, #32
 8003770:	4804      	ldr	r0, [pc, #16]	; (8003784 <write_bit+0x58>)
 8003772:	f000 fc73 	bl	800405c <HAL_GPIO_WritePin>
    delay_us(10);
 8003776:	200a      	movs	r0, #10
 8003778:	f7ff ff52 	bl	8003620 <delay_us>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40020400 	.word	0x40020400

08003788 <wire_write>:

void wire_write(uint8_t byte)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e00b      	b.n	80037b0 <wire_write+0x28>
    write_bit(byte & 0x01);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ffc4 	bl	800372c <write_bit>
    byte >>= 1;
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3301      	adds	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	ddf0      	ble.n	8003798 <wire_write+0x10>
  }
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	460a      	mov	r2, r1
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e016      	b.n	8003804 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	4053      	eors	r3, r2
 80037dc:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <byte_crc+0x38>
      crc ^= 0x8c;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80037f4:	43db      	mvns	r3, r3
 80037f6:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 80037f8:	79bb      	ldrb	r3, [r7, #6]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3301      	adds	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b07      	cmp	r3, #7
 8003808:	dde5      	ble.n	80037d6 <byte_crc+0x16>
  }
  return crc;
 800380a:	79fb      	ldrb	r3, [r7, #7]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e00d      	b.n	8003848 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ffc1 	bl	80037c0 <byte_crc>
 800383e:	4603      	mov	r3, r0
 8003840:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbed      	blt.n	800382c <wire_crc+0x14>

    return crc;
 8003850:	7afb      	ldrb	r3, [r7, #11]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800385c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003862:	490e      	ldr	r1, [pc, #56]	; (800389c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003864:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003868:	e002      	b.n	8003870 <LoopCopyDataInit>

0800386a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800386c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800386e:	3304      	adds	r3, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003874:	d3f9      	bcc.n	800386a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003876:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003878:	4c0b      	ldr	r4, [pc, #44]	; (80038a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800387c:	e001      	b.n	8003882 <LoopFillZerobss>

0800387e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800387e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003880:	3204      	adds	r2, #4

08003882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003884:	d3fb      	bcc.n	800387e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003886:	f7fe fabf 	bl	8001e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800388a:	f004 f987 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388e:	f7fd feff 	bl	8001690 <main>
  bx  lr    
 8003892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800389c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80038a0:	0800b694 	.word	0x0800b694
  ldr r2, =_sbss
 80038a4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80038a8:	20003bc4 	.word	0x20003bc4

080038ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038ac:	e7fe      	b.n	80038ac <ADC_IRQHandler>
	...

080038b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_Init+0x40>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_Init+0x40>)
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x40>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f94f 	bl	8003b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	200f      	movs	r0, #15
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f7fe f95c 	bl	8001ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f967 	bl	8003be6 <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 f92f 	bl	8003b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000010 	.word	0x20000010
 800394c:	20000018 	.word	0x20000018
 8003950:	20000014 	.word	0x20000014

08003954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x20>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_IncTick+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_IncTick+0x24>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000018 	.word	0x20000018
 8003978:	20003bb0 	.word	0x20003bb0

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20003bb0 	.word	0x20003bb0

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d005      	beq.n	80039ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_Delay+0x44>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ba:	bf00      	nop
 80039bc:	f7ff ffde 	bl	800397c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f7      	bhi.n	80039bc <HAL_Delay+0x28>
  {
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000018 	.word	0x20000018

080039dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <__NVIC_SetPriorityGrouping+0x44>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f8:	4013      	ands	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0e:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <__NVIC_SetPriorityGrouping+0x44>)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	60d3      	str	r3, [r2, #12]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <__NVIC_GetPriorityGrouping+0x18>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	f003 0307 	and.w	r3, r3, #7
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	db0b      	blt.n	8003a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	4907      	ldr	r1, [pc, #28]	; (8003a78 <__NVIC_EnableIRQ+0x38>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2001      	movs	r0, #1
 8003a62:	fa00 f202 	lsl.w	r2, r0, r2
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	; (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf28      	it	cs
 8003aee:	2304      	movcs	r3, #4
 8003af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <NVIC_EncodePriority+0x30>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3b03      	subs	r3, #3
 8003afe:	e000      	b.n	8003b02 <NVIC_EncodePriority+0x32>
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	401a      	ands	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43d9      	mvns	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	4313      	orrs	r3, r2
         );
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b48:	d301      	bcc.n	8003b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00f      	b.n	8003b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <SysTick_Config+0x40>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b56:	210f      	movs	r1, #15
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f7ff ff8e 	bl	8003a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SysTick_Config+0x40>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <SysTick_Config+0x40>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff29 	bl	80039dc <__NVIC_SetPriorityGrouping>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	4603      	mov	r3, r0
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba4:	f7ff ff3e 	bl	8003a24 <__NVIC_GetPriorityGrouping>
 8003ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f7ff ff8e 	bl	8003ad0 <NVIC_EncodePriority>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff5d 	bl	8003a7c <__NVIC_SetPriority>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff31 	bl	8003a40 <__NVIC_EnableIRQ>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ffa2 	bl	8003b38 <SysTick_Config>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c0c:	f7ff feb6 	bl	800397c <HAL_GetTick>
 8003c10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d008      	beq.n	8003c30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e052      	b.n	8003cd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0216 	bic.w	r2, r2, #22
 8003c3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <HAL_DMA_Abort+0x62>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0208 	bic.w	r2, r2, #8
 8003c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c80:	e013      	b.n	8003caa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c82:	f7ff fe7b 	bl	800397c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d90c      	bls.n	8003caa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e015      	b.n	8003cd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e4      	bne.n	8003c82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	223f      	movs	r2, #63	; 0x3f
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e00c      	b.n	8003d16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e159      	b.n	8003ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8148 	bne.w	8003fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a2 	beq.w	8003fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a56      	ldr	r2, [pc, #344]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b54      	ldr	r3, [pc, #336]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_GPIO_Init+0x2f0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x202>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_GPIO_Init+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x1fe>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_GPIO_Init+0x2f8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x1fa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_GPIO_Init+0x2fc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x1f6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	; (8004024 <HAL_GPIO_Init+0x300>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x1f2>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f aea2 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e001      	b.n	800404e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800406c:	787b      	ldrb	r3, [r7, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004078:	e003      	b.n	8004082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	041a      	lsls	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040a6:	4a05      	ldr	r2, [pc, #20]	; (80040bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fa92 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40013c00 	.word	0x40013c00

080040c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e264      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d075      	beq.n	80041ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040de:	4ba3      	ldr	r3, [pc, #652]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d00c      	beq.n	8004104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ea:	4ba0      	ldr	r3, [pc, #640]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d112      	bne.n	800411c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f6:	4b9d      	ldr	r3, [pc, #628]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004102:	d10b      	bne.n	800411c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	4b99      	ldr	r3, [pc, #612]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05b      	beq.n	80041c8 <HAL_RCC_OscConfig+0x108>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d157      	bne.n	80041c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e23f      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x74>
 8004126:	4b91      	ldr	r3, [pc, #580]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a90      	ldr	r2, [pc, #576]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e01d      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x98>
 800413e:	4b8b      	ldr	r3, [pc, #556]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a8a      	ldr	r2, [pc, #552]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b88      	ldr	r3, [pc, #544]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a87      	ldr	r2, [pc, #540]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0xb0>
 8004158:	4b84      	ldr	r3, [pc, #528]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a83      	ldr	r2, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b81      	ldr	r3, [pc, #516]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a80      	ldr	r2, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800416a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7ff fc00 	bl	800397c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004180:	f7ff fbfc 	bl	800397c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e204      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0xc0>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7ff fbec 	bl	800397c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a8:	f7ff fbe8 	bl	800397c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1f0      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	4b6c      	ldr	r3, [pc, #432]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0xe8>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d063      	beq.n	800429e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d11c      	bne.n	8004228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b5f      	ldr	r3, [pc, #380]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x152>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1c4      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4952      	ldr	r1, [pc, #328]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e03a      	b.n	800429e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <HAL_RCC_OscConfig+0x2b0>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7ff fba1 	bl	800397c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423e:	f7ff fb9d 	bl	800397c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1a5      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	4b46      	ldr	r3, [pc, #280]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b43      	ldr	r3, [pc, #268]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4940      	ldr	r1, [pc, #256]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <HAL_RCC_OscConfig+0x2b0>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7ff fb80 	bl	800397c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004280:	f7ff fb7c 	bl	800397c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e184      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d030      	beq.n	800430c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_RCC_OscConfig+0x2b4>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7ff fb60 	bl	800397c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c0:	f7ff fb5c 	bl	800397c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e164      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x200>
 80042de:	e015      	b.n	800430c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <HAL_RCC_OscConfig+0x2b4>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7ff fb49 	bl	800397c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ee:	f7ff fb45 	bl	800397c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e14d      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a0 	beq.w	800445a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a0e      	ldr	r2, [pc, #56]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x2b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d121      	bne.n	800439a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_RCC_OscConfig+0x2b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a07      	ldr	r2, [pc, #28]	; (8004378 <HAL_RCC_OscConfig+0x2b8>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004362:	f7ff fb0b 	bl	800397c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	e011      	b.n	800438e <HAL_RCC_OscConfig+0x2ce>
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	42470000 	.word	0x42470000
 8004374:	42470e80 	.word	0x42470e80
 8004378:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437c:	f7ff fafe 	bl	800397c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e106      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438e:	4b85      	ldr	r3, [pc, #532]	; (80045a4 <HAL_RCC_OscConfig+0x4e4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2f0>
 80043a2:	4b81      	ldr	r3, [pc, #516]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a80      	ldr	r2, [pc, #512]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	e01c      	b.n	80043ea <HAL_RCC_OscConfig+0x32a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCC_OscConfig+0x312>
 80043b8:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	4b78      	ldr	r3, [pc, #480]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a77      	ldr	r2, [pc, #476]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	e00b      	b.n	80043ea <HAL_RCC_OscConfig+0x32a>
 80043d2:	4b75      	ldr	r3, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a74      	ldr	r2, [pc, #464]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
 80043de:	4b72      	ldr	r3, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a71      	ldr	r2, [pc, #452]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7ff fac3 	bl	800397c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7ff fabf 	bl	800397c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0c5      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ee      	beq.n	80043fa <HAL_RCC_OscConfig+0x33a>
 800441c:	e014      	b.n	8004448 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441e:	f7ff faad 	bl	800397c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7ff faa9 	bl	800397c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0af      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	4b5a      	ldr	r3, [pc, #360]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ee      	bne.n	8004426 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d105      	bne.n	800445a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444e:	4b56      	ldr	r3, [pc, #344]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a55      	ldr	r2, [pc, #340]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 8004454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 809b 	beq.w	800459a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004464:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d05c      	beq.n	800452a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d141      	bne.n	80044fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_RCC_OscConfig+0x4ec>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7ff fa7d 	bl	800397c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7ff fa79 	bl	800397c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e081      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	019b      	lsls	r3, r3, #6
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	4937      	ldr	r1, [pc, #220]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ce:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_RCC_OscConfig+0x4ec>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7ff fa52 	bl	800397c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7ff fa4e 	bl	800397c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e056      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x41c>
 80044fa:	e04e      	b.n	800459a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7ff fa3b 	bl	800397c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7ff fa37 	bl	800397c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e03f      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x44a>
 8004528:	e037      	b.n	800459a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e032      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_RCC_OscConfig+0x4e8>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d028      	beq.n	8004596 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d121      	bne.n	8004596 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d11a      	bne.n	8004596 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004566:	4013      	ands	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800456c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456e:	4293      	cmp	r3, r2
 8004570:	d111      	bne.n	8004596 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d107      	bne.n	8004596 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40007000 	.word	0x40007000
 80045a8:	40023800 	.word	0x40023800
 80045ac:	42470060 	.word	0x42470060

080045b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0cc      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b68      	ldr	r3, [pc, #416]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90c      	bls.n	80045ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b65      	ldr	r3, [pc, #404]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0b8      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	494d      	ldr	r1, [pc, #308]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d044      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d119      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e07f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d003      	beq.n	800466e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e067      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4934      	ldr	r1, [pc, #208]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7ff f96c 	bl	800397c <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7ff f968 	bl	800397c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04f      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d20c      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e032      	b.n	800475e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004736:	f000 f821 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490a      	ldr	r1, [pc, #40]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff f8cc 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023c00 	.word	0x40023c00
 800476c:	40023800 	.word	0x40023800
 8004770:	0800b240 	.word	0x0800b240
 8004774:	20000010 	.word	0x20000010
 8004778:	20000014 	.word	0x20000014

0800477c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	2300      	movs	r3, #0
 800478e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004794:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d00d      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x40>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	f200 80bd 	bhi.w	8004920 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x34>
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ae:	e0b7      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b61      	ldr	r3, [pc, #388]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047b2:	60bb      	str	r3, [r7, #8]
       break;
 80047b4:	e0b7      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047b6:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047b8:	60bb      	str	r3, [r7, #8]
      break;
 80047ba:	e0b4      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047bc:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047c6:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04d      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d2:	4b58      	ldr	r3, [pc, #352]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	ea02 0800 	and.w	r8, r2, r0
 80047ea:	ea03 0901 	and.w	r9, r3, r1
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	014b      	lsls	r3, r1, #5
 80047fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004800:	0142      	lsls	r2, r0, #5
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	ebb0 0008 	subs.w	r0, r0, r8
 800480a:	eb61 0109 	sbc.w	r1, r1, r9
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	018b      	lsls	r3, r1, #6
 8004818:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800481c:	0182      	lsls	r2, r0, #6
 800481e:	1a12      	subs	r2, r2, r0
 8004820:	eb63 0301 	sbc.w	r3, r3, r1
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	00d9      	lsls	r1, r3, #3
 800482e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004832:	00d0      	lsls	r0, r2, #3
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	eb12 0208 	adds.w	r2, r2, r8
 800483c:	eb43 0309 	adc.w	r3, r3, r9
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	0259      	lsls	r1, r3, #9
 800484a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800484e:	0250      	lsls	r0, r2, #9
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	461a      	mov	r2, r3
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	f7fc fa0a 	bl	8000c78 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4613      	mov	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e04a      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	461a      	mov	r2, r3
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	ea02 0400 	and.w	r4, r2, r0
 8004886:	ea03 0501 	and.w	r5, r3, r1
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	014b      	lsls	r3, r1, #5
 8004898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800489c:	0142      	lsls	r2, r0, #5
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	1b00      	subs	r0, r0, r4
 80048a4:	eb61 0105 	sbc.w	r1, r1, r5
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	018b      	lsls	r3, r1, #6
 80048b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048b6:	0182      	lsls	r2, r0, #6
 80048b8:	1a12      	subs	r2, r2, r0
 80048ba:	eb63 0301 	sbc.w	r3, r3, r1
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	00d9      	lsls	r1, r3, #3
 80048c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048cc:	00d0      	lsls	r0, r2, #3
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	1912      	adds	r2, r2, r4
 80048d4:	eb45 0303 	adc.w	r3, r5, r3
 80048d8:	f04f 0000 	mov.w	r0, #0
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	0299      	lsls	r1, r3, #10
 80048e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048e6:	0290      	lsls	r0, r2, #10
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	f7fc f9be 	bl	8000c78 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4613      	mov	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	3301      	adds	r3, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	60bb      	str	r3, [r7, #8]
      break;
 800491e:	e002      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004922:	60bb      	str	r3, [r7, #8]
      break;
 8004924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004926:	68bb      	ldr	r3, [r7, #8]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400
 800493c:	007a1200 	.word	0x007a1200

08004940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_GetHCLKFreq+0x14>)
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000010 	.word	0x20000010

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800495c:	f7ff fff0 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK1Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	0800b250 	.word	0x0800b250

08004980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004984:	f7ff ffdc 	bl	8004940 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0b5b      	lsrs	r3, r3, #13
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	0800b250 	.word	0x0800b250

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d038      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049d0:	4b68      	ldr	r3, [pc, #416]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d6:	f7fe ffd1 	bl	800397c <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049de:	f7fe ffcd 	bl	800397c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0bd      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f0:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	495a      	ldr	r1, [pc, #360]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a16:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1c:	f7fe ffae 	bl	800397c <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a24:	f7fe ffaa 	bl	800397c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e09a      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a36:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8083 	beq.w	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	4b48      	ldr	r3, [pc, #288]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	4a47      	ldr	r2, [pc, #284]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a6c:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a42      	ldr	r2, [pc, #264]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fe ff80 	bl	800397c <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fe ff7c 	bl	800397c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e06c      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a92:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02f      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d028      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004abc:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004acc:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d114      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe ff4a 	bl	800397c <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fe ff46 	bl	800397c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e034      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	4911      	ldr	r1, [pc, #68]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
 8004b36:	e005      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b42:	6093      	str	r3, [r2, #8]
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	4909      	ldr	r1, [pc, #36]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7d1a      	ldrb	r2, [r3, #20]
 8004b66:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004b68:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	42470068 	.word	0x42470068
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470e40 	.word	0x42470e40
 8004b84:	424711e0 	.word	0x424711e0

08004b88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e083      	b.n	8004ca2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7f5b      	ldrb	r3, [r3, #29]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc ffcc 	bl	8001b48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	22ca      	movs	r2, #202	; 0xca
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2253      	movs	r2, #83	; 0x53
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 faa8 	bl	800511c <RTC_EnterInitMode>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e05e      	b.n	8004ca2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68d2      	ldr	r2, [r2, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6919      	ldr	r1, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	041a      	lsls	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa3a 	bl	80050cc <HAL_RTC_WaitForSynchro>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	22ff      	movs	r2, #255	; 0xff
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2204      	movs	r2, #4
 8004c6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e018      	b.n	8004ca2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	22ff      	movs	r2, #255	; 0xff
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004caa:	b590      	push	{r4, r7, lr}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	7f1b      	ldrb	r3, [r3, #28]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RTC_SetTime+0x1c>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0aa      	b.n	8004e1c <HAL_RTC_SetTime+0x172>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d126      	bne.n	8004d26 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fa3f 	bl	8005174 <RTC_ByteToBcd2>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fa38 	bl	8005174 <RTC_ByteToBcd2>
 8004d04:	4603      	mov	r3, r0
 8004d06:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d08:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	789b      	ldrb	r3, [r3, #2]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa30 	bl	8005174 <RTC_ByteToBcd2>
 8004d14:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d16:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	78db      	ldrb	r3, [r3, #3]
 8004d1e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e018      	b.n	8004d58 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d46:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d4c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	78db      	ldrb	r3, [r3, #3]
 8004d52:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	22ca      	movs	r2, #202	; 0xca
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2253      	movs	r2, #83	; 0x53
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f9d7 	bl	800511c <RTC_EnterInitMode>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	22ff      	movs	r2, #255	; 0xff
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e047      	b.n	8004e1c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d9a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004daa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d111      	bne.n	8004e06 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f972 	bl	80050cc <HAL_RTC_WaitForSynchro>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	22ff      	movs	r2, #255	; 0xff
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00a      	b.n	8004e1c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	22ff      	movs	r2, #255	; 0xff
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}

08004e24 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11a      	bne.n	8004ed6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f983 	bl	80051b0 <RTC_Bcd2ToByte>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f97a 	bl	80051b0 <RTC_Bcd2ToByte>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	789b      	ldrb	r3, [r3, #2]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f971 	bl	80051b0 <RTC_Bcd2ToByte>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	7f1b      	ldrb	r3, [r3, #28]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_RTC_SetDate+0x1c>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e094      	b.n	8005026 <HAL_RTC_SetDate+0x146>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10e      	bne.n	8004f2c <HAL_RTC_SetDate+0x4c>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	f023 0310 	bic.w	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	330a      	adds	r3, #10
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11c      	bne.n	8004f6c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	78db      	ldrb	r3, [r3, #3]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f91c 	bl	8005174 <RTC_ByteToBcd2>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f915 	bl	8005174 <RTC_ByteToBcd2>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f4e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	789b      	ldrb	r3, [r3, #2]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f90d 	bl	8005174 <RTC_ByteToBcd2>
 8004f5a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f5c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e00e      	b.n	8004f8a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f78:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f7e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	22ca      	movs	r2, #202	; 0xca
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2253      	movs	r2, #83	; 0x53
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f8be 	bl	800511c <RTC_EnterInitMode>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	22ff      	movs	r2, #255	; 0xff
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e033      	b.n	8005026 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fcc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fdc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d111      	bne.n	8005010 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f86d 	bl	80050cc <HAL_RTC_WaitForSynchro>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2204      	movs	r2, #4
 8005004:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e00a      	b.n	8005026 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	22ff      	movs	r2, #255	; 0xff
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005024:	2300      	movs	r3, #0
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}

0800502e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b086      	sub	sp, #24
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005048:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800504c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	0b5b      	lsrs	r3, r3, #13
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11a      	bne.n	80050c2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	78db      	ldrb	r3, [r3, #3]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f88d 	bl	80051b0 <RTC_Bcd2ToByte>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f884 	bl	80051b0 <RTC_Bcd2ToByte>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f87b 	bl	80051b0 <RTC_Bcd2ToByte>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fe fc48 	bl	800397c <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80050ee:	e009      	b.n	8005104 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050f0:	f7fe fc44 	bl	800397c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d901      	bls.n	8005104 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e007      	b.n	8005114 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ee      	beq.n	80050f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d119      	bne.n	800516a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005140:	f7fe fc1c 	bl	800397c <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005146:	e009      	b.n	800515c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005148:	f7fe fc18 	bl	800397c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005156:	d901      	bls.n	800515c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e007      	b.n	800516c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ee      	beq.n	8005148 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005182:	e005      	b.n	8005190 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	3b0a      	subs	r3, #10
 800518e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b09      	cmp	r3, #9
 8005194:	d8f6      	bhi.n	8005184 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	b2da      	uxtb	r2, r3
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b2db      	uxtb	r3, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4413      	add	r3, r2
 80051de:	b2db      	uxtb	r3, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3350      	adds	r3, #80	; 0x50
 8005200:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fefc 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 fb9c 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e03c      	b.n	800534e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_TIM_Base_Start+0xa0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d018      	beq.n	8005318 <HAL_TIM_Base_Start+0x5c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d013      	beq.n	8005318 <HAL_TIM_Base_Start+0x5c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_TIM_Base_Start+0xa4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00e      	beq.n	8005318 <HAL_TIM_Base_Start+0x5c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a19      	ldr	r2, [pc, #100]	; (8005364 <HAL_TIM_Base_Start+0xa8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d009      	beq.n	8005318 <HAL_TIM_Base_Start+0x5c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a17      	ldr	r2, [pc, #92]	; (8005368 <HAL_TIM_Base_Start+0xac>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <HAL_TIM_Base_Start+0x5c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a16      	ldr	r2, [pc, #88]	; (800536c <HAL_TIM_Base_Start+0xb0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d111      	bne.n	800533c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b06      	cmp	r3, #6
 8005328:	d010      	beq.n	800534c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	e007      	b.n	800534c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40014000 	.word	0x40014000

08005370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e041      	b.n	8005406 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fe30 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 faf2 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d122      	bne.n	800546a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d11b      	bne.n	800546a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f06f 0202 	mvn.w	r2, #2
 800543a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fa82 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 8005456:	e005      	b.n	8005464 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa74 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa85 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b04      	cmp	r3, #4
 8005476:	d122      	bne.n	80054be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b04      	cmp	r3, #4
 8005484:	d11b      	bne.n	80054be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0204 	mvn.w	r2, #4
 800548e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa58 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 80054aa:	e005      	b.n	80054b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa4a 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa5b 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d122      	bne.n	8005512 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0208 	mvn.w	r2, #8
 80054e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2204      	movs	r2, #4
 80054e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa2e 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa20 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa31 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b10      	cmp	r3, #16
 800551e:	d122      	bne.n	8005566 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b10      	cmp	r3, #16
 800552c:	d11b      	bne.n	8005566 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0210 	mvn.w	r2, #16
 8005536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2208      	movs	r2, #8
 800553c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa04 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 8005552:	e005      	b.n	8005560 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f9f6 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa07 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10e      	bne.n	8005592 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d107      	bne.n	8005592 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0201 	mvn.w	r2, #1
 800558a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f9d0 	bl	8005932 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	d10e      	bne.n	80055be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d107      	bne.n	80055be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fe09 	bl	80061d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d10e      	bne.n	80055ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9cc 	bl	8005982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d10e      	bne.n	8005616 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b20      	cmp	r3, #32
 8005604:	d107      	bne.n	8005616 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0220 	mvn.w	r2, #32
 800560e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fdd3 	bl	80061bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e0ae      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	f200 809f 	bhi.w	800578c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005689 	.word	0x08005689
 8005658:	0800578d 	.word	0x0800578d
 800565c:	0800578d 	.word	0x0800578d
 8005660:	0800578d 	.word	0x0800578d
 8005664:	080056c9 	.word	0x080056c9
 8005668:	0800578d 	.word	0x0800578d
 800566c:	0800578d 	.word	0x0800578d
 8005670:	0800578d 	.word	0x0800578d
 8005674:	0800570b 	.word	0x0800570b
 8005678:	0800578d 	.word	0x0800578d
 800567c:	0800578d 	.word	0x0800578d
 8005680:	0800578d 	.word	0x0800578d
 8005684:	0800574b 	.word	0x0800574b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa02 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]
      break;
 80056c6:	e064      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa48 	bl	8005b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	619a      	str	r2, [r3, #24]
      break;
 8005708:	e043      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa93 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0208 	orr.w	r2, r2, #8
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0204 	bic.w	r2, r2, #4
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
      break;
 8005748:	e023      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fadd 	bl	8005d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	61da      	str	r2, [r3, #28]
      break;
 800578a:	e002      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x1c>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0b4      	b.n	800592a <HAL_TIM_ConfigClockSource+0x186>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f8:	d03e      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0xd4>
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	f200 8087 	bhi.w	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	f000 8086 	beq.w	8005916 <HAL_TIM_ConfigClockSource+0x172>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d87f      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b70      	cmp	r3, #112	; 0x70
 8005812:	d01a      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xa6>
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d87b      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b60      	cmp	r3, #96	; 0x60
 800581a:	d050      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x11a>
 800581c:	2b60      	cmp	r3, #96	; 0x60
 800581e:	d877      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b50      	cmp	r3, #80	; 0x50
 8005822:	d03c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xfa>
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d873      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d058      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x13a>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d86f      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d064      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d86b      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d060      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d867      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05c      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d05a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	e062      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f000 fb23 	bl	8005ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800586c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	609a      	str	r2, [r3, #8]
      break;
 8005876:	e04f      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f000 fb0c 	bl	8005ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589a:	609a      	str	r2, [r3, #8]
      break;
 800589c:	e03c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fa80 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2150      	movs	r1, #80	; 0x50
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fad9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058bc:	e02c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fa9f 	bl	8005e0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2160      	movs	r1, #96	; 0x60
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fac9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058dc:	e01c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fa60 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fab9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058fc:	e00c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fab0 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 800590e:	e003      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e000      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00b      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a31      	ldr	r2, [pc, #196]	; (8005a80 <TIM_Base_SetConfig+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a30      	ldr	r2, [pc, #192]	; (8005a84 <TIM_Base_SetConfig+0xec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <TIM_Base_SetConfig+0xf0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d108      	bne.n	80059e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d017      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <TIM_Base_SetConfig+0xe8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <TIM_Base_SetConfig+0xec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <TIM_Base_SetConfig+0xf0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <TIM_Base_SetConfig+0xf4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <TIM_Base_SetConfig+0xf8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <TIM_Base_SetConfig+0xfc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d111      	bne.n	8005b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40010000 	.word	0x40010000

08005b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0210 	bic.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <TIM_OC2_SetConfig+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <TIM_OC2_SetConfig+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <TIM_OC3_SetConfig+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <TIM_OC3_SetConfig+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d113      	bne.n	8005ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000

08005d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <TIM_OC4_SetConfig+0x9c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000

08005db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 030a 	bic.w	r3, r3, #10
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0210 	bic.w	r2, r3, #16
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f043 0307 	orr.w	r3, r3, #7
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	609a      	str	r2, [r3, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	609a      	str	r2, [r3, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <HAL_TIMEx_PWMN_Start+0x24>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	e022      	b.n	8005f4e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d109      	bne.n	8005f22 <HAL_TIMEx_PWMN_Start+0x3e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	bf14      	ite	ne
 8005f1a:	2301      	movne	r3, #1
 8005f1c:	2300      	moveq	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	e015      	b.n	8005f4e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d109      	bne.n	8005f3c <HAL_TIMEx_PWMN_Start+0x58>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e008      	b.n	8005f4e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e063      	b.n	800601e <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_TIMEx_PWMN_Start+0x82>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f64:	e013      	b.n	8005f8e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIMEx_PWMN_Start+0x92>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f74:	e00b      	b.n	8005f8e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIMEx_PWMN_Start+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f84:	e003      	b.n	8005f8e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2204      	movs	r2, #4
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f924 	bl	80061e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_TIMEx_PWMN_Start+0x144>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x104>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d013      	beq.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x104>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a19      	ldr	r2, [pc, #100]	; (800602c <HAL_TIMEx_PWMN_Start+0x148>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x104>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a18      	ldr	r2, [pc, #96]	; (8006030 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x104>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <HAL_TIMEx_PWMN_Start+0x150>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x104>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <HAL_TIMEx_PWMN_Start+0x154>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d111      	bne.n	800600c <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d010      	beq.n	800601c <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	e007      	b.n	800601c <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40014000 	.word	0x40014000

0800603c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e050      	b.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d013      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a13      	ldr	r2, [pc, #76]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d10c      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40014000 	.word	0x40014000

08006118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006130:	2302      	movs	r3, #2
 8006132:	e03d      	b.n	80061b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	2204      	movs	r2, #4
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1a      	ldr	r2, [r3, #32]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	43db      	mvns	r3, r3
 8006206:	401a      	ands	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f003 031f 	and.w	r3, r3, #31
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	fa01 f303 	lsl.w	r3, r1, r3
 800621c:	431a      	orrs	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e03f      	b.n	80062c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fb ff7d 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2224      	movs	r2, #36	; 0x24
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006270:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fe7c 	bl	8006f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006286:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006296:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d17c      	bne.n	80063e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_UART_Transmit+0x2c>
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e075      	b.n	80063e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UART_Transmit+0x3e>
 8006302:	2302      	movs	r3, #2
 8006304:	e06e      	b.n	80063e4 <HAL_UART_Transmit+0x11c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2221      	movs	r2, #33	; 0x21
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800631c:	f7fd fb2e 	bl	800397c <HAL_GetTick>
 8006320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d108      	bne.n	800634a <HAL_UART_Transmit+0x82>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	e003      	b.n	8006352 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800635a:	e02a      	b.n	80063b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fbc0 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e036      	b.n	80063e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800638a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	3302      	adds	r3, #2
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e007      	b.n	80063a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3301      	adds	r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1cf      	bne.n	800635c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fb90 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e006      	b.n	80063e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	f040 808c 	bne.w	8006526 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_UART_Receive+0x2e>
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e084      	b.n	8006528 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_UART_Receive+0x40>
 8006428:	2302      	movs	r3, #2
 800642a:	e07d      	b.n	8006528 <HAL_UART_Receive+0x13c>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2222      	movs	r2, #34	; 0x22
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006448:	f7fd fa98 	bl	800397c <HAL_GetTick>
 800644c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	88fa      	ldrh	r2, [r7, #6]
 8006458:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d108      	bne.n	8006476 <HAL_UART_Receive+0x8a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e003      	b.n	800647e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006486:	e043      	b.n	8006510 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2200      	movs	r2, #0
 8006490:	2120      	movs	r1, #32
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fb2a 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e042      	b.n	8006528 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3302      	adds	r3, #2
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e01f      	b.n	8006502 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d007      	beq.n	80064dc <HAL_UART_Receive+0xf0>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_UART_Receive+0xfe>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e008      	b.n	80064fc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1b6      	bne.n	8006488 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e000      	b.n	8006528 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b20      	cmp	r3, #32
 8006548:	d11d      	bne.n	8006586 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_UART_Receive_IT+0x26>
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e016      	b.n	8006588 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_UART_Receive_IT+0x38>
 8006564:	2302      	movs	r3, #2
 8006566:	e00f      	b.n	8006588 <HAL_UART_Receive_IT+0x58>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	461a      	mov	r2, r3
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fb23 	bl	8006bc8 <UART_Start_Receive_IT>
 8006582:	4603      	mov	r3, r0
 8006584:	e000      	b.n	8006588 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b0ba      	sub	sp, #232	; 0xe8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10f      	bne.n	80065f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <HAL_UART_IRQHandler+0x66>
 80065e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fc03 	bl	8006dfa <UART_Receive_IT>
      return;
 80065f4:	e256      	b.n	8006aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80de 	beq.w	80067bc <HAL_UART_IRQHandler+0x22c>
 8006600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80d1 	beq.w	80067bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_UART_IRQHandler+0xae>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_UART_IRQHandler+0xd2>
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f043 0202 	orr.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <HAL_UART_IRQHandler+0xf6>
 800666e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f043 0204 	orr.w	r2, r3, #4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d011      	beq.n	80066b6 <HAL_UART_IRQHandler+0x126>
 8006692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800669e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f043 0208 	orr.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 81ed 	beq.w	8006a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_UART_IRQHandler+0x14e>
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb8e 	bl	8006dfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <HAL_UART_IRQHandler+0x17a>
 8006702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04f      	beq.n	80067aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa96 	bl	8006c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d141      	bne.n	80067a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3314      	adds	r3, #20
 8006724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800674a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800674e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1d9      	bne.n	800671e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d013      	beq.n	800679a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	4a7d      	ldr	r2, [pc, #500]	; (800696c <HAL_UART_IRQHandler+0x3dc>)
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd faad 	bl	8003cde <HAL_DMA_Abort_IT>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e00e      	b.n	80067b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f990 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e00a      	b.n	80067b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f98c 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	e006      	b.n	80067b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f988 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067b6:	e170      	b.n	8006a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	bf00      	nop
    return;
 80067ba:	e16e      	b.n	8006a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f040 814a 	bne.w	8006a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8143 	beq.w	8006a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 813c 	beq.w	8006a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	f040 80b4 	bne.w	8006970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8140 	beq.w	8006a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006826:	429a      	cmp	r2, r3
 8006828:	f080 8139 	bcs.w	8006a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	f000 8088 	beq.w	8006952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800685c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800686e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800687a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d9      	bne.n	8006842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800689e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3314      	adds	r3, #20
 80068ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e1      	bne.n	800688e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e3      	bne.n	80068ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006934:	65ba      	str	r2, [r7, #88]	; 0x58
 8006936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800693a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e3      	bne.n	8006910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd f956 	bl	8003bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800695a:	b29b      	uxth	r3, r3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	b29b      	uxth	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8b6 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006968:	e099      	b.n	8006a9e <HAL_UART_IRQHandler+0x50e>
 800696a:	bf00      	nop
 800696c:	08006d03 	.word	0x08006d03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006978:	b29b      	uxth	r3, r3
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 808b 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800698c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8086 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069ba:	647a      	str	r2, [r7, #68]	; 0x44
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e3      	bne.n	8006996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3314      	adds	r3, #20
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	623b      	str	r3, [r7, #32]
   return(result);
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069f2:	633a      	str	r2, [r7, #48]	; 0x30
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e3      	bne.n	80069ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0310 	bic.w	r3, r3, #16
 8006a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a38:	61fa      	str	r2, [r7, #28]
 8006a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	69b9      	ldr	r1, [r7, #24]
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	617b      	str	r3, [r7, #20]
   return(result);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e3      	bne.n	8006a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f83e 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a58:	e023      	b.n	8006aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_UART_IRQHandler+0x4ea>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f959 	bl	8006d2a <UART_Transmit_IT>
    return;
 8006a78:	e014      	b.n	8006aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x514>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d008      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f999 	bl	8006dca <UART_EndTransmit_IT>
    return;
 8006a98:	e004      	b.n	8006aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8006aa2:	bf00      	nop
  }
}
 8006aa4:	37e8      	adds	r7, #232	; 0xe8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop

08006aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b090      	sub	sp, #64	; 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afc:	e050      	b.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d04c      	beq.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0c:	f7fc ff36 	bl	800397c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d241      	bcs.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b3c:	637a      	str	r2, [r7, #52]	; 0x34
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b70:	623a      	str	r2, [r7, #32]
 8006b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e5      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e00f      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d09f      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3740      	adds	r7, #64	; 0x40
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2222      	movs	r2, #34	; 0x22
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0220 	orr.w	r2, r2, #32
 8006c2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b095      	sub	sp, #84	; 0x54
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c64:	643a      	str	r2, [r7, #64]	; 0x40
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3314      	adds	r3, #20
 8006c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d119      	bne.n	8006ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd4:	61ba      	str	r2, [r7, #24]
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e5      	bne.n	8006cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cf6:	bf00      	nop
 8006cf8:	3754      	adds	r7, #84	; 0x54
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fecf 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b21      	cmp	r3, #33	; 0x21
 8006d3c:	d13e      	bne.n	8006dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d46:	d114      	bne.n	8006d72 <UART_Transmit_IT+0x48>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d110      	bne.n	8006d72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	621a      	str	r2, [r3, #32]
 8006d70:	e008      	b.n	8006d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6211      	str	r1, [r2, #32]
 8006d7c:	781a      	ldrb	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4619      	mov	r1, r3
 8006d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10f      	bne.n	8006db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fe5e 	bl	8006aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b08c      	sub	sp, #48	; 0x30
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b22      	cmp	r3, #34	; 0x22
 8006e0c:	f040 80ab 	bne.w	8006f66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d117      	bne.n	8006e4a <UART_Receive_IT+0x50>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d113      	bne.n	8006e4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	1c9a      	adds	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
 8006e48:	e026      	b.n	8006e98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5c:	d007      	beq.n	8006e6e <UART_Receive_IT+0x74>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <UART_Receive_IT+0x82>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e008      	b.n	8006e8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d15a      	bne.n	8006f62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0220 	bic.w	r2, r2, #32
 8006eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d135      	bne.n	8006f58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	613b      	str	r3, [r7, #16]
   return(result);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f023 0310 	bic.w	r3, r3, #16
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	623a      	str	r2, [r7, #32]
 8006f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	69f9      	ldr	r1, [r7, #28]
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d10a      	bne.n	8006f4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fdbf 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
 8006f56:	e002      	b.n	8006f5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fa f9e7 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e002      	b.n	8006f68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3730      	adds	r7, #48	; 0x30
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	b09f      	sub	sp, #124	; 0x7c
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	68d9      	ldr	r1, [r3, #12]
 8006f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	ea40 0301 	orr.w	r3, r0, r1
 8006f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fb4:	f021 010c 	bic.w	r1, r1, #12
 8006fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fce:	6999      	ldr	r1, [r3, #24]
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	ea40 0301 	orr.w	r3, r0, r1
 8006fd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4bc5      	ldr	r3, [pc, #788]	; (80072f4 <UART_SetConfig+0x384>)
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d004      	beq.n	8006fee <UART_SetConfig+0x7e>
 8006fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4bc3      	ldr	r3, [pc, #780]	; (80072f8 <UART_SetConfig+0x388>)
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d103      	bne.n	8006ff6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fee:	f7fd fcc7 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8006ff2:	6778      	str	r0, [r7, #116]	; 0x74
 8006ff4:	e002      	b.n	8006ffc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7fd fcaf 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007004:	f040 80b6 	bne.w	8007174 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700a:	461c      	mov	r4, r3
 800700c:	f04f 0500 	mov.w	r5, #0
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	1891      	adds	r1, r2, r2
 8007016:	6439      	str	r1, [r7, #64]	; 0x40
 8007018:	415b      	adcs	r3, r3
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007020:	1912      	adds	r2, r2, r4
 8007022:	eb45 0303 	adc.w	r3, r5, r3
 8007026:	f04f 0000 	mov.w	r0, #0
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	00d9      	lsls	r1, r3, #3
 8007030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007034:	00d0      	lsls	r0, r2, #3
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	1911      	adds	r1, r2, r4
 800703c:	6639      	str	r1, [r7, #96]	; 0x60
 800703e:	416b      	adcs	r3, r5
 8007040:	667b      	str	r3, [r7, #100]	; 0x64
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	461a      	mov	r2, r3
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	1891      	adds	r1, r2, r2
 800704e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007050:	415b      	adcs	r3, r3
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007058:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800705c:	f7f9 fe0c 	bl	8000c78 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4ba5      	ldr	r3, [pc, #660]	; (80072fc <UART_SetConfig+0x38c>)
 8007066:	fba3 2302 	umull	r2, r3, r3, r2
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	011e      	lsls	r6, r3, #4
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	461c      	mov	r4, r3
 8007072:	f04f 0500 	mov.w	r5, #0
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	1891      	adds	r1, r2, r2
 800707c:	6339      	str	r1, [r7, #48]	; 0x30
 800707e:	415b      	adcs	r3, r3
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007086:	1912      	adds	r2, r2, r4
 8007088:	eb45 0303 	adc.w	r3, r5, r3
 800708c:	f04f 0000 	mov.w	r0, #0
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	00d9      	lsls	r1, r3, #3
 8007096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800709a:	00d0      	lsls	r0, r2, #3
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	1911      	adds	r1, r2, r4
 80070a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80070a4:	416b      	adcs	r3, r5
 80070a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	1891      	adds	r1, r2, r2
 80070b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80070b6:	415b      	adcs	r3, r3
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80070c2:	f7f9 fdd9 	bl	8000c78 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4b8c      	ldr	r3, [pc, #560]	; (80072fc <UART_SetConfig+0x38c>)
 80070cc:	fba3 1302 	umull	r1, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	2164      	movs	r1, #100	; 0x64
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	3332      	adds	r3, #50	; 0x32
 80070de:	4a87      	ldr	r2, [pc, #540]	; (80072fc <UART_SetConfig+0x38c>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070ec:	441e      	add	r6, r3
 80070ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f0:	4618      	mov	r0, r3
 80070f2:	f04f 0100 	mov.w	r1, #0
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	1894      	adds	r4, r2, r2
 80070fc:	623c      	str	r4, [r7, #32]
 80070fe:	415b      	adcs	r3, r3
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
 8007102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007106:	1812      	adds	r2, r2, r0
 8007108:	eb41 0303 	adc.w	r3, r1, r3
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	f04f 0500 	mov.w	r5, #0
 8007114:	00dd      	lsls	r5, r3, #3
 8007116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800711a:	00d4      	lsls	r4, r2, #3
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	1814      	adds	r4, r2, r0
 8007122:	653c      	str	r4, [r7, #80]	; 0x50
 8007124:	414b      	adcs	r3, r1
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	461a      	mov	r2, r3
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	1891      	adds	r1, r2, r2
 8007134:	61b9      	str	r1, [r7, #24]
 8007136:	415b      	adcs	r3, r3
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800713e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007142:	f7f9 fd99 	bl	8000c78 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4b6c      	ldr	r3, [pc, #432]	; (80072fc <UART_SetConfig+0x38c>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3332      	adds	r3, #50	; 0x32
 800715e:	4a67      	ldr	r2, [pc, #412]	; (80072fc <UART_SetConfig+0x38c>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 0207 	and.w	r2, r3, #7
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4432      	add	r2, r6
 8007170:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007172:	e0b9      	b.n	80072e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	461c      	mov	r4, r3
 8007178:	f04f 0500 	mov.w	r5, #0
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	1891      	adds	r1, r2, r2
 8007182:	6139      	str	r1, [r7, #16]
 8007184:	415b      	adcs	r3, r3
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800718c:	1912      	adds	r2, r2, r4
 800718e:	eb45 0303 	adc.w	r3, r5, r3
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	00d9      	lsls	r1, r3, #3
 800719c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a0:	00d0      	lsls	r0, r2, #3
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	eb12 0804 	adds.w	r8, r2, r4
 80071aa:	eb43 0905 	adc.w	r9, r3, r5
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	008b      	lsls	r3, r1, #2
 80071c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071c6:	0082      	lsls	r2, r0, #2
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 fd54 	bl	8000c78 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <UART_SetConfig+0x38c>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011e      	lsls	r6, r3, #4
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	4618      	mov	r0, r3
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	1894      	adds	r4, r2, r2
 80071ec:	60bc      	str	r4, [r7, #8]
 80071ee:	415b      	adcs	r3, r3
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f6:	1812      	adds	r2, r2, r0
 80071f8:	eb41 0303 	adc.w	r3, r1, r3
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	f04f 0500 	mov.w	r5, #0
 8007204:	00dd      	lsls	r5, r3, #3
 8007206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800720a:	00d4      	lsls	r4, r2, #3
 800720c:	4622      	mov	r2, r4
 800720e:	462b      	mov	r3, r5
 8007210:	1814      	adds	r4, r2, r0
 8007212:	64bc      	str	r4, [r7, #72]	; 0x48
 8007214:	414b      	adcs	r3, r1
 8007216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f04f 0100 	mov.w	r1, #0
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	008b      	lsls	r3, r1, #2
 800722c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007230:	0082      	lsls	r2, r0, #2
 8007232:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007236:	f7f9 fd1f 	bl	8000c78 <__aeabi_uldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <UART_SetConfig+0x38c>)
 8007240:	fba3 1302 	umull	r1, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	2164      	movs	r1, #100	; 0x64
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	3332      	adds	r3, #50	; 0x32
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <UART_SetConfig+0x38c>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725e:	441e      	add	r6, r3
 8007260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007262:	4618      	mov	r0, r3
 8007264:	f04f 0100 	mov.w	r1, #0
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	1894      	adds	r4, r2, r2
 800726e:	603c      	str	r4, [r7, #0]
 8007270:	415b      	adcs	r3, r3
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007278:	1812      	adds	r2, r2, r0
 800727a:	eb41 0303 	adc.w	r3, r1, r3
 800727e:	f04f 0400 	mov.w	r4, #0
 8007282:	f04f 0500 	mov.w	r5, #0
 8007286:	00dd      	lsls	r5, r3, #3
 8007288:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800728c:	00d4      	lsls	r4, r2, #3
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	eb12 0a00 	adds.w	sl, r2, r0
 8007296:	eb43 0b01 	adc.w	fp, r3, r1
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f04f 0100 	mov.w	r1, #0
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	008b      	lsls	r3, r1, #2
 80072ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072b2:	0082      	lsls	r2, r0, #2
 80072b4:	4650      	mov	r0, sl
 80072b6:	4659      	mov	r1, fp
 80072b8:	f7f9 fcde 	bl	8000c78 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <UART_SetConfig+0x38c>)
 80072c2:	fba3 1302 	umull	r1, r3, r3, r2
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2164      	movs	r1, #100	; 0x64
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	; 0x32
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <UART_SetConfig+0x38c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4432      	add	r2, r6
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	377c      	adds	r7, #124	; 0x7c
 80072ec:	46bd      	mov	sp, r7
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	bf00      	nop
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	51eb851f 	.word	0x51eb851f

08007300 <powf>:
 8007300:	b508      	push	{r3, lr}
 8007302:	ed2d 8b04 	vpush	{d8-d9}
 8007306:	eeb0 9a40 	vmov.f32	s18, s0
 800730a:	eef0 8a60 	vmov.f32	s17, s1
 800730e:	f000 f88f 	bl	8007430 <__ieee754_powf>
 8007312:	4b43      	ldr	r3, [pc, #268]	; (8007420 <powf+0x120>)
 8007314:	f993 3000 	ldrsb.w	r3, [r3]
 8007318:	3301      	adds	r3, #1
 800731a:	eeb0 8a40 	vmov.f32	s16, s0
 800731e:	d012      	beq.n	8007346 <powf+0x46>
 8007320:	eef4 8a68 	vcmp.f32	s17, s17
 8007324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007328:	d60d      	bvs.n	8007346 <powf+0x46>
 800732a:	eeb4 9a49 	vcmp.f32	s18, s18
 800732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007332:	d70d      	bvc.n	8007350 <powf+0x50>
 8007334:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007340:	bf08      	it	eq
 8007342:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007346:	eeb0 0a48 	vmov.f32	s0, s16
 800734a:	ecbd 8b04 	vpop	{d8-d9}
 800734e:	bd08      	pop	{r3, pc}
 8007350:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007424 <powf+0x124>
 8007354:	eeb4 9a69 	vcmp.f32	s18, s19
 8007358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735c:	d116      	bne.n	800738c <powf+0x8c>
 800735e:	eef4 8a69 	vcmp.f32	s17, s19
 8007362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007366:	d057      	beq.n	8007418 <powf+0x118>
 8007368:	eeb0 0a68 	vmov.f32	s0, s17
 800736c:	f000 fb2a 	bl	80079c4 <finitef>
 8007370:	2800      	cmp	r0, #0
 8007372:	d0e8      	beq.n	8007346 <powf+0x46>
 8007374:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	d5e3      	bpl.n	8007346 <powf+0x46>
 800737e:	f000 fc07 	bl	8007b90 <__errno>
 8007382:	2321      	movs	r3, #33	; 0x21
 8007384:	6003      	str	r3, [r0, #0]
 8007386:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007428 <powf+0x128>
 800738a:	e7dc      	b.n	8007346 <powf+0x46>
 800738c:	f000 fb1a 	bl	80079c4 <finitef>
 8007390:	bb50      	cbnz	r0, 80073e8 <powf+0xe8>
 8007392:	eeb0 0a49 	vmov.f32	s0, s18
 8007396:	f000 fb15 	bl	80079c4 <finitef>
 800739a:	b328      	cbz	r0, 80073e8 <powf+0xe8>
 800739c:	eeb0 0a68 	vmov.f32	s0, s17
 80073a0:	f000 fb10 	bl	80079c4 <finitef>
 80073a4:	b300      	cbz	r0, 80073e8 <powf+0xe8>
 80073a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	d706      	bvc.n	80073be <powf+0xbe>
 80073b0:	f000 fbee 	bl	8007b90 <__errno>
 80073b4:	2321      	movs	r3, #33	; 0x21
 80073b6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80073ba:	6003      	str	r3, [r0, #0]
 80073bc:	e7c3      	b.n	8007346 <powf+0x46>
 80073be:	f000 fbe7 	bl	8007b90 <__errno>
 80073c2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80073c6:	2322      	movs	r3, #34	; 0x22
 80073c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	d508      	bpl.n	80073e2 <powf+0xe2>
 80073d0:	eeb0 0a68 	vmov.f32	s0, s17
 80073d4:	f000 fb0a 	bl	80079ec <rintf>
 80073d8:	eeb4 0a68 	vcmp.f32	s0, s17
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	d1d1      	bne.n	8007386 <powf+0x86>
 80073e2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800742c <powf+0x12c>
 80073e6:	e7ae      	b.n	8007346 <powf+0x46>
 80073e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	d1a9      	bne.n	8007346 <powf+0x46>
 80073f2:	eeb0 0a49 	vmov.f32	s0, s18
 80073f6:	f000 fae5 	bl	80079c4 <finitef>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d0a3      	beq.n	8007346 <powf+0x46>
 80073fe:	eeb0 0a68 	vmov.f32	s0, s17
 8007402:	f000 fadf 	bl	80079c4 <finitef>
 8007406:	2800      	cmp	r0, #0
 8007408:	d09d      	beq.n	8007346 <powf+0x46>
 800740a:	f000 fbc1 	bl	8007b90 <__errno>
 800740e:	2322      	movs	r3, #34	; 0x22
 8007410:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007424 <powf+0x124>
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	e796      	b.n	8007346 <powf+0x46>
 8007418:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800741c:	e793      	b.n	8007346 <powf+0x46>
 800741e:	bf00      	nop
 8007420:	20000019 	.word	0x20000019
 8007424:	00000000 	.word	0x00000000
 8007428:	ff800000 	.word	0xff800000
 800742c:	7f800000 	.word	0x7f800000

08007430 <__ieee754_powf>:
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	ee10 5a90 	vmov	r5, s1
 8007438:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800743c:	ed2d 8b02 	vpush	{d8}
 8007440:	eeb0 8a40 	vmov.f32	s16, s0
 8007444:	eef0 8a60 	vmov.f32	s17, s1
 8007448:	f000 8291 	beq.w	800796e <__ieee754_powf+0x53e>
 800744c:	ee10 8a10 	vmov	r8, s0
 8007450:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007454:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007458:	dc06      	bgt.n	8007468 <__ieee754_powf+0x38>
 800745a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800745e:	dd0a      	ble.n	8007476 <__ieee754_powf+0x46>
 8007460:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007464:	f000 8283 	beq.w	800796e <__ieee754_powf+0x53e>
 8007468:	ecbd 8b02 	vpop	{d8}
 800746c:	48d8      	ldr	r0, [pc, #864]	; (80077d0 <__ieee754_powf+0x3a0>)
 800746e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	f000 bab5 	b.w	80079e0 <nanf>
 8007476:	f1b8 0f00 	cmp.w	r8, #0
 800747a:	da1f      	bge.n	80074bc <__ieee754_powf+0x8c>
 800747c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007480:	da2e      	bge.n	80074e0 <__ieee754_powf+0xb0>
 8007482:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007486:	f2c0 827b 	blt.w	8007980 <__ieee754_powf+0x550>
 800748a:	15fb      	asrs	r3, r7, #23
 800748c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007490:	fa47 f603 	asr.w	r6, r7, r3
 8007494:	fa06 f303 	lsl.w	r3, r6, r3
 8007498:	42bb      	cmp	r3, r7
 800749a:	f040 8271 	bne.w	8007980 <__ieee754_powf+0x550>
 800749e:	f006 0601 	and.w	r6, r6, #1
 80074a2:	f1c6 0602 	rsb	r6, r6, #2
 80074a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80074aa:	d120      	bne.n	80074ee <__ieee754_powf+0xbe>
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	f280 8264 	bge.w	800797a <__ieee754_powf+0x54a>
 80074b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80074ba:	e00d      	b.n	80074d8 <__ieee754_powf+0xa8>
 80074bc:	2600      	movs	r6, #0
 80074be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80074c2:	d1f0      	bne.n	80074a6 <__ieee754_powf+0x76>
 80074c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80074c8:	f000 8251 	beq.w	800796e <__ieee754_powf+0x53e>
 80074cc:	dd0a      	ble.n	80074e4 <__ieee754_powf+0xb4>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	f280 8250 	bge.w	8007974 <__ieee754_powf+0x544>
 80074d4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80077d4 <__ieee754_powf+0x3a4>
 80074d8:	ecbd 8b02 	vpop	{d8}
 80074dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e0:	2602      	movs	r6, #2
 80074e2:	e7ec      	b.n	80074be <__ieee754_powf+0x8e>
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	daf5      	bge.n	80074d4 <__ieee754_powf+0xa4>
 80074e8:	eeb1 0a68 	vneg.f32	s0, s17
 80074ec:	e7f4      	b.n	80074d8 <__ieee754_powf+0xa8>
 80074ee:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80074f2:	d102      	bne.n	80074fa <__ieee754_powf+0xca>
 80074f4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80074f8:	e7ee      	b.n	80074d8 <__ieee754_powf+0xa8>
 80074fa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80074fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007502:	d108      	bne.n	8007516 <__ieee754_powf+0xe6>
 8007504:	f1b8 0f00 	cmp.w	r8, #0
 8007508:	db05      	blt.n	8007516 <__ieee754_powf+0xe6>
 800750a:	ecbd 8b02 	vpop	{d8}
 800750e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	f000 ba4d 	b.w	80079b0 <__ieee754_sqrtf>
 8007516:	f000 fa4e 	bl	80079b6 <fabsf>
 800751a:	b124      	cbz	r4, 8007526 <__ieee754_powf+0xf6>
 800751c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007520:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007524:	d117      	bne.n	8007556 <__ieee754_powf+0x126>
 8007526:	2d00      	cmp	r5, #0
 8007528:	bfbc      	itt	lt
 800752a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800752e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007532:	f1b8 0f00 	cmp.w	r8, #0
 8007536:	dacf      	bge.n	80074d8 <__ieee754_powf+0xa8>
 8007538:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800753c:	ea54 0306 	orrs.w	r3, r4, r6
 8007540:	d104      	bne.n	800754c <__ieee754_powf+0x11c>
 8007542:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007546:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800754a:	e7c5      	b.n	80074d8 <__ieee754_powf+0xa8>
 800754c:	2e01      	cmp	r6, #1
 800754e:	d1c3      	bne.n	80074d8 <__ieee754_powf+0xa8>
 8007550:	eeb1 0a40 	vneg.f32	s0, s0
 8007554:	e7c0      	b.n	80074d8 <__ieee754_powf+0xa8>
 8007556:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800755a:	3801      	subs	r0, #1
 800755c:	ea56 0300 	orrs.w	r3, r6, r0
 8007560:	d104      	bne.n	800756c <__ieee754_powf+0x13c>
 8007562:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007566:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800756a:	e7b5      	b.n	80074d8 <__ieee754_powf+0xa8>
 800756c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007570:	dd6b      	ble.n	800764a <__ieee754_powf+0x21a>
 8007572:	4b99      	ldr	r3, [pc, #612]	; (80077d8 <__ieee754_powf+0x3a8>)
 8007574:	429c      	cmp	r4, r3
 8007576:	dc06      	bgt.n	8007586 <__ieee754_powf+0x156>
 8007578:	2d00      	cmp	r5, #0
 800757a:	daab      	bge.n	80074d4 <__ieee754_powf+0xa4>
 800757c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80077dc <__ieee754_powf+0x3ac>
 8007580:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007584:	e7a8      	b.n	80074d8 <__ieee754_powf+0xa8>
 8007586:	4b96      	ldr	r3, [pc, #600]	; (80077e0 <__ieee754_powf+0x3b0>)
 8007588:	429c      	cmp	r4, r3
 800758a:	dd02      	ble.n	8007592 <__ieee754_powf+0x162>
 800758c:	2d00      	cmp	r5, #0
 800758e:	dcf5      	bgt.n	800757c <__ieee754_powf+0x14c>
 8007590:	e7a0      	b.n	80074d4 <__ieee754_powf+0xa4>
 8007592:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007596:	ee30 0a67 	vsub.f32	s0, s0, s15
 800759a:	eddf 6a92 	vldr	s13, [pc, #584]	; 80077e4 <__ieee754_powf+0x3b4>
 800759e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80075a2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80075a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80075aa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80075ae:	ee20 7a00 	vmul.f32	s14, s0, s0
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80077e8 <__ieee754_powf+0x3b8>
 80075ba:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80075be:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80077ec <__ieee754_powf+0x3bc>
 80075c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80075c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80077f0 <__ieee754_powf+0x3c0>
 80075ca:	eef0 6a67 	vmov.f32	s13, s15
 80075ce:	eee0 6a07 	vfma.f32	s13, s0, s14
 80075d2:	ee16 3a90 	vmov	r3, s13
 80075d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075da:	f023 030f 	bic.w	r3, r3, #15
 80075de:	ee00 3a90 	vmov	s1, r3
 80075e2:	eee0 0a47 	vfms.f32	s1, s0, s14
 80075e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80075ea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80075ee:	f025 050f 	bic.w	r5, r5, #15
 80075f2:	ee07 5a10 	vmov	s14, r5
 80075f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80075fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007606:	3e01      	subs	r6, #1
 8007608:	ea56 0200 	orrs.w	r2, r6, r0
 800760c:	ee07 5a10 	vmov	s14, r5
 8007610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007614:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007618:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800761c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007620:	ee17 4a10 	vmov	r4, s14
 8007624:	bf08      	it	eq
 8007626:	eeb0 8a40 	vmoveq.f32	s16, s0
 800762a:	2c00      	cmp	r4, #0
 800762c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007630:	f340 8184 	ble.w	800793c <__ieee754_powf+0x50c>
 8007634:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007638:	f340 80fc 	ble.w	8007834 <__ieee754_powf+0x404>
 800763c:	eddf 7a67 	vldr	s15, [pc, #412]	; 80077dc <__ieee754_powf+0x3ac>
 8007640:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007644:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007648:	e746      	b.n	80074d8 <__ieee754_powf+0xa8>
 800764a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800764e:	bf01      	itttt	eq
 8007650:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80077f4 <__ieee754_powf+0x3c4>
 8007654:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007658:	f06f 0217 	mvneq.w	r2, #23
 800765c:	ee17 4a90 	vmoveq	r4, s15
 8007660:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007664:	bf18      	it	ne
 8007666:	2200      	movne	r2, #0
 8007668:	3b7f      	subs	r3, #127	; 0x7f
 800766a:	4413      	add	r3, r2
 800766c:	4a62      	ldr	r2, [pc, #392]	; (80077f8 <__ieee754_powf+0x3c8>)
 800766e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007672:	4294      	cmp	r4, r2
 8007674:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007678:	dd06      	ble.n	8007688 <__ieee754_powf+0x258>
 800767a:	4a60      	ldr	r2, [pc, #384]	; (80077fc <__ieee754_powf+0x3cc>)
 800767c:	4294      	cmp	r4, r2
 800767e:	f340 80a4 	ble.w	80077ca <__ieee754_powf+0x39a>
 8007682:	3301      	adds	r3, #1
 8007684:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007688:	2400      	movs	r4, #0
 800768a:	4a5d      	ldr	r2, [pc, #372]	; (8007800 <__ieee754_powf+0x3d0>)
 800768c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007690:	ee07 1a90 	vmov	s15, r1
 8007694:	ed92 7a00 	vldr	s14, [r2]
 8007698:	4a5a      	ldr	r2, [pc, #360]	; (8007804 <__ieee754_powf+0x3d4>)
 800769a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800769e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80076a2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80076a6:	1049      	asrs	r1, r1, #1
 80076a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80076ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80076b0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80076b4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80076b8:	ee06 1a10 	vmov	s12, r1
 80076bc:	ee65 4a26 	vmul.f32	s9, s10, s13
 80076c0:	ee36 7a47 	vsub.f32	s14, s12, s14
 80076c4:	ee14 7a90 	vmov	r7, s9
 80076c8:	4017      	ands	r7, r2
 80076ca:	ee05 7a90 	vmov	s11, r7
 80076ce:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80076d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007808 <__ieee754_powf+0x3d8>
 80076da:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80076de:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80076e2:	ee25 6a26 	vmul.f32	s12, s10, s13
 80076e6:	eddf 6a49 	vldr	s13, [pc, #292]	; 800780c <__ieee754_powf+0x3dc>
 80076ea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80076ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007810 <__ieee754_powf+0x3e0>
 80076f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076f6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80077e4 <__ieee754_powf+0x3b4>
 80076fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076fe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007814 <__ieee754_powf+0x3e4>
 8007702:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007706:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007818 <__ieee754_powf+0x3e8>
 800770a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800770e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007712:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007716:	ee66 6a86 	vmul.f32	s13, s13, s12
 800771a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800771e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007722:	eef0 7a45 	vmov.f32	s15, s10
 8007726:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee17 1a90 	vmov	r1, s15
 8007732:	4011      	ands	r1, r2
 8007734:	ee07 1a90 	vmov	s15, r1
 8007738:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800773c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007740:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007744:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007748:	eea6 7a27 	vfma.f32	s14, s12, s15
 800774c:	eeb0 6a47 	vmov.f32	s12, s14
 8007750:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007754:	ee16 1a10 	vmov	r1, s12
 8007758:	4011      	ands	r1, r2
 800775a:	ee06 1a90 	vmov	s13, r1
 800775e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007762:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800781c <__ieee754_powf+0x3ec>
 8007766:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007820 <__ieee754_powf+0x3f0>
 800776a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800776e:	ee06 1a10 	vmov	s12, r1
 8007772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007776:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007824 <__ieee754_powf+0x3f4>
 800777a:	492b      	ldr	r1, [pc, #172]	; (8007828 <__ieee754_powf+0x3f8>)
 800777c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007784:	edd1 7a00 	vldr	s15, [r1]
 8007788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	4b26      	ldr	r3, [pc, #152]	; (800782c <__ieee754_powf+0x3fc>)
 8007792:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007796:	eef0 7a47 	vmov.f32	s15, s14
 800779a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800779e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077a2:	edd4 0a00 	vldr	s1, [r4]
 80077a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee17 3a90 	vmov	r3, s15
 80077b2:	4013      	ands	r3, r2
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80077bc:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80077c0:	eee6 6a65 	vfms.f32	s13, s12, s11
 80077c4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80077c8:	e70f      	b.n	80075ea <__ieee754_powf+0x1ba>
 80077ca:	2401      	movs	r4, #1
 80077cc:	e75d      	b.n	800768a <__ieee754_powf+0x25a>
 80077ce:	bf00      	nop
 80077d0:	0800b618 	.word	0x0800b618
 80077d4:	00000000 	.word	0x00000000
 80077d8:	3f7ffff7 	.word	0x3f7ffff7
 80077dc:	7149f2ca 	.word	0x7149f2ca
 80077e0:	3f800007 	.word	0x3f800007
 80077e4:	3eaaaaab 	.word	0x3eaaaaab
 80077e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80077ec:	36eca570 	.word	0x36eca570
 80077f0:	3fb8aa00 	.word	0x3fb8aa00
 80077f4:	4b800000 	.word	0x4b800000
 80077f8:	001cc471 	.word	0x001cc471
 80077fc:	005db3d6 	.word	0x005db3d6
 8007800:	0800b258 	.word	0x0800b258
 8007804:	fffff000 	.word	0xfffff000
 8007808:	3e6c3255 	.word	0x3e6c3255
 800780c:	3e53f142 	.word	0x3e53f142
 8007810:	3e8ba305 	.word	0x3e8ba305
 8007814:	3edb6db7 	.word	0x3edb6db7
 8007818:	3f19999a 	.word	0x3f19999a
 800781c:	3f76384f 	.word	0x3f76384f
 8007820:	3f763800 	.word	0x3f763800
 8007824:	369dc3a0 	.word	0x369dc3a0
 8007828:	0800b268 	.word	0x0800b268
 800782c:	0800b260 	.word	0x0800b260
 8007830:	3338aa3c 	.word	0x3338aa3c
 8007834:	f040 8092 	bne.w	800795c <__ieee754_powf+0x52c>
 8007838:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007830 <__ieee754_powf+0x400>
 800783c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007840:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007844:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	f73f aef6 	bgt.w	800763c <__ieee754_powf+0x20c>
 8007850:	15db      	asrs	r3, r3, #23
 8007852:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007856:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800785a:	4103      	asrs	r3, r0
 800785c:	4423      	add	r3, r4
 800785e:	4949      	ldr	r1, [pc, #292]	; (8007984 <__ieee754_powf+0x554>)
 8007860:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007864:	3a7f      	subs	r2, #127	; 0x7f
 8007866:	4111      	asrs	r1, r2
 8007868:	ea23 0101 	bic.w	r1, r3, r1
 800786c:	ee07 1a10 	vmov	s14, r1
 8007870:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007874:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007878:	f1c2 0217 	rsb	r2, r2, #23
 800787c:	4110      	asrs	r0, r2
 800787e:	2c00      	cmp	r4, #0
 8007880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007884:	bfb8      	it	lt
 8007886:	4240      	neglt	r0, r0
 8007888:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800788c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007988 <__ieee754_powf+0x558>
 8007890:	ee17 3a10 	vmov	r3, s14
 8007894:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007898:	f023 030f 	bic.w	r3, r3, #15
 800789c:	ee07 3a10 	vmov	s14, r3
 80078a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80078a8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800798c <__ieee754_powf+0x55c>
 80078ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80078b4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007990 <__ieee754_powf+0x560>
 80078b8:	eeb0 0a67 	vmov.f32	s0, s15
 80078bc:	eea7 0a26 	vfma.f32	s0, s14, s13
 80078c0:	eeb0 6a40 	vmov.f32	s12, s0
 80078c4:	eea7 6a66 	vfms.f32	s12, s14, s13
 80078c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80078cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80078d0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007994 <__ieee754_powf+0x564>
 80078d4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007998 <__ieee754_powf+0x568>
 80078d8:	eea7 6a26 	vfma.f32	s12, s14, s13
 80078dc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800799c <__ieee754_powf+0x56c>
 80078e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80078e4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80079a0 <__ieee754_powf+0x570>
 80078e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80078ec:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80079a4 <__ieee754_powf+0x574>
 80078f0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80078f4:	eeb0 6a40 	vmov.f32	s12, s0
 80078f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80078fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007900:	eeb0 7a46 	vmov.f32	s14, s12
 8007904:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007908:	ee20 6a06 	vmul.f32	s12, s0, s12
 800790c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007910:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007918:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800791c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007920:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007924:	ee10 3a10 	vmov	r3, s0
 8007928:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800792c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007930:	da1a      	bge.n	8007968 <__ieee754_powf+0x538>
 8007932:	f000 f8b7 	bl	8007aa4 <scalbnf>
 8007936:	ee20 0a08 	vmul.f32	s0, s0, s16
 800793a:	e5cd      	b.n	80074d8 <__ieee754_powf+0xa8>
 800793c:	4a1a      	ldr	r2, [pc, #104]	; (80079a8 <__ieee754_powf+0x578>)
 800793e:	4293      	cmp	r3, r2
 8007940:	dd02      	ble.n	8007948 <__ieee754_powf+0x518>
 8007942:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80079ac <__ieee754_powf+0x57c>
 8007946:	e67b      	b.n	8007640 <__ieee754_powf+0x210>
 8007948:	d108      	bne.n	800795c <__ieee754_powf+0x52c>
 800794a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800794e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007956:	f6ff af7b 	blt.w	8007850 <__ieee754_powf+0x420>
 800795a:	e7f2      	b.n	8007942 <__ieee754_powf+0x512>
 800795c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007960:	f73f af76 	bgt.w	8007850 <__ieee754_powf+0x420>
 8007964:	2000      	movs	r0, #0
 8007966:	e78f      	b.n	8007888 <__ieee754_powf+0x458>
 8007968:	ee00 3a10 	vmov	s0, r3
 800796c:	e7e3      	b.n	8007936 <__ieee754_powf+0x506>
 800796e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007972:	e5b1      	b.n	80074d8 <__ieee754_powf+0xa8>
 8007974:	eeb0 0a68 	vmov.f32	s0, s17
 8007978:	e5ae      	b.n	80074d8 <__ieee754_powf+0xa8>
 800797a:	eeb0 0a48 	vmov.f32	s0, s16
 800797e:	e5ab      	b.n	80074d8 <__ieee754_powf+0xa8>
 8007980:	2600      	movs	r6, #0
 8007982:	e590      	b.n	80074a6 <__ieee754_powf+0x76>
 8007984:	007fffff 	.word	0x007fffff
 8007988:	3f317218 	.word	0x3f317218
 800798c:	35bfbe8c 	.word	0x35bfbe8c
 8007990:	3f317200 	.word	0x3f317200
 8007994:	3331bb4c 	.word	0x3331bb4c
 8007998:	b5ddea0e 	.word	0xb5ddea0e
 800799c:	388ab355 	.word	0x388ab355
 80079a0:	bb360b61 	.word	0xbb360b61
 80079a4:	3e2aaaab 	.word	0x3e2aaaab
 80079a8:	43160000 	.word	0x43160000
 80079ac:	0da24260 	.word	0x0da24260

080079b0 <__ieee754_sqrtf>:
 80079b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80079b4:	4770      	bx	lr

080079b6 <fabsf>:
 80079b6:	ee10 3a10 	vmov	r3, s0
 80079ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079be:	ee00 3a10 	vmov	s0, r3
 80079c2:	4770      	bx	lr

080079c4 <finitef>:
 80079c4:	b082      	sub	sp, #8
 80079c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80079ca:	9801      	ldr	r0, [sp, #4]
 80079cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80079d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80079d4:	bfac      	ite	ge
 80079d6:	2000      	movge	r0, #0
 80079d8:	2001      	movlt	r0, #1
 80079da:	b002      	add	sp, #8
 80079dc:	4770      	bx	lr
	...

080079e0 <nanf>:
 80079e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079e8 <nanf+0x8>
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	7fc00000 	.word	0x7fc00000

080079ec <rintf>:
 80079ec:	ee10 2a10 	vmov	r2, s0
 80079f0:	b513      	push	{r0, r1, r4, lr}
 80079f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80079f6:	397f      	subs	r1, #127	; 0x7f
 80079f8:	2916      	cmp	r1, #22
 80079fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80079fe:	dc47      	bgt.n	8007a90 <rintf+0xa4>
 8007a00:	b32b      	cbz	r3, 8007a4e <rintf+0x62>
 8007a02:	2900      	cmp	r1, #0
 8007a04:	ee10 3a10 	vmov	r3, s0
 8007a08:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007a0c:	da21      	bge.n	8007a52 <rintf+0x66>
 8007a0e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8007a12:	425b      	negs	r3, r3
 8007a14:	4921      	ldr	r1, [pc, #132]	; (8007a9c <rintf+0xb0>)
 8007a16:	0a5b      	lsrs	r3, r3, #9
 8007a18:	0d12      	lsrs	r2, r2, #20
 8007a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a1e:	0512      	lsls	r2, r2, #20
 8007a20:	4313      	orrs	r3, r2
 8007a22:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	edd1 6a00 	vldr	s13, [r1]
 8007a2e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007a32:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007a36:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a3e:	ee17 3a90 	vmov	r3, s15
 8007a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a46:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007a4a:	ee00 3a10 	vmov	s0, r3
 8007a4e:	b002      	add	sp, #8
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <rintf+0xb4>)
 8007a54:	410a      	asrs	r2, r1
 8007a56:	4213      	tst	r3, r2
 8007a58:	d0f9      	beq.n	8007a4e <rintf+0x62>
 8007a5a:	0854      	lsrs	r4, r2, #1
 8007a5c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8007a60:	d006      	beq.n	8007a70 <rintf+0x84>
 8007a62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a66:	ea23 0304 	bic.w	r3, r3, r4
 8007a6a:	fa42 f101 	asr.w	r1, r2, r1
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <rintf+0xb0>)
 8007a72:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007a76:	ed90 7a00 	vldr	s14, [r0]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	edcd 7a01 	vstr	s15, [sp, #4]
 8007a86:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007a8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007a8e:	e7de      	b.n	8007a4e <rintf+0x62>
 8007a90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a94:	d3db      	bcc.n	8007a4e <rintf+0x62>
 8007a96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007a9a:	e7d8      	b.n	8007a4e <rintf+0x62>
 8007a9c:	0800b270 	.word	0x0800b270
 8007aa0:	007fffff 	.word	0x007fffff

08007aa4 <scalbnf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007aac:	d025      	beq.n	8007afa <scalbnf+0x56>
 8007aae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007ab2:	d302      	bcc.n	8007aba <scalbnf+0x16>
 8007ab4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ab8:	4770      	bx	lr
 8007aba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007abe:	d122      	bne.n	8007b06 <scalbnf+0x62>
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <scalbnf+0xc8>)
 8007ac2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007b70 <scalbnf+0xcc>
 8007ac6:	4298      	cmp	r0, r3
 8007ac8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007acc:	db16      	blt.n	8007afc <scalbnf+0x58>
 8007ace:	ee10 3a10 	vmov	r3, s0
 8007ad2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ad6:	3a19      	subs	r2, #25
 8007ad8:	4402      	add	r2, r0
 8007ada:	2afe      	cmp	r2, #254	; 0xfe
 8007adc:	dd15      	ble.n	8007b0a <scalbnf+0x66>
 8007ade:	ee10 3a10 	vmov	r3, s0
 8007ae2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007b74 <scalbnf+0xd0>
 8007ae6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007b78 <scalbnf+0xd4>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	eeb0 7a67 	vmov.f32	s14, s15
 8007af0:	bfb8      	it	lt
 8007af2:	eef0 7a66 	vmovlt.f32	s15, s13
 8007af6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007afa:	4770      	bx	lr
 8007afc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007b7c <scalbnf+0xd8>
 8007b00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b04:	4770      	bx	lr
 8007b06:	0dd2      	lsrs	r2, r2, #23
 8007b08:	e7e6      	b.n	8007ad8 <scalbnf+0x34>
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	dd06      	ble.n	8007b1c <scalbnf+0x78>
 8007b0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007b16:	ee00 3a10 	vmov	s0, r3
 8007b1a:	4770      	bx	lr
 8007b1c:	f112 0f16 	cmn.w	r2, #22
 8007b20:	da1a      	bge.n	8007b58 <scalbnf+0xb4>
 8007b22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b26:	4298      	cmp	r0, r3
 8007b28:	ee10 3a10 	vmov	r3, s0
 8007b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b30:	dd0a      	ble.n	8007b48 <scalbnf+0xa4>
 8007b32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007b74 <scalbnf+0xd0>
 8007b36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007b78 <scalbnf+0xd4>
 8007b3a:	eef0 7a40 	vmov.f32	s15, s0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf18      	it	ne
 8007b42:	eeb0 0a47 	vmovne.f32	s0, s14
 8007b46:	e7db      	b.n	8007b00 <scalbnf+0x5c>
 8007b48:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007b7c <scalbnf+0xd8>
 8007b4c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007b80 <scalbnf+0xdc>
 8007b50:	eef0 7a40 	vmov.f32	s15, s0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	e7f3      	b.n	8007b40 <scalbnf+0x9c>
 8007b58:	3219      	adds	r2, #25
 8007b5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007b62:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007b84 <scalbnf+0xe0>
 8007b66:	ee07 3a10 	vmov	s14, r3
 8007b6a:	e7c4      	b.n	8007af6 <scalbnf+0x52>
 8007b6c:	ffff3cb0 	.word	0xffff3cb0
 8007b70:	4c000000 	.word	0x4c000000
 8007b74:	7149f2ca 	.word	0x7149f2ca
 8007b78:	f149f2ca 	.word	0xf149f2ca
 8007b7c:	0da24260 	.word	0x0da24260
 8007b80:	8da24260 	.word	0x8da24260
 8007b84:	33000000 	.word	0x33000000

08007b88 <atoi>:
 8007b88:	220a      	movs	r2, #10
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f000 bd68 	b.w	8008660 <strtol>

08007b90 <__errno>:
 8007b90:	4b01      	ldr	r3, [pc, #4]	; (8007b98 <__errno+0x8>)
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	2000001c 	.word	0x2000001c

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f002 ff9e 	bl	800aaf0 <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	0800b68c 	.word	0x0800b68c
 8007bd8:	0800b68c 	.word	0x0800b68c
 8007bdc:	0800b68c 	.word	0x0800b68c
 8007be0:	0800b690 	.word	0x0800b690

08007be4 <__itoa>:
 8007be4:	1e93      	subs	r3, r2, #2
 8007be6:	2b22      	cmp	r3, #34	; 0x22
 8007be8:	b510      	push	{r4, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	d904      	bls.n	8007bf8 <__itoa+0x14>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	700b      	strb	r3, [r1, #0]
 8007bf2:	461c      	mov	r4, r3
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	bd10      	pop	{r4, pc}
 8007bf8:	2a0a      	cmp	r2, #10
 8007bfa:	d109      	bne.n	8007c10 <__itoa+0x2c>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	da07      	bge.n	8007c10 <__itoa+0x2c>
 8007c00:	232d      	movs	r3, #45	; 0x2d
 8007c02:	700b      	strb	r3, [r1, #0]
 8007c04:	4240      	negs	r0, r0
 8007c06:	2101      	movs	r1, #1
 8007c08:	4421      	add	r1, r4
 8007c0a:	f000 fd33 	bl	8008674 <__utoa>
 8007c0e:	e7f1      	b.n	8007bf4 <__itoa+0x10>
 8007c10:	2100      	movs	r1, #0
 8007c12:	e7f9      	b.n	8007c08 <__itoa+0x24>

08007c14 <itoa>:
 8007c14:	f7ff bfe6 	b.w	8007be4 <__itoa>

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <memset>:
 8007c34:	4402      	add	r2, r0
 8007c36:	4603      	mov	r3, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d100      	bne.n	8007c3e <memset+0xa>
 8007c3c:	4770      	bx	lr
 8007c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c42:	e7f9      	b.n	8007c38 <memset+0x4>

08007c44 <__cvt>:
 8007c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	ec55 4b10 	vmov	r4, r5, d0
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	460e      	mov	r6, r1
 8007c50:	4619      	mov	r1, r3
 8007c52:	462b      	mov	r3, r5
 8007c54:	bfbb      	ittet	lt
 8007c56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c5a:	461d      	movlt	r5, r3
 8007c5c:	2300      	movge	r3, #0
 8007c5e:	232d      	movlt	r3, #45	; 0x2d
 8007c60:	700b      	strb	r3, [r1, #0]
 8007c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c68:	4691      	mov	r9, r2
 8007c6a:	f023 0820 	bic.w	r8, r3, #32
 8007c6e:	bfbc      	itt	lt
 8007c70:	4622      	movlt	r2, r4
 8007c72:	4614      	movlt	r4, r2
 8007c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c78:	d005      	beq.n	8007c86 <__cvt+0x42>
 8007c7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c7e:	d100      	bne.n	8007c82 <__cvt+0x3e>
 8007c80:	3601      	adds	r6, #1
 8007c82:	2102      	movs	r1, #2
 8007c84:	e000      	b.n	8007c88 <__cvt+0x44>
 8007c86:	2103      	movs	r1, #3
 8007c88:	ab03      	add	r3, sp, #12
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	ab02      	add	r3, sp, #8
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	ec45 4b10 	vmov	d0, r4, r5
 8007c94:	4653      	mov	r3, sl
 8007c96:	4632      	mov	r2, r6
 8007c98:	f000 fdba 	bl	8008810 <_dtoa_r>
 8007c9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	d102      	bne.n	8007caa <__cvt+0x66>
 8007ca4:	f019 0f01 	tst.w	r9, #1
 8007ca8:	d022      	beq.n	8007cf0 <__cvt+0xac>
 8007caa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cae:	eb07 0906 	add.w	r9, r7, r6
 8007cb2:	d110      	bne.n	8007cd6 <__cvt+0x92>
 8007cb4:	783b      	ldrb	r3, [r7, #0]
 8007cb6:	2b30      	cmp	r3, #48	; 0x30
 8007cb8:	d10a      	bne.n	8007cd0 <__cvt+0x8c>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 ff19 	bl	8000af8 <__aeabi_dcmpeq>
 8007cc6:	b918      	cbnz	r0, 8007cd0 <__cvt+0x8c>
 8007cc8:	f1c6 0601 	rsb	r6, r6, #1
 8007ccc:	f8ca 6000 	str.w	r6, [sl]
 8007cd0:	f8da 3000 	ldr.w	r3, [sl]
 8007cd4:	4499      	add	r9, r3
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 ff0b 	bl	8000af8 <__aeabi_dcmpeq>
 8007ce2:	b108      	cbz	r0, 8007ce8 <__cvt+0xa4>
 8007ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce8:	2230      	movs	r2, #48	; 0x30
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	454b      	cmp	r3, r9
 8007cee:	d307      	bcc.n	8007d00 <__cvt+0xbc>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cf4:	1bdb      	subs	r3, r3, r7
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	b004      	add	sp, #16
 8007cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d00:	1c59      	adds	r1, r3, #1
 8007d02:	9103      	str	r1, [sp, #12]
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e7f0      	b.n	8007cea <__cvt+0xa6>

08007d08 <__exponent>:
 8007d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	bfb8      	it	lt
 8007d10:	4249      	neglt	r1, r1
 8007d12:	f803 2b02 	strb.w	r2, [r3], #2
 8007d16:	bfb4      	ite	lt
 8007d18:	222d      	movlt	r2, #45	; 0x2d
 8007d1a:	222b      	movge	r2, #43	; 0x2b
 8007d1c:	2909      	cmp	r1, #9
 8007d1e:	7042      	strb	r2, [r0, #1]
 8007d20:	dd2a      	ble.n	8007d78 <__exponent+0x70>
 8007d22:	f10d 0407 	add.w	r4, sp, #7
 8007d26:	46a4      	mov	ip, r4
 8007d28:	270a      	movs	r7, #10
 8007d2a:	46a6      	mov	lr, r4
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d32:	fb07 1516 	mls	r5, r7, r6, r1
 8007d36:	3530      	adds	r5, #48	; 0x30
 8007d38:	2a63      	cmp	r2, #99	; 0x63
 8007d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d42:	4631      	mov	r1, r6
 8007d44:	dcf1      	bgt.n	8007d2a <__exponent+0x22>
 8007d46:	3130      	adds	r1, #48	; 0x30
 8007d48:	f1ae 0502 	sub.w	r5, lr, #2
 8007d4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d50:	1c44      	adds	r4, r0, #1
 8007d52:	4629      	mov	r1, r5
 8007d54:	4561      	cmp	r1, ip
 8007d56:	d30a      	bcc.n	8007d6e <__exponent+0x66>
 8007d58:	f10d 0209 	add.w	r2, sp, #9
 8007d5c:	eba2 020e 	sub.w	r2, r2, lr
 8007d60:	4565      	cmp	r5, ip
 8007d62:	bf88      	it	hi
 8007d64:	2200      	movhi	r2, #0
 8007d66:	4413      	add	r3, r2
 8007d68:	1a18      	subs	r0, r3, r0
 8007d6a:	b003      	add	sp, #12
 8007d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d76:	e7ed      	b.n	8007d54 <__exponent+0x4c>
 8007d78:	2330      	movs	r3, #48	; 0x30
 8007d7a:	3130      	adds	r1, #48	; 0x30
 8007d7c:	7083      	strb	r3, [r0, #2]
 8007d7e:	70c1      	strb	r1, [r0, #3]
 8007d80:	1d03      	adds	r3, r0, #4
 8007d82:	e7f1      	b.n	8007d68 <__exponent+0x60>

08007d84 <_printf_float>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	ed2d 8b02 	vpush	{d8}
 8007d8c:	b08d      	sub	sp, #52	; 0x34
 8007d8e:	460c      	mov	r4, r1
 8007d90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d94:	4616      	mov	r6, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	4605      	mov	r5, r0
 8007d9a:	f001 fb25 	bl	80093e8 <_localeconv_r>
 8007d9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007da2:	4650      	mov	r0, sl
 8007da4:	f7f8 fa26 	bl	80001f4 <strlen>
 8007da8:	2300      	movs	r3, #0
 8007daa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	9305      	str	r3, [sp, #20]
 8007db0:	f8d8 3000 	ldr.w	r3, [r8]
 8007db4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007db8:	3307      	adds	r3, #7
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	f103 0208 	add.w	r2, r3, #8
 8007dc2:	f8c8 2000 	str.w	r2, [r8]
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ddc:	ee08 0a10 	vmov	s16, r0
 8007de0:	4b9f      	ldr	r3, [pc, #636]	; (8008060 <_printf_float+0x2dc>)
 8007de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	f7f8 feb7 	bl	8000b5c <__aeabi_dcmpun>
 8007dee:	bb88      	cbnz	r0, 8007e54 <_printf_float+0xd0>
 8007df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df4:	4b9a      	ldr	r3, [pc, #616]	; (8008060 <_printf_float+0x2dc>)
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	f7f8 fe91 	bl	8000b20 <__aeabi_dcmple>
 8007dfe:	bb48      	cbnz	r0, 8007e54 <_printf_float+0xd0>
 8007e00:	2200      	movs	r2, #0
 8007e02:	2300      	movs	r3, #0
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	f7f8 fe80 	bl	8000b0c <__aeabi_dcmplt>
 8007e0c:	b110      	cbz	r0, 8007e14 <_printf_float+0x90>
 8007e0e:	232d      	movs	r3, #45	; 0x2d
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e14:	4b93      	ldr	r3, [pc, #588]	; (8008064 <_printf_float+0x2e0>)
 8007e16:	4894      	ldr	r0, [pc, #592]	; (8008068 <_printf_float+0x2e4>)
 8007e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e1c:	bf94      	ite	ls
 8007e1e:	4698      	movls	r8, r3
 8007e20:	4680      	movhi	r8, r0
 8007e22:	2303      	movs	r3, #3
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	9b05      	ldr	r3, [sp, #20]
 8007e28:	f023 0204 	bic.w	r2, r3, #4
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	f04f 0900 	mov.w	r9, #0
 8007e32:	9700      	str	r7, [sp, #0]
 8007e34:	4633      	mov	r3, r6
 8007e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 f9d8 	bl	80081f0 <_printf_common>
 8007e40:	3001      	adds	r0, #1
 8007e42:	f040 8090 	bne.w	8007f66 <_printf_float+0x1e2>
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	b00d      	add	sp, #52	; 0x34
 8007e4c:	ecbd 8b02 	vpop	{d8}
 8007e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e54:	4642      	mov	r2, r8
 8007e56:	464b      	mov	r3, r9
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fe7e 	bl	8000b5c <__aeabi_dcmpun>
 8007e60:	b140      	cbz	r0, 8007e74 <_printf_float+0xf0>
 8007e62:	464b      	mov	r3, r9
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bfbc      	itt	lt
 8007e68:	232d      	movlt	r3, #45	; 0x2d
 8007e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e6e:	487f      	ldr	r0, [pc, #508]	; (800806c <_printf_float+0x2e8>)
 8007e70:	4b7f      	ldr	r3, [pc, #508]	; (8008070 <_printf_float+0x2ec>)
 8007e72:	e7d1      	b.n	8007e18 <_printf_float+0x94>
 8007e74:	6863      	ldr	r3, [r4, #4]
 8007e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e7a:	9206      	str	r2, [sp, #24]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	d13f      	bne.n	8007f00 <_printf_float+0x17c>
 8007e80:	2306      	movs	r3, #6
 8007e82:	6063      	str	r3, [r4, #4]
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	6861      	ldr	r1, [r4, #4]
 8007e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	ab0a      	add	r3, sp, #40	; 0x28
 8007e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e96:	ab09      	add	r3, sp, #36	; 0x24
 8007e98:	ec49 8b10 	vmov	d0, r8, r9
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f7ff fecd 	bl	8007c44 <__cvt>
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eae:	2b47      	cmp	r3, #71	; 0x47
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	d108      	bne.n	8007ec6 <_printf_float+0x142>
 8007eb4:	1cc8      	adds	r0, r1, #3
 8007eb6:	db02      	blt.n	8007ebe <_printf_float+0x13a>
 8007eb8:	6863      	ldr	r3, [r4, #4]
 8007eba:	4299      	cmp	r1, r3
 8007ebc:	dd41      	ble.n	8007f42 <_printf_float+0x1be>
 8007ebe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ec2:	fa5f fb8b 	uxtb.w	fp, fp
 8007ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007eca:	d820      	bhi.n	8007f0e <_printf_float+0x18a>
 8007ecc:	3901      	subs	r1, #1
 8007ece:	465a      	mov	r2, fp
 8007ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ed6:	f7ff ff17 	bl	8007d08 <__exponent>
 8007eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007edc:	1813      	adds	r3, r2, r0
 8007ede:	2a01      	cmp	r2, #1
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	dc02      	bgt.n	8007eec <_printf_float+0x168>
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	07d2      	lsls	r2, r2, #31
 8007eea:	d501      	bpl.n	8007ef0 <_printf_float+0x16c>
 8007eec:	3301      	adds	r3, #1
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d09c      	beq.n	8007e32 <_printf_float+0xae>
 8007ef8:	232d      	movs	r3, #45	; 0x2d
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efe:	e798      	b.n	8007e32 <_printf_float+0xae>
 8007f00:	9a06      	ldr	r2, [sp, #24]
 8007f02:	2a47      	cmp	r2, #71	; 0x47
 8007f04:	d1be      	bne.n	8007e84 <_printf_float+0x100>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1bc      	bne.n	8007e84 <_printf_float+0x100>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e7b9      	b.n	8007e82 <_printf_float+0xfe>
 8007f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f12:	d118      	bne.n	8007f46 <_printf_float+0x1c2>
 8007f14:	2900      	cmp	r1, #0
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	dd0b      	ble.n	8007f32 <_printf_float+0x1ae>
 8007f1a:	6121      	str	r1, [r4, #16]
 8007f1c:	b913      	cbnz	r3, 8007f24 <_printf_float+0x1a0>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	07d0      	lsls	r0, r2, #31
 8007f22:	d502      	bpl.n	8007f2a <_printf_float+0x1a6>
 8007f24:	3301      	adds	r3, #1
 8007f26:	440b      	add	r3, r1
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f2c:	f04f 0900 	mov.w	r9, #0
 8007f30:	e7de      	b.n	8007ef0 <_printf_float+0x16c>
 8007f32:	b913      	cbnz	r3, 8007f3a <_printf_float+0x1b6>
 8007f34:	6822      	ldr	r2, [r4, #0]
 8007f36:	07d2      	lsls	r2, r2, #31
 8007f38:	d501      	bpl.n	8007f3e <_printf_float+0x1ba>
 8007f3a:	3302      	adds	r3, #2
 8007f3c:	e7f4      	b.n	8007f28 <_printf_float+0x1a4>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7f2      	b.n	8007f28 <_printf_float+0x1a4>
 8007f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	db05      	blt.n	8007f58 <_printf_float+0x1d4>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	6121      	str	r1, [r4, #16]
 8007f50:	07d8      	lsls	r0, r3, #31
 8007f52:	d5ea      	bpl.n	8007f2a <_printf_float+0x1a6>
 8007f54:	1c4b      	adds	r3, r1, #1
 8007f56:	e7e7      	b.n	8007f28 <_printf_float+0x1a4>
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	bfd4      	ite	le
 8007f5c:	f1c1 0202 	rsble	r2, r1, #2
 8007f60:	2201      	movgt	r2, #1
 8007f62:	4413      	add	r3, r2
 8007f64:	e7e0      	b.n	8007f28 <_printf_float+0x1a4>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	055a      	lsls	r2, r3, #21
 8007f6a:	d407      	bmi.n	8007f7c <_printf_float+0x1f8>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	4642      	mov	r2, r8
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	d12c      	bne.n	8007fd4 <_printf_float+0x250>
 8007f7a:	e764      	b.n	8007e46 <_printf_float+0xc2>
 8007f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f80:	f240 80e0 	bls.w	8008144 <_printf_float+0x3c0>
 8007f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f7f8 fdb4 	bl	8000af8 <__aeabi_dcmpeq>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d034      	beq.n	8007ffe <_printf_float+0x27a>
 8007f94:	4a37      	ldr	r2, [pc, #220]	; (8008074 <_printf_float+0x2f0>)
 8007f96:	2301      	movs	r3, #1
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f43f af51 	beq.w	8007e46 <_printf_float+0xc2>
 8007fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	db02      	blt.n	8007fb2 <_printf_float+0x22e>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	07d8      	lsls	r0, r3, #31
 8007fb0:	d510      	bpl.n	8007fd4 <_printf_float+0x250>
 8007fb2:	ee18 3a10 	vmov	r3, s16
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af41 	beq.w	8007e46 <_printf_float+0xc2>
 8007fc4:	f04f 0800 	mov.w	r8, #0
 8007fc8:	f104 091a 	add.w	r9, r4, #26
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	dc09      	bgt.n	8007fe8 <_printf_float+0x264>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	079b      	lsls	r3, r3, #30
 8007fd8:	f100 8105 	bmi.w	80081e6 <_printf_float+0x462>
 8007fdc:	68e0      	ldr	r0, [r4, #12]
 8007fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe0:	4298      	cmp	r0, r3
 8007fe2:	bfb8      	it	lt
 8007fe4:	4618      	movlt	r0, r3
 8007fe6:	e730      	b.n	8007e4a <_printf_float+0xc6>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	464a      	mov	r2, r9
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f af27 	beq.w	8007e46 <_printf_float+0xc2>
 8007ff8:	f108 0801 	add.w	r8, r8, #1
 8007ffc:	e7e6      	b.n	8007fcc <_printf_float+0x248>
 8007ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc39      	bgt.n	8008078 <_printf_float+0x2f4>
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <_printf_float+0x2f0>)
 8008006:	2301      	movs	r3, #1
 8008008:	4631      	mov	r1, r6
 800800a:	4628      	mov	r0, r5
 800800c:	47b8      	blx	r7
 800800e:	3001      	adds	r0, #1
 8008010:	f43f af19 	beq.w	8007e46 <_printf_float+0xc2>
 8008014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008018:	4313      	orrs	r3, r2
 800801a:	d102      	bne.n	8008022 <_printf_float+0x29e>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d5d8      	bpl.n	8007fd4 <_printf_float+0x250>
 8008022:	ee18 3a10 	vmov	r3, s16
 8008026:	4652      	mov	r2, sl
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f af09 	beq.w	8007e46 <_printf_float+0xc2>
 8008034:	f04f 0900 	mov.w	r9, #0
 8008038:	f104 0a1a 	add.w	sl, r4, #26
 800803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803e:	425b      	negs	r3, r3
 8008040:	454b      	cmp	r3, r9
 8008042:	dc01      	bgt.n	8008048 <_printf_float+0x2c4>
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	e792      	b.n	8007f6e <_printf_float+0x1ea>
 8008048:	2301      	movs	r3, #1
 800804a:	4652      	mov	r2, sl
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	f43f aef7 	beq.w	8007e46 <_printf_float+0xc2>
 8008058:	f109 0901 	add.w	r9, r9, #1
 800805c:	e7ee      	b.n	800803c <_printf_float+0x2b8>
 800805e:	bf00      	nop
 8008060:	7fefffff 	.word	0x7fefffff
 8008064:	0800b27c 	.word	0x0800b27c
 8008068:	0800b280 	.word	0x0800b280
 800806c:	0800b288 	.word	0x0800b288
 8008070:	0800b284 	.word	0x0800b284
 8008074:	0800b28c 	.word	0x0800b28c
 8008078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800807a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800807c:	429a      	cmp	r2, r3
 800807e:	bfa8      	it	ge
 8008080:	461a      	movge	r2, r3
 8008082:	2a00      	cmp	r2, #0
 8008084:	4691      	mov	r9, r2
 8008086:	dc37      	bgt.n	80080f8 <_printf_float+0x374>
 8008088:	f04f 0b00 	mov.w	fp, #0
 800808c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008090:	f104 021a 	add.w	r2, r4, #26
 8008094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	eba3 0309 	sub.w	r3, r3, r9
 800809c:	455b      	cmp	r3, fp
 800809e:	dc33      	bgt.n	8008108 <_printf_float+0x384>
 80080a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a4:	429a      	cmp	r2, r3
 80080a6:	db3b      	blt.n	8008120 <_printf_float+0x39c>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	07da      	lsls	r2, r3, #31
 80080ac:	d438      	bmi.n	8008120 <_printf_float+0x39c>
 80080ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b0:	9b05      	ldr	r3, [sp, #20]
 80080b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	eba2 0901 	sub.w	r9, r2, r1
 80080ba:	4599      	cmp	r9, r3
 80080bc:	bfa8      	it	ge
 80080be:	4699      	movge	r9, r3
 80080c0:	f1b9 0f00 	cmp.w	r9, #0
 80080c4:	dc35      	bgt.n	8008132 <_printf_float+0x3ae>
 80080c6:	f04f 0800 	mov.w	r8, #0
 80080ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080ce:	f104 0a1a 	add.w	sl, r4, #26
 80080d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	eba3 0309 	sub.w	r3, r3, r9
 80080dc:	4543      	cmp	r3, r8
 80080de:	f77f af79 	ble.w	8007fd4 <_printf_float+0x250>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4652      	mov	r2, sl
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f aeaa 	beq.w	8007e46 <_printf_float+0xc2>
 80080f2:	f108 0801 	add.w	r8, r8, #1
 80080f6:	e7ec      	b.n	80080d2 <_printf_float+0x34e>
 80080f8:	4613      	mov	r3, r2
 80080fa:	4631      	mov	r1, r6
 80080fc:	4642      	mov	r2, r8
 80080fe:	4628      	mov	r0, r5
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	d1c0      	bne.n	8008088 <_printf_float+0x304>
 8008106:	e69e      	b.n	8007e46 <_printf_float+0xc2>
 8008108:	2301      	movs	r3, #1
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	9205      	str	r2, [sp, #20]
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f ae97 	beq.w	8007e46 <_printf_float+0xc2>
 8008118:	9a05      	ldr	r2, [sp, #20]
 800811a:	f10b 0b01 	add.w	fp, fp, #1
 800811e:	e7b9      	b.n	8008094 <_printf_float+0x310>
 8008120:	ee18 3a10 	vmov	r3, s16
 8008124:	4652      	mov	r2, sl
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	d1be      	bne.n	80080ae <_printf_float+0x32a>
 8008130:	e689      	b.n	8007e46 <_printf_float+0xc2>
 8008132:	9a05      	ldr	r2, [sp, #20]
 8008134:	464b      	mov	r3, r9
 8008136:	4442      	add	r2, r8
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	d1c1      	bne.n	80080c6 <_printf_float+0x342>
 8008142:	e680      	b.n	8007e46 <_printf_float+0xc2>
 8008144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008146:	2a01      	cmp	r2, #1
 8008148:	dc01      	bgt.n	800814e <_printf_float+0x3ca>
 800814a:	07db      	lsls	r3, r3, #31
 800814c:	d538      	bpl.n	80081c0 <_printf_float+0x43c>
 800814e:	2301      	movs	r3, #1
 8008150:	4642      	mov	r2, r8
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	f43f ae74 	beq.w	8007e46 <_printf_float+0xc2>
 800815e:	ee18 3a10 	vmov	r3, s16
 8008162:	4652      	mov	r2, sl
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f ae6b 	beq.w	8007e46 <_printf_float+0xc2>
 8008170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008174:	2200      	movs	r2, #0
 8008176:	2300      	movs	r3, #0
 8008178:	f7f8 fcbe 	bl	8000af8 <__aeabi_dcmpeq>
 800817c:	b9d8      	cbnz	r0, 80081b6 <_printf_float+0x432>
 800817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008180:	f108 0201 	add.w	r2, r8, #1
 8008184:	3b01      	subs	r3, #1
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	d10e      	bne.n	80081ae <_printf_float+0x42a>
 8008190:	e659      	b.n	8007e46 <_printf_float+0xc2>
 8008192:	2301      	movs	r3, #1
 8008194:	4652      	mov	r2, sl
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	f43f ae52 	beq.w	8007e46 <_printf_float+0xc2>
 80081a2:	f108 0801 	add.w	r8, r8, #1
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	3b01      	subs	r3, #1
 80081aa:	4543      	cmp	r3, r8
 80081ac:	dcf1      	bgt.n	8008192 <_printf_float+0x40e>
 80081ae:	464b      	mov	r3, r9
 80081b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081b4:	e6dc      	b.n	8007f70 <_printf_float+0x1ec>
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	f104 0a1a 	add.w	sl, r4, #26
 80081be:	e7f2      	b.n	80081a6 <_printf_float+0x422>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4642      	mov	r2, r8
 80081c4:	e7df      	b.n	8008186 <_printf_float+0x402>
 80081c6:	2301      	movs	r3, #1
 80081c8:	464a      	mov	r2, r9
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	f43f ae38 	beq.w	8007e46 <_printf_float+0xc2>
 80081d6:	f108 0801 	add.w	r8, r8, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	4543      	cmp	r3, r8
 80081e2:	dcf0      	bgt.n	80081c6 <_printf_float+0x442>
 80081e4:	e6fa      	b.n	8007fdc <_printf_float+0x258>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	f104 0919 	add.w	r9, r4, #25
 80081ee:	e7f4      	b.n	80081da <_printf_float+0x456>

080081f0 <_printf_common>:
 80081f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f4:	4616      	mov	r6, r2
 80081f6:	4699      	mov	r9, r3
 80081f8:	688a      	ldr	r2, [r1, #8]
 80081fa:	690b      	ldr	r3, [r1, #16]
 80081fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008200:	4293      	cmp	r3, r2
 8008202:	bfb8      	it	lt
 8008204:	4613      	movlt	r3, r2
 8008206:	6033      	str	r3, [r6, #0]
 8008208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800820c:	4607      	mov	r7, r0
 800820e:	460c      	mov	r4, r1
 8008210:	b10a      	cbz	r2, 8008216 <_printf_common+0x26>
 8008212:	3301      	adds	r3, #1
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	0699      	lsls	r1, r3, #26
 800821a:	bf42      	ittt	mi
 800821c:	6833      	ldrmi	r3, [r6, #0]
 800821e:	3302      	addmi	r3, #2
 8008220:	6033      	strmi	r3, [r6, #0]
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	f015 0506 	ands.w	r5, r5, #6
 8008228:	d106      	bne.n	8008238 <_printf_common+0x48>
 800822a:	f104 0a19 	add.w	sl, r4, #25
 800822e:	68e3      	ldr	r3, [r4, #12]
 8008230:	6832      	ldr	r2, [r6, #0]
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	42ab      	cmp	r3, r5
 8008236:	dc26      	bgt.n	8008286 <_printf_common+0x96>
 8008238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800823c:	1e13      	subs	r3, r2, #0
 800823e:	6822      	ldr	r2, [r4, #0]
 8008240:	bf18      	it	ne
 8008242:	2301      	movne	r3, #1
 8008244:	0692      	lsls	r2, r2, #26
 8008246:	d42b      	bmi.n	80082a0 <_printf_common+0xb0>
 8008248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800824c:	4649      	mov	r1, r9
 800824e:	4638      	mov	r0, r7
 8008250:	47c0      	blx	r8
 8008252:	3001      	adds	r0, #1
 8008254:	d01e      	beq.n	8008294 <_printf_common+0xa4>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	68e5      	ldr	r5, [r4, #12]
 800825a:	6832      	ldr	r2, [r6, #0]
 800825c:	f003 0306 	and.w	r3, r3, #6
 8008260:	2b04      	cmp	r3, #4
 8008262:	bf08      	it	eq
 8008264:	1aad      	subeq	r5, r5, r2
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	bf0c      	ite	eq
 800826c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008270:	2500      	movne	r5, #0
 8008272:	4293      	cmp	r3, r2
 8008274:	bfc4      	itt	gt
 8008276:	1a9b      	subgt	r3, r3, r2
 8008278:	18ed      	addgt	r5, r5, r3
 800827a:	2600      	movs	r6, #0
 800827c:	341a      	adds	r4, #26
 800827e:	42b5      	cmp	r5, r6
 8008280:	d11a      	bne.n	80082b8 <_printf_common+0xc8>
 8008282:	2000      	movs	r0, #0
 8008284:	e008      	b.n	8008298 <_printf_common+0xa8>
 8008286:	2301      	movs	r3, #1
 8008288:	4652      	mov	r2, sl
 800828a:	4649      	mov	r1, r9
 800828c:	4638      	mov	r0, r7
 800828e:	47c0      	blx	r8
 8008290:	3001      	adds	r0, #1
 8008292:	d103      	bne.n	800829c <_printf_common+0xac>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829c:	3501      	adds	r5, #1
 800829e:	e7c6      	b.n	800822e <_printf_common+0x3e>
 80082a0:	18e1      	adds	r1, r4, r3
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	2030      	movs	r0, #48	; 0x30
 80082a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082aa:	4422      	add	r2, r4
 80082ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082b4:	3302      	adds	r3, #2
 80082b6:	e7c7      	b.n	8008248 <_printf_common+0x58>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4622      	mov	r2, r4
 80082bc:	4649      	mov	r1, r9
 80082be:	4638      	mov	r0, r7
 80082c0:	47c0      	blx	r8
 80082c2:	3001      	adds	r0, #1
 80082c4:	d0e6      	beq.n	8008294 <_printf_common+0xa4>
 80082c6:	3601      	adds	r6, #1
 80082c8:	e7d9      	b.n	800827e <_printf_common+0x8e>
	...

080082cc <_printf_i>:
 80082cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	460c      	mov	r4, r1
 80082d2:	4691      	mov	r9, r2
 80082d4:	7e27      	ldrb	r7, [r4, #24]
 80082d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082d8:	2f78      	cmp	r7, #120	; 0x78
 80082da:	4680      	mov	r8, r0
 80082dc:	469a      	mov	sl, r3
 80082de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e2:	d807      	bhi.n	80082f4 <_printf_i+0x28>
 80082e4:	2f62      	cmp	r7, #98	; 0x62
 80082e6:	d80a      	bhi.n	80082fe <_printf_i+0x32>
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	f000 80d8 	beq.w	800849e <_printf_i+0x1d2>
 80082ee:	2f58      	cmp	r7, #88	; 0x58
 80082f0:	f000 80a3 	beq.w	800843a <_printf_i+0x16e>
 80082f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082fc:	e03a      	b.n	8008374 <_printf_i+0xa8>
 80082fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008302:	2b15      	cmp	r3, #21
 8008304:	d8f6      	bhi.n	80082f4 <_printf_i+0x28>
 8008306:	a001      	add	r0, pc, #4	; (adr r0, 800830c <_printf_i+0x40>)
 8008308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800830c:	08008365 	.word	0x08008365
 8008310:	08008379 	.word	0x08008379
 8008314:	080082f5 	.word	0x080082f5
 8008318:	080082f5 	.word	0x080082f5
 800831c:	080082f5 	.word	0x080082f5
 8008320:	080082f5 	.word	0x080082f5
 8008324:	08008379 	.word	0x08008379
 8008328:	080082f5 	.word	0x080082f5
 800832c:	080082f5 	.word	0x080082f5
 8008330:	080082f5 	.word	0x080082f5
 8008334:	080082f5 	.word	0x080082f5
 8008338:	08008485 	.word	0x08008485
 800833c:	080083a9 	.word	0x080083a9
 8008340:	08008467 	.word	0x08008467
 8008344:	080082f5 	.word	0x080082f5
 8008348:	080082f5 	.word	0x080082f5
 800834c:	080084a7 	.word	0x080084a7
 8008350:	080082f5 	.word	0x080082f5
 8008354:	080083a9 	.word	0x080083a9
 8008358:	080082f5 	.word	0x080082f5
 800835c:	080082f5 	.word	0x080082f5
 8008360:	0800846f 	.word	0x0800846f
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	600a      	str	r2, [r1, #0]
 800836c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008374:	2301      	movs	r3, #1
 8008376:	e0a3      	b.n	80084c0 <_printf_i+0x1f4>
 8008378:	6825      	ldr	r5, [r4, #0]
 800837a:	6808      	ldr	r0, [r1, #0]
 800837c:	062e      	lsls	r6, r5, #24
 800837e:	f100 0304 	add.w	r3, r0, #4
 8008382:	d50a      	bpl.n	800839a <_printf_i+0xce>
 8008384:	6805      	ldr	r5, [r0, #0]
 8008386:	600b      	str	r3, [r1, #0]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xc8>
 800838c:	232d      	movs	r3, #45	; 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008394:	485e      	ldr	r0, [pc, #376]	; (8008510 <_printf_i+0x244>)
 8008396:	230a      	movs	r3, #10
 8008398:	e019      	b.n	80083ce <_printf_i+0x102>
 800839a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800839e:	6805      	ldr	r5, [r0, #0]
 80083a0:	600b      	str	r3, [r1, #0]
 80083a2:	bf18      	it	ne
 80083a4:	b22d      	sxthne	r5, r5
 80083a6:	e7ef      	b.n	8008388 <_printf_i+0xbc>
 80083a8:	680b      	ldr	r3, [r1, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	1d18      	adds	r0, r3, #4
 80083ae:	6008      	str	r0, [r1, #0]
 80083b0:	0628      	lsls	r0, r5, #24
 80083b2:	d501      	bpl.n	80083b8 <_printf_i+0xec>
 80083b4:	681d      	ldr	r5, [r3, #0]
 80083b6:	e002      	b.n	80083be <_printf_i+0xf2>
 80083b8:	0669      	lsls	r1, r5, #25
 80083ba:	d5fb      	bpl.n	80083b4 <_printf_i+0xe8>
 80083bc:	881d      	ldrh	r5, [r3, #0]
 80083be:	4854      	ldr	r0, [pc, #336]	; (8008510 <_printf_i+0x244>)
 80083c0:	2f6f      	cmp	r7, #111	; 0x6f
 80083c2:	bf0c      	ite	eq
 80083c4:	2308      	moveq	r3, #8
 80083c6:	230a      	movne	r3, #10
 80083c8:	2100      	movs	r1, #0
 80083ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ce:	6866      	ldr	r6, [r4, #4]
 80083d0:	60a6      	str	r6, [r4, #8]
 80083d2:	2e00      	cmp	r6, #0
 80083d4:	bfa2      	ittt	ge
 80083d6:	6821      	ldrge	r1, [r4, #0]
 80083d8:	f021 0104 	bicge.w	r1, r1, #4
 80083dc:	6021      	strge	r1, [r4, #0]
 80083de:	b90d      	cbnz	r5, 80083e4 <_printf_i+0x118>
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	d04d      	beq.n	8008480 <_printf_i+0x1b4>
 80083e4:	4616      	mov	r6, r2
 80083e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ea:	fb03 5711 	mls	r7, r3, r1, r5
 80083ee:	5dc7      	ldrb	r7, [r0, r7]
 80083f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083f4:	462f      	mov	r7, r5
 80083f6:	42bb      	cmp	r3, r7
 80083f8:	460d      	mov	r5, r1
 80083fa:	d9f4      	bls.n	80083e6 <_printf_i+0x11a>
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d10b      	bne.n	8008418 <_printf_i+0x14c>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	07df      	lsls	r7, r3, #31
 8008404:	d508      	bpl.n	8008418 <_printf_i+0x14c>
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	6861      	ldr	r1, [r4, #4]
 800840a:	4299      	cmp	r1, r3
 800840c:	bfde      	ittt	le
 800840e:	2330      	movle	r3, #48	; 0x30
 8008410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008418:	1b92      	subs	r2, r2, r6
 800841a:	6122      	str	r2, [r4, #16]
 800841c:	f8cd a000 	str.w	sl, [sp]
 8008420:	464b      	mov	r3, r9
 8008422:	aa03      	add	r2, sp, #12
 8008424:	4621      	mov	r1, r4
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff fee2 	bl	80081f0 <_printf_common>
 800842c:	3001      	adds	r0, #1
 800842e:	d14c      	bne.n	80084ca <_printf_i+0x1fe>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	b004      	add	sp, #16
 8008436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843a:	4835      	ldr	r0, [pc, #212]	; (8008510 <_printf_i+0x244>)
 800843c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	680e      	ldr	r6, [r1, #0]
 8008444:	061f      	lsls	r7, r3, #24
 8008446:	f856 5b04 	ldr.w	r5, [r6], #4
 800844a:	600e      	str	r6, [r1, #0]
 800844c:	d514      	bpl.n	8008478 <_printf_i+0x1ac>
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	bf44      	itt	mi
 8008452:	f043 0320 	orrmi.w	r3, r3, #32
 8008456:	6023      	strmi	r3, [r4, #0]
 8008458:	b91d      	cbnz	r5, 8008462 <_printf_i+0x196>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	f023 0320 	bic.w	r3, r3, #32
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	2310      	movs	r3, #16
 8008464:	e7b0      	b.n	80083c8 <_printf_i+0xfc>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f043 0320 	orr.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	2378      	movs	r3, #120	; 0x78
 8008470:	4828      	ldr	r0, [pc, #160]	; (8008514 <_printf_i+0x248>)
 8008472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008476:	e7e3      	b.n	8008440 <_printf_i+0x174>
 8008478:	065e      	lsls	r6, r3, #25
 800847a:	bf48      	it	mi
 800847c:	b2ad      	uxthmi	r5, r5
 800847e:	e7e6      	b.n	800844e <_printf_i+0x182>
 8008480:	4616      	mov	r6, r2
 8008482:	e7bb      	b.n	80083fc <_printf_i+0x130>
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	6826      	ldr	r6, [r4, #0]
 8008488:	6960      	ldr	r0, [r4, #20]
 800848a:	1d1d      	adds	r5, r3, #4
 800848c:	600d      	str	r5, [r1, #0]
 800848e:	0635      	lsls	r5, r6, #24
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	d501      	bpl.n	8008498 <_printf_i+0x1cc>
 8008494:	6018      	str	r0, [r3, #0]
 8008496:	e002      	b.n	800849e <_printf_i+0x1d2>
 8008498:	0671      	lsls	r1, r6, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0x1c8>
 800849c:	8018      	strh	r0, [r3, #0]
 800849e:	2300      	movs	r3, #0
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	4616      	mov	r6, r2
 80084a4:	e7ba      	b.n	800841c <_printf_i+0x150>
 80084a6:	680b      	ldr	r3, [r1, #0]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	600a      	str	r2, [r1, #0]
 80084ac:	681e      	ldr	r6, [r3, #0]
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	2100      	movs	r1, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7f7 feac 	bl	8000210 <memchr>
 80084b8:	b108      	cbz	r0, 80084be <_printf_i+0x1f2>
 80084ba:	1b80      	subs	r0, r0, r6
 80084bc:	6060      	str	r0, [r4, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	2300      	movs	r3, #0
 80084c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c8:	e7a8      	b.n	800841c <_printf_i+0x150>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	4632      	mov	r2, r6
 80084ce:	4649      	mov	r1, r9
 80084d0:	4640      	mov	r0, r8
 80084d2:	47d0      	blx	sl
 80084d4:	3001      	adds	r0, #1
 80084d6:	d0ab      	beq.n	8008430 <_printf_i+0x164>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	079b      	lsls	r3, r3, #30
 80084dc:	d413      	bmi.n	8008506 <_printf_i+0x23a>
 80084de:	68e0      	ldr	r0, [r4, #12]
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfb8      	it	lt
 80084e6:	4618      	movlt	r0, r3
 80084e8:	e7a4      	b.n	8008434 <_printf_i+0x168>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4632      	mov	r2, r6
 80084ee:	4649      	mov	r1, r9
 80084f0:	4640      	mov	r0, r8
 80084f2:	47d0      	blx	sl
 80084f4:	3001      	adds	r0, #1
 80084f6:	d09b      	beq.n	8008430 <_printf_i+0x164>
 80084f8:	3501      	adds	r5, #1
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	9903      	ldr	r1, [sp, #12]
 80084fe:	1a5b      	subs	r3, r3, r1
 8008500:	42ab      	cmp	r3, r5
 8008502:	dcf2      	bgt.n	80084ea <_printf_i+0x21e>
 8008504:	e7eb      	b.n	80084de <_printf_i+0x212>
 8008506:	2500      	movs	r5, #0
 8008508:	f104 0619 	add.w	r6, r4, #25
 800850c:	e7f5      	b.n	80084fa <_printf_i+0x22e>
 800850e:	bf00      	nop
 8008510:	0800b28e 	.word	0x0800b28e
 8008514:	0800b29f 	.word	0x0800b29f

08008518 <siprintf>:
 8008518:	b40e      	push	{r1, r2, r3}
 800851a:	b500      	push	{lr}
 800851c:	b09c      	sub	sp, #112	; 0x70
 800851e:	ab1d      	add	r3, sp, #116	; 0x74
 8008520:	9002      	str	r0, [sp, #8]
 8008522:	9006      	str	r0, [sp, #24]
 8008524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008528:	4809      	ldr	r0, [pc, #36]	; (8008550 <siprintf+0x38>)
 800852a:	9107      	str	r1, [sp, #28]
 800852c:	9104      	str	r1, [sp, #16]
 800852e:	4909      	ldr	r1, [pc, #36]	; (8008554 <siprintf+0x3c>)
 8008530:	f853 2b04 	ldr.w	r2, [r3], #4
 8008534:	9105      	str	r1, [sp, #20]
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	a902      	add	r1, sp, #8
 800853c:	f001 fbf4 	bl	8009d28 <_svfiprintf_r>
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	b01c      	add	sp, #112	; 0x70
 8008548:	f85d eb04 	ldr.w	lr, [sp], #4
 800854c:	b003      	add	sp, #12
 800854e:	4770      	bx	lr
 8008550:	2000001c 	.word	0x2000001c
 8008554:	ffff0208 	.word	0xffff0208

08008558 <_strtol_l.isra.0>:
 8008558:	2b01      	cmp	r3, #1
 800855a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855e:	d001      	beq.n	8008564 <_strtol_l.isra.0+0xc>
 8008560:	2b24      	cmp	r3, #36	; 0x24
 8008562:	d906      	bls.n	8008572 <_strtol_l.isra.0+0x1a>
 8008564:	f7ff fb14 	bl	8007b90 <__errno>
 8008568:	2316      	movs	r3, #22
 800856a:	6003      	str	r3, [r0, #0]
 800856c:	2000      	movs	r0, #0
 800856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008572:	4f3a      	ldr	r7, [pc, #232]	; (800865c <_strtol_l.isra.0+0x104>)
 8008574:	468e      	mov	lr, r1
 8008576:	4676      	mov	r6, lr
 8008578:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800857c:	5de5      	ldrb	r5, [r4, r7]
 800857e:	f015 0508 	ands.w	r5, r5, #8
 8008582:	d1f8      	bne.n	8008576 <_strtol_l.isra.0+0x1e>
 8008584:	2c2d      	cmp	r4, #45	; 0x2d
 8008586:	d134      	bne.n	80085f2 <_strtol_l.isra.0+0x9a>
 8008588:	f89e 4000 	ldrb.w	r4, [lr]
 800858c:	f04f 0801 	mov.w	r8, #1
 8008590:	f106 0e02 	add.w	lr, r6, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05c      	beq.n	8008652 <_strtol_l.isra.0+0xfa>
 8008598:	2b10      	cmp	r3, #16
 800859a:	d10c      	bne.n	80085b6 <_strtol_l.isra.0+0x5e>
 800859c:	2c30      	cmp	r4, #48	; 0x30
 800859e:	d10a      	bne.n	80085b6 <_strtol_l.isra.0+0x5e>
 80085a0:	f89e 4000 	ldrb.w	r4, [lr]
 80085a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085a8:	2c58      	cmp	r4, #88	; 0x58
 80085aa:	d14d      	bne.n	8008648 <_strtol_l.isra.0+0xf0>
 80085ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80085b0:	2310      	movs	r3, #16
 80085b2:	f10e 0e02 	add.w	lr, lr, #2
 80085b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80085ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085be:	2600      	movs	r6, #0
 80085c0:	fbbc f9f3 	udiv	r9, ip, r3
 80085c4:	4635      	mov	r5, r6
 80085c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80085ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80085ce:	2f09      	cmp	r7, #9
 80085d0:	d818      	bhi.n	8008604 <_strtol_l.isra.0+0xac>
 80085d2:	463c      	mov	r4, r7
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	dd24      	ble.n	8008622 <_strtol_l.isra.0+0xca>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	db1f      	blt.n	800861c <_strtol_l.isra.0+0xc4>
 80085dc:	45a9      	cmp	r9, r5
 80085de:	d31d      	bcc.n	800861c <_strtol_l.isra.0+0xc4>
 80085e0:	d101      	bne.n	80085e6 <_strtol_l.isra.0+0x8e>
 80085e2:	45a2      	cmp	sl, r4
 80085e4:	db1a      	blt.n	800861c <_strtol_l.isra.0+0xc4>
 80085e6:	fb05 4503 	mla	r5, r5, r3, r4
 80085ea:	2601      	movs	r6, #1
 80085ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80085f0:	e7eb      	b.n	80085ca <_strtol_l.isra.0+0x72>
 80085f2:	2c2b      	cmp	r4, #43	; 0x2b
 80085f4:	bf08      	it	eq
 80085f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80085fa:	46a8      	mov	r8, r5
 80085fc:	bf08      	it	eq
 80085fe:	f106 0e02 	addeq.w	lr, r6, #2
 8008602:	e7c7      	b.n	8008594 <_strtol_l.isra.0+0x3c>
 8008604:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008608:	2f19      	cmp	r7, #25
 800860a:	d801      	bhi.n	8008610 <_strtol_l.isra.0+0xb8>
 800860c:	3c37      	subs	r4, #55	; 0x37
 800860e:	e7e1      	b.n	80085d4 <_strtol_l.isra.0+0x7c>
 8008610:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008614:	2f19      	cmp	r7, #25
 8008616:	d804      	bhi.n	8008622 <_strtol_l.isra.0+0xca>
 8008618:	3c57      	subs	r4, #87	; 0x57
 800861a:	e7db      	b.n	80085d4 <_strtol_l.isra.0+0x7c>
 800861c:	f04f 36ff 	mov.w	r6, #4294967295
 8008620:	e7e4      	b.n	80085ec <_strtol_l.isra.0+0x94>
 8008622:	2e00      	cmp	r6, #0
 8008624:	da05      	bge.n	8008632 <_strtol_l.isra.0+0xda>
 8008626:	2322      	movs	r3, #34	; 0x22
 8008628:	6003      	str	r3, [r0, #0]
 800862a:	4665      	mov	r5, ip
 800862c:	b942      	cbnz	r2, 8008640 <_strtol_l.isra.0+0xe8>
 800862e:	4628      	mov	r0, r5
 8008630:	e79d      	b.n	800856e <_strtol_l.isra.0+0x16>
 8008632:	f1b8 0f00 	cmp.w	r8, #0
 8008636:	d000      	beq.n	800863a <_strtol_l.isra.0+0xe2>
 8008638:	426d      	negs	r5, r5
 800863a:	2a00      	cmp	r2, #0
 800863c:	d0f7      	beq.n	800862e <_strtol_l.isra.0+0xd6>
 800863e:	b10e      	cbz	r6, 8008644 <_strtol_l.isra.0+0xec>
 8008640:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	e7f2      	b.n	800862e <_strtol_l.isra.0+0xd6>
 8008648:	2430      	movs	r4, #48	; 0x30
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1b3      	bne.n	80085b6 <_strtol_l.isra.0+0x5e>
 800864e:	2308      	movs	r3, #8
 8008650:	e7b1      	b.n	80085b6 <_strtol_l.isra.0+0x5e>
 8008652:	2c30      	cmp	r4, #48	; 0x30
 8008654:	d0a4      	beq.n	80085a0 <_strtol_l.isra.0+0x48>
 8008656:	230a      	movs	r3, #10
 8008658:	e7ad      	b.n	80085b6 <_strtol_l.isra.0+0x5e>
 800865a:	bf00      	nop
 800865c:	0800b2d6 	.word	0x0800b2d6

08008660 <strtol>:
 8008660:	4613      	mov	r3, r2
 8008662:	460a      	mov	r2, r1
 8008664:	4601      	mov	r1, r0
 8008666:	4802      	ldr	r0, [pc, #8]	; (8008670 <strtol+0x10>)
 8008668:	6800      	ldr	r0, [r0, #0]
 800866a:	f7ff bf75 	b.w	8008558 <_strtol_l.isra.0>
 800866e:	bf00      	nop
 8008670:	2000001c 	.word	0x2000001c

08008674 <__utoa>:
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	4c1f      	ldr	r4, [pc, #124]	; (80086f4 <__utoa+0x80>)
 8008678:	b08b      	sub	sp, #44	; 0x2c
 800867a:	4605      	mov	r5, r0
 800867c:	460b      	mov	r3, r1
 800867e:	466e      	mov	r6, sp
 8008680:	f104 0c20 	add.w	ip, r4, #32
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	6861      	ldr	r1, [r4, #4]
 8008688:	4637      	mov	r7, r6
 800868a:	c703      	stmia	r7!, {r0, r1}
 800868c:	3408      	adds	r4, #8
 800868e:	4564      	cmp	r4, ip
 8008690:	463e      	mov	r6, r7
 8008692:	d1f7      	bne.n	8008684 <__utoa+0x10>
 8008694:	7921      	ldrb	r1, [r4, #4]
 8008696:	7139      	strb	r1, [r7, #4]
 8008698:	1e91      	subs	r1, r2, #2
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	6038      	str	r0, [r7, #0]
 800869e:	2922      	cmp	r1, #34	; 0x22
 80086a0:	f04f 0100 	mov.w	r1, #0
 80086a4:	d904      	bls.n	80086b0 <__utoa+0x3c>
 80086a6:	7019      	strb	r1, [r3, #0]
 80086a8:	460b      	mov	r3, r1
 80086aa:	4618      	mov	r0, r3
 80086ac:	b00b      	add	sp, #44	; 0x2c
 80086ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b0:	1e58      	subs	r0, r3, #1
 80086b2:	4684      	mov	ip, r0
 80086b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80086b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80086bc:	fb02 5617 	mls	r6, r2, r7, r5
 80086c0:	4476      	add	r6, lr
 80086c2:	460c      	mov	r4, r1
 80086c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80086c8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80086cc:	462e      	mov	r6, r5
 80086ce:	42b2      	cmp	r2, r6
 80086d0:	f101 0101 	add.w	r1, r1, #1
 80086d4:	463d      	mov	r5, r7
 80086d6:	d9ed      	bls.n	80086b4 <__utoa+0x40>
 80086d8:	2200      	movs	r2, #0
 80086da:	545a      	strb	r2, [r3, r1]
 80086dc:	1919      	adds	r1, r3, r4
 80086de:	1aa5      	subs	r5, r4, r2
 80086e0:	42aa      	cmp	r2, r5
 80086e2:	dae2      	bge.n	80086aa <__utoa+0x36>
 80086e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80086e8:	780e      	ldrb	r6, [r1, #0]
 80086ea:	7006      	strb	r6, [r0, #0]
 80086ec:	3201      	adds	r2, #1
 80086ee:	f801 5901 	strb.w	r5, [r1], #-1
 80086f2:	e7f4      	b.n	80086de <__utoa+0x6a>
 80086f4:	0800b2b0 	.word	0x0800b2b0

080086f8 <quorem>:
 80086f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	6903      	ldr	r3, [r0, #16]
 80086fe:	690c      	ldr	r4, [r1, #16]
 8008700:	42a3      	cmp	r3, r4
 8008702:	4607      	mov	r7, r0
 8008704:	f2c0 8081 	blt.w	800880a <quorem+0x112>
 8008708:	3c01      	subs	r4, #1
 800870a:	f101 0814 	add.w	r8, r1, #20
 800870e:	f100 0514 	add.w	r5, r0, #20
 8008712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800871c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008720:	3301      	adds	r3, #1
 8008722:	429a      	cmp	r2, r3
 8008724:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008728:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800872c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008730:	d331      	bcc.n	8008796 <quorem+0x9e>
 8008732:	f04f 0e00 	mov.w	lr, #0
 8008736:	4640      	mov	r0, r8
 8008738:	46ac      	mov	ip, r5
 800873a:	46f2      	mov	sl, lr
 800873c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008740:	b293      	uxth	r3, r2
 8008742:	fb06 e303 	mla	r3, r6, r3, lr
 8008746:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800874a:	b29b      	uxth	r3, r3
 800874c:	ebaa 0303 	sub.w	r3, sl, r3
 8008750:	0c12      	lsrs	r2, r2, #16
 8008752:	f8dc a000 	ldr.w	sl, [ip]
 8008756:	fb06 e202 	mla	r2, r6, r2, lr
 800875a:	fa13 f38a 	uxtah	r3, r3, sl
 800875e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008762:	fa1f fa82 	uxth.w	sl, r2
 8008766:	f8dc 2000 	ldr.w	r2, [ip]
 800876a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800876e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008772:	b29b      	uxth	r3, r3
 8008774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008778:	4581      	cmp	r9, r0
 800877a:	f84c 3b04 	str.w	r3, [ip], #4
 800877e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008782:	d2db      	bcs.n	800873c <quorem+0x44>
 8008784:	f855 300b 	ldr.w	r3, [r5, fp]
 8008788:	b92b      	cbnz	r3, 8008796 <quorem+0x9e>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	3b04      	subs	r3, #4
 800878e:	429d      	cmp	r5, r3
 8008790:	461a      	mov	r2, r3
 8008792:	d32e      	bcc.n	80087f2 <quorem+0xfa>
 8008794:	613c      	str	r4, [r7, #16]
 8008796:	4638      	mov	r0, r7
 8008798:	f001 f8b0 	bl	80098fc <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	db24      	blt.n	80087ea <quorem+0xf2>
 80087a0:	3601      	adds	r6, #1
 80087a2:	4628      	mov	r0, r5
 80087a4:	f04f 0c00 	mov.w	ip, #0
 80087a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80087ac:	f8d0 e000 	ldr.w	lr, [r0]
 80087b0:	b293      	uxth	r3, r2
 80087b2:	ebac 0303 	sub.w	r3, ip, r3
 80087b6:	0c12      	lsrs	r2, r2, #16
 80087b8:	fa13 f38e 	uxtah	r3, r3, lr
 80087bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ca:	45c1      	cmp	r9, r8
 80087cc:	f840 3b04 	str.w	r3, [r0], #4
 80087d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087d4:	d2e8      	bcs.n	80087a8 <quorem+0xb0>
 80087d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087de:	b922      	cbnz	r2, 80087ea <quorem+0xf2>
 80087e0:	3b04      	subs	r3, #4
 80087e2:	429d      	cmp	r5, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	d30a      	bcc.n	80087fe <quorem+0x106>
 80087e8:	613c      	str	r4, [r7, #16]
 80087ea:	4630      	mov	r0, r6
 80087ec:	b003      	add	sp, #12
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	6812      	ldr	r2, [r2, #0]
 80087f4:	3b04      	subs	r3, #4
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	d1cc      	bne.n	8008794 <quorem+0x9c>
 80087fa:	3c01      	subs	r4, #1
 80087fc:	e7c7      	b.n	800878e <quorem+0x96>
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	3b04      	subs	r3, #4
 8008802:	2a00      	cmp	r2, #0
 8008804:	d1f0      	bne.n	80087e8 <quorem+0xf0>
 8008806:	3c01      	subs	r4, #1
 8008808:	e7eb      	b.n	80087e2 <quorem+0xea>
 800880a:	2000      	movs	r0, #0
 800880c:	e7ee      	b.n	80087ec <quorem+0xf4>
	...

08008810 <_dtoa_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	ed2d 8b02 	vpush	{d8}
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	b095      	sub	sp, #84	; 0x54
 800881e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008824:	9105      	str	r1, [sp, #20]
 8008826:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800882a:	4604      	mov	r4, r0
 800882c:	9209      	str	r2, [sp, #36]	; 0x24
 800882e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008830:	b975      	cbnz	r5, 8008850 <_dtoa_r+0x40>
 8008832:	2010      	movs	r0, #16
 8008834:	f000 fddc 	bl	80093f0 <malloc>
 8008838:	4602      	mov	r2, r0
 800883a:	6260      	str	r0, [r4, #36]	; 0x24
 800883c:	b920      	cbnz	r0, 8008848 <_dtoa_r+0x38>
 800883e:	4bb2      	ldr	r3, [pc, #712]	; (8008b08 <_dtoa_r+0x2f8>)
 8008840:	21ea      	movs	r1, #234	; 0xea
 8008842:	48b2      	ldr	r0, [pc, #712]	; (8008b0c <_dtoa_r+0x2fc>)
 8008844:	f001 fb80 	bl	8009f48 <__assert_func>
 8008848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800884c:	6005      	str	r5, [r0, #0]
 800884e:	60c5      	str	r5, [r0, #12]
 8008850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	b151      	cbz	r1, 800886c <_dtoa_r+0x5c>
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	604a      	str	r2, [r1, #4]
 800885a:	2301      	movs	r3, #1
 800885c:	4093      	lsls	r3, r2
 800885e:	608b      	str	r3, [r1, #8]
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fe0d 	bl	8009480 <_Bfree>
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	1e3b      	subs	r3, r7, #0
 800886e:	bfb9      	ittee	lt
 8008870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008874:	9303      	strlt	r3, [sp, #12]
 8008876:	2300      	movge	r3, #0
 8008878:	f8c8 3000 	strge.w	r3, [r8]
 800887c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008880:	4ba3      	ldr	r3, [pc, #652]	; (8008b10 <_dtoa_r+0x300>)
 8008882:	bfbc      	itt	lt
 8008884:	2201      	movlt	r2, #1
 8008886:	f8c8 2000 	strlt.w	r2, [r8]
 800888a:	ea33 0309 	bics.w	r3, r3, r9
 800888e:	d11b      	bne.n	80088c8 <_dtoa_r+0xb8>
 8008890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008892:	f242 730f 	movw	r3, #9999	; 0x270f
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800889c:	4333      	orrs	r3, r6
 800889e:	f000 857a 	beq.w	8009396 <_dtoa_r+0xb86>
 80088a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a4:	b963      	cbnz	r3, 80088c0 <_dtoa_r+0xb0>
 80088a6:	4b9b      	ldr	r3, [pc, #620]	; (8008b14 <_dtoa_r+0x304>)
 80088a8:	e024      	b.n	80088f4 <_dtoa_r+0xe4>
 80088aa:	4b9b      	ldr	r3, [pc, #620]	; (8008b18 <_dtoa_r+0x308>)
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	9800      	ldr	r0, [sp, #0]
 80088b6:	b015      	add	sp, #84	; 0x54
 80088b8:	ecbd 8b02 	vpop	{d8}
 80088bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	4b94      	ldr	r3, [pc, #592]	; (8008b14 <_dtoa_r+0x304>)
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	3303      	adds	r3, #3
 80088c6:	e7f3      	b.n	80088b0 <_dtoa_r+0xa0>
 80088c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088cc:	2200      	movs	r2, #0
 80088ce:	ec51 0b17 	vmov	r0, r1, d7
 80088d2:	2300      	movs	r3, #0
 80088d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80088d8:	f7f8 f90e 	bl	8000af8 <__aeabi_dcmpeq>
 80088dc:	4680      	mov	r8, r0
 80088de:	b158      	cbz	r0, 80088f8 <_dtoa_r+0xe8>
 80088e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088e2:	2301      	movs	r3, #1
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 8551 	beq.w	8009390 <_dtoa_r+0xb80>
 80088ee:	488b      	ldr	r0, [pc, #556]	; (8008b1c <_dtoa_r+0x30c>)
 80088f0:	6018      	str	r0, [r3, #0]
 80088f2:	1e43      	subs	r3, r0, #1
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	e7dd      	b.n	80088b4 <_dtoa_r+0xa4>
 80088f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80088fc:	aa12      	add	r2, sp, #72	; 0x48
 80088fe:	a913      	add	r1, sp, #76	; 0x4c
 8008900:	4620      	mov	r0, r4
 8008902:	f001 f89f 	bl	8009a44 <__d2b>
 8008906:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800890a:	4683      	mov	fp, r0
 800890c:	2d00      	cmp	r5, #0
 800890e:	d07c      	beq.n	8008a0a <_dtoa_r+0x1fa>
 8008910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008912:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800891a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800891e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008922:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800892a:	4b7d      	ldr	r3, [pc, #500]	; (8008b20 <_dtoa_r+0x310>)
 800892c:	2200      	movs	r2, #0
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 fcc1 	bl	80002b8 <__aeabi_dsub>
 8008936:	a36e      	add	r3, pc, #440	; (adr r3, 8008af0 <_dtoa_r+0x2e0>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fe74 	bl	8000628 <__aeabi_dmul>
 8008940:	a36d      	add	r3, pc, #436	; (adr r3, 8008af8 <_dtoa_r+0x2e8>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fcb9 	bl	80002bc <__adddf3>
 800894a:	4606      	mov	r6, r0
 800894c:	4628      	mov	r0, r5
 800894e:	460f      	mov	r7, r1
 8008950:	f7f7 fe00 	bl	8000554 <__aeabi_i2d>
 8008954:	a36a      	add	r3, pc, #424	; (adr r3, 8008b00 <_dtoa_r+0x2f0>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fe65 	bl	8000628 <__aeabi_dmul>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fca9 	bl	80002bc <__adddf3>
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f7f8 f90b 	bl	8000b88 <__aeabi_d2iz>
 8008972:	2200      	movs	r2, #0
 8008974:	4682      	mov	sl, r0
 8008976:	2300      	movs	r3, #0
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f8c6 	bl	8000b0c <__aeabi_dcmplt>
 8008980:	b148      	cbz	r0, 8008996 <_dtoa_r+0x186>
 8008982:	4650      	mov	r0, sl
 8008984:	f7f7 fde6 	bl	8000554 <__aeabi_i2d>
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	f7f8 f8b4 	bl	8000af8 <__aeabi_dcmpeq>
 8008990:	b908      	cbnz	r0, 8008996 <_dtoa_r+0x186>
 8008992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008996:	f1ba 0f16 	cmp.w	sl, #22
 800899a:	d854      	bhi.n	8008a46 <_dtoa_r+0x236>
 800899c:	4b61      	ldr	r3, [pc, #388]	; (8008b24 <_dtoa_r+0x314>)
 800899e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089aa:	f7f8 f8af 	bl	8000b0c <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d04b      	beq.n	8008a4a <_dtoa_r+0x23a>
 80089b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089b6:	2300      	movs	r3, #0
 80089b8:	930e      	str	r3, [sp, #56]	; 0x38
 80089ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089bc:	1b5d      	subs	r5, r3, r5
 80089be:	1e6b      	subs	r3, r5, #1
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	bf43      	ittte	mi
 80089c4:	2300      	movmi	r3, #0
 80089c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80089ca:	9304      	strmi	r3, [sp, #16]
 80089cc:	f04f 0800 	movpl.w	r8, #0
 80089d0:	f1ba 0f00 	cmp.w	sl, #0
 80089d4:	db3b      	blt.n	8008a4e <_dtoa_r+0x23e>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089dc:	4453      	add	r3, sl
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	2300      	movs	r3, #0
 80089e2:	9306      	str	r3, [sp, #24]
 80089e4:	9b05      	ldr	r3, [sp, #20]
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	d869      	bhi.n	8008abe <_dtoa_r+0x2ae>
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	bfc4      	itt	gt
 80089ee:	3b04      	subgt	r3, #4
 80089f0:	9305      	strgt	r3, [sp, #20]
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	f1a3 0302 	sub.w	r3, r3, #2
 80089f8:	bfcc      	ite	gt
 80089fa:	2500      	movgt	r5, #0
 80089fc:	2501      	movle	r5, #1
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d869      	bhi.n	8008ad6 <_dtoa_r+0x2c6>
 8008a02:	e8df f003 	tbb	[pc, r3]
 8008a06:	4e2c      	.short	0x4e2c
 8008a08:	5a4c      	.short	0x5a4c
 8008a0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a0e:	441d      	add	r5, r3
 8008a10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	bfc1      	itttt	gt
 8008a18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a20:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a28:	bfda      	itte	le
 8008a2a:	f1c3 0320 	rsble	r3, r3, #32
 8008a2e:	fa06 f003 	lslle.w	r0, r6, r3
 8008a32:	4318      	orrgt	r0, r3
 8008a34:	f7f7 fd7e 	bl	8000534 <__aeabi_ui2d>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a40:	3d01      	subs	r5, #1
 8008a42:	9310      	str	r3, [sp, #64]	; 0x40
 8008a44:	e771      	b.n	800892a <_dtoa_r+0x11a>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e7b6      	b.n	80089b8 <_dtoa_r+0x1a8>
 8008a4a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a4c:	e7b5      	b.n	80089ba <_dtoa_r+0x1aa>
 8008a4e:	f1ca 0300 	rsb	r3, sl, #0
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	2300      	movs	r3, #0
 8008a56:	eba8 080a 	sub.w	r8, r8, sl
 8008a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8008a5c:	e7c2      	b.n	80089e4 <_dtoa_r+0x1d4>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc39      	bgt.n	8008adc <_dtoa_r+0x2cc>
 8008a68:	f04f 0901 	mov.w	r9, #1
 8008a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a70:	464b      	mov	r3, r9
 8008a72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a78:	2200      	movs	r2, #0
 8008a7a:	6042      	str	r2, [r0, #4]
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	f102 0614 	add.w	r6, r2, #20
 8008a82:	429e      	cmp	r6, r3
 8008a84:	6841      	ldr	r1, [r0, #4]
 8008a86:	d92f      	bls.n	8008ae8 <_dtoa_r+0x2d8>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fcb9 	bl	8009400 <_Balloc>
 8008a8e:	9000      	str	r0, [sp, #0]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d14b      	bne.n	8008b2c <_dtoa_r+0x31c>
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <_dtoa_r+0x318>)
 8008a96:	4602      	mov	r2, r0
 8008a98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a9c:	e6d1      	b.n	8008842 <_dtoa_r+0x32>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e7de      	b.n	8008a60 <_dtoa_r+0x250>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9308      	str	r3, [sp, #32]
 8008aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa8:	eb0a 0903 	add.w	r9, sl, r3
 8008aac:	f109 0301 	add.w	r3, r9, #1
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	bfb8      	it	lt
 8008ab6:	2301      	movlt	r3, #1
 8008ab8:	e7dd      	b.n	8008a76 <_dtoa_r+0x266>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e7f2      	b.n	8008aa4 <_dtoa_r+0x294>
 8008abe:	2501      	movs	r5, #1
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	9508      	str	r5, [sp, #32]
 8008ac6:	f04f 39ff 	mov.w	r9, #4294967295
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ad0:	2312      	movs	r3, #18
 8008ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad4:	e7cf      	b.n	8008a76 <_dtoa_r+0x266>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	9308      	str	r3, [sp, #32]
 8008ada:	e7f4      	b.n	8008ac6 <_dtoa_r+0x2b6>
 8008adc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ae0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	e7c6      	b.n	8008a76 <_dtoa_r+0x266>
 8008ae8:	3101      	adds	r1, #1
 8008aea:	6041      	str	r1, [r0, #4]
 8008aec:	0052      	lsls	r2, r2, #1
 8008aee:	e7c6      	b.n	8008a7e <_dtoa_r+0x26e>
 8008af0:	636f4361 	.word	0x636f4361
 8008af4:	3fd287a7 	.word	0x3fd287a7
 8008af8:	8b60c8b3 	.word	0x8b60c8b3
 8008afc:	3fc68a28 	.word	0x3fc68a28
 8008b00:	509f79fb 	.word	0x509f79fb
 8008b04:	3fd34413 	.word	0x3fd34413
 8008b08:	0800b3e3 	.word	0x0800b3e3
 8008b0c:	0800b3fa 	.word	0x0800b3fa
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	0800b3df 	.word	0x0800b3df
 8008b18:	0800b3d6 	.word	0x0800b3d6
 8008b1c:	0800b28d 	.word	0x0800b28d
 8008b20:	3ff80000 	.word	0x3ff80000
 8008b24:	0800b4f8 	.word	0x0800b4f8
 8008b28:	0800b459 	.word	0x0800b459
 8008b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b2e:	9a00      	ldr	r2, [sp, #0]
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	2b0e      	cmp	r3, #14
 8008b36:	f200 80ad 	bhi.w	8008c94 <_dtoa_r+0x484>
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	f000 80aa 	beq.w	8008c94 <_dtoa_r+0x484>
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	dd36      	ble.n	8008bb4 <_dtoa_r+0x3a4>
 8008b46:	4ac3      	ldr	r2, [pc, #780]	; (8008e54 <_dtoa_r+0x644>)
 8008b48:	f00a 030f 	and.w	r3, sl, #15
 8008b4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b50:	ed93 7b00 	vldr	d7, [r3]
 8008b54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b5c:	eeb0 8a47 	vmov.f32	s16, s14
 8008b60:	eef0 8a67 	vmov.f32	s17, s15
 8008b64:	d016      	beq.n	8008b94 <_dtoa_r+0x384>
 8008b66:	4bbc      	ldr	r3, [pc, #752]	; (8008e58 <_dtoa_r+0x648>)
 8008b68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b70:	f7f7 fe84 	bl	800087c <__aeabi_ddiv>
 8008b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b78:	f007 070f 	and.w	r7, r7, #15
 8008b7c:	2503      	movs	r5, #3
 8008b7e:	4eb6      	ldr	r6, [pc, #728]	; (8008e58 <_dtoa_r+0x648>)
 8008b80:	b957      	cbnz	r7, 8008b98 <_dtoa_r+0x388>
 8008b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b86:	ec53 2b18 	vmov	r2, r3, d8
 8008b8a:	f7f7 fe77 	bl	800087c <__aeabi_ddiv>
 8008b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b92:	e029      	b.n	8008be8 <_dtoa_r+0x3d8>
 8008b94:	2502      	movs	r5, #2
 8008b96:	e7f2      	b.n	8008b7e <_dtoa_r+0x36e>
 8008b98:	07f9      	lsls	r1, r7, #31
 8008b9a:	d508      	bpl.n	8008bae <_dtoa_r+0x39e>
 8008b9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ba0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ba4:	f7f7 fd40 	bl	8000628 <__aeabi_dmul>
 8008ba8:	ec41 0b18 	vmov	d8, r0, r1
 8008bac:	3501      	adds	r5, #1
 8008bae:	107f      	asrs	r7, r7, #1
 8008bb0:	3608      	adds	r6, #8
 8008bb2:	e7e5      	b.n	8008b80 <_dtoa_r+0x370>
 8008bb4:	f000 80a6 	beq.w	8008d04 <_dtoa_r+0x4f4>
 8008bb8:	f1ca 0600 	rsb	r6, sl, #0
 8008bbc:	4ba5      	ldr	r3, [pc, #660]	; (8008e54 <_dtoa_r+0x644>)
 8008bbe:	4fa6      	ldr	r7, [pc, #664]	; (8008e58 <_dtoa_r+0x648>)
 8008bc0:	f006 020f 	and.w	r2, r6, #15
 8008bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bd0:	f7f7 fd2a 	bl	8000628 <__aeabi_dmul>
 8008bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd8:	1136      	asrs	r6, r6, #4
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2502      	movs	r5, #2
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	f040 8085 	bne.w	8008cee <_dtoa_r+0x4de>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1d2      	bne.n	8008b8e <_dtoa_r+0x37e>
 8008be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 808c 	beq.w	8008d08 <_dtoa_r+0x4f8>
 8008bf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bf4:	4b99      	ldr	r3, [pc, #612]	; (8008e5c <_dtoa_r+0x64c>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 ff86 	bl	8000b0c <__aeabi_dcmplt>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f000 8081 	beq.w	8008d08 <_dtoa_r+0x4f8>
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d07d      	beq.n	8008d08 <_dtoa_r+0x4f8>
 8008c0c:	f1b9 0f00 	cmp.w	r9, #0
 8008c10:	dd3c      	ble.n	8008c8c <_dtoa_r+0x47c>
 8008c12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4b91      	ldr	r3, [pc, #580]	; (8008e60 <_dtoa_r+0x650>)
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4639      	mov	r1, r7
 8008c20:	f7f7 fd02 	bl	8000628 <__aeabi_dmul>
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	3501      	adds	r5, #1
 8008c2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7f7 fc8e 	bl	8000554 <__aeabi_i2d>
 8008c38:	4632      	mov	r2, r6
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	f7f7 fcf4 	bl	8000628 <__aeabi_dmul>
 8008c40:	4b88      	ldr	r3, [pc, #544]	; (8008e64 <_dtoa_r+0x654>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fb3a 	bl	80002bc <__adddf3>
 8008c48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c50:	9303      	str	r3, [sp, #12]
 8008c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d15c      	bne.n	8008d12 <_dtoa_r+0x502>
 8008c58:	4b83      	ldr	r3, [pc, #524]	; (8008e68 <_dtoa_r+0x658>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 fb2a 	bl	80002b8 <__aeabi_dsub>
 8008c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	f7f7 ff6c 	bl	8000b48 <__aeabi_dcmpgt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f040 8296 	bne.w	80091a2 <_dtoa_r+0x992>
 8008c76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c80:	4639      	mov	r1, r7
 8008c82:	f7f7 ff43 	bl	8000b0c <__aeabi_dcmplt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f040 8288 	bne.w	800919c <_dtoa_r+0x98c>
 8008c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f2c0 8158 	blt.w	8008f4c <_dtoa_r+0x73c>
 8008c9c:	f1ba 0f0e 	cmp.w	sl, #14
 8008ca0:	f300 8154 	bgt.w	8008f4c <_dtoa_r+0x73c>
 8008ca4:	4b6b      	ldr	r3, [pc, #428]	; (8008e54 <_dtoa_r+0x644>)
 8008ca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008caa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f280 80e3 	bge.w	8008e7c <_dtoa_r+0x66c>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f300 80df 	bgt.w	8008e7c <_dtoa_r+0x66c>
 8008cbe:	f040 826d 	bne.w	800919c <_dtoa_r+0x98c>
 8008cc2:	4b69      	ldr	r3, [pc, #420]	; (8008e68 <_dtoa_r+0x658>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 fcad 	bl	8000628 <__aeabi_dmul>
 8008cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cd2:	f7f7 ff2f 	bl	8000b34 <__aeabi_dcmpge>
 8008cd6:	9e01      	ldr	r6, [sp, #4]
 8008cd8:	4637      	mov	r7, r6
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f040 8243 	bne.w	8009166 <_dtoa_r+0x956>
 8008ce0:	9d00      	ldr	r5, [sp, #0]
 8008ce2:	2331      	movs	r3, #49	; 0x31
 8008ce4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	e23f      	b.n	800916e <_dtoa_r+0x95e>
 8008cee:	07f2      	lsls	r2, r6, #31
 8008cf0:	d505      	bpl.n	8008cfe <_dtoa_r+0x4ee>
 8008cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf6:	f7f7 fc97 	bl	8000628 <__aeabi_dmul>
 8008cfa:	3501      	adds	r5, #1
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	1076      	asrs	r6, r6, #1
 8008d00:	3708      	adds	r7, #8
 8008d02:	e76c      	b.n	8008bde <_dtoa_r+0x3ce>
 8008d04:	2502      	movs	r5, #2
 8008d06:	e76f      	b.n	8008be8 <_dtoa_r+0x3d8>
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d10:	e78d      	b.n	8008c2e <_dtoa_r+0x41e>
 8008d12:	9900      	ldr	r1, [sp, #0]
 8008d14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d18:	4b4e      	ldr	r3, [pc, #312]	; (8008e54 <_dtoa_r+0x644>)
 8008d1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d1e:	4401      	add	r1, r0
 8008d20:	9102      	str	r1, [sp, #8]
 8008d22:	9908      	ldr	r1, [sp, #32]
 8008d24:	eeb0 8a47 	vmov.f32	s16, s14
 8008d28:	eef0 8a67 	vmov.f32	s17, s15
 8008d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d34:	2900      	cmp	r1, #0
 8008d36:	d045      	beq.n	8008dc4 <_dtoa_r+0x5b4>
 8008d38:	494c      	ldr	r1, [pc, #304]	; (8008e6c <_dtoa_r+0x65c>)
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f7f7 fd9e 	bl	800087c <__aeabi_ddiv>
 8008d40:	ec53 2b18 	vmov	r2, r3, d8
 8008d44:	f7f7 fab8 	bl	80002b8 <__aeabi_dsub>
 8008d48:	9d00      	ldr	r5, [sp, #0]
 8008d4a:	ec41 0b18 	vmov	d8, r0, r1
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7f7 ff19 	bl	8000b88 <__aeabi_d2iz>
 8008d56:	900c      	str	r0, [sp, #48]	; 0x30
 8008d58:	f7f7 fbfc 	bl	8000554 <__aeabi_i2d>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 faa8 	bl	80002b8 <__aeabi_dsub>
 8008d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d6a:	3330      	adds	r3, #48	; 0x30
 8008d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d70:	ec53 2b18 	vmov	r2, r3, d8
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	f7f7 fec8 	bl	8000b0c <__aeabi_dcmplt>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d165      	bne.n	8008e4c <_dtoa_r+0x63c>
 8008d80:	4632      	mov	r2, r6
 8008d82:	463b      	mov	r3, r7
 8008d84:	4935      	ldr	r1, [pc, #212]	; (8008e5c <_dtoa_r+0x64c>)
 8008d86:	2000      	movs	r0, #0
 8008d88:	f7f7 fa96 	bl	80002b8 <__aeabi_dsub>
 8008d8c:	ec53 2b18 	vmov	r2, r3, d8
 8008d90:	f7f7 febc 	bl	8000b0c <__aeabi_dcmplt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f040 80b9 	bne.w	8008f0c <_dtoa_r+0x6fc>
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	f43f af75 	beq.w	8008c8c <_dtoa_r+0x47c>
 8008da2:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <_dtoa_r+0x650>)
 8008da4:	ec51 0b18 	vmov	r0, r1, d8
 8008da8:	2200      	movs	r2, #0
 8008daa:	f7f7 fc3d 	bl	8000628 <__aeabi_dmul>
 8008dae:	4b2c      	ldr	r3, [pc, #176]	; (8008e60 <_dtoa_r+0x650>)
 8008db0:	ec41 0b18 	vmov	d8, r0, r1
 8008db4:	2200      	movs	r2, #0
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fc35 	bl	8000628 <__aeabi_dmul>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	e7c4      	b.n	8008d4e <_dtoa_r+0x53e>
 8008dc4:	ec51 0b17 	vmov	r0, r1, d7
 8008dc8:	f7f7 fc2e 	bl	8000628 <__aeabi_dmul>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	9d00      	ldr	r5, [sp, #0]
 8008dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008dd2:	ec41 0b18 	vmov	d8, r0, r1
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7f7 fed5 	bl	8000b88 <__aeabi_d2iz>
 8008dde:	9011      	str	r0, [sp, #68]	; 0x44
 8008de0:	f7f7 fbb8 	bl	8000554 <__aeabi_i2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fa64 	bl	80002b8 <__aeabi_dsub>
 8008df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008df2:	3330      	adds	r3, #48	; 0x30
 8008df4:	f805 3b01 	strb.w	r3, [r5], #1
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	d134      	bne.n	8008e70 <_dtoa_r+0x660>
 8008e06:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <_dtoa_r+0x65c>)
 8008e08:	ec51 0b18 	vmov	r0, r1, d8
 8008e0c:	f7f7 fa56 	bl	80002bc <__adddf3>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fe96 	bl	8000b48 <__aeabi_dcmpgt>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d175      	bne.n	8008f0c <_dtoa_r+0x6fc>
 8008e20:	ec53 2b18 	vmov	r2, r3, d8
 8008e24:	4911      	ldr	r1, [pc, #68]	; (8008e6c <_dtoa_r+0x65c>)
 8008e26:	2000      	movs	r0, #0
 8008e28:	f7f7 fa46 	bl	80002b8 <__aeabi_dsub>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fe6a 	bl	8000b0c <__aeabi_dcmplt>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f43f af27 	beq.w	8008c8c <_dtoa_r+0x47c>
 8008e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e40:	1e6b      	subs	r3, r5, #1
 8008e42:	930c      	str	r3, [sp, #48]	; 0x30
 8008e44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e48:	2b30      	cmp	r3, #48	; 0x30
 8008e4a:	d0f8      	beq.n	8008e3e <_dtoa_r+0x62e>
 8008e4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e50:	e04a      	b.n	8008ee8 <_dtoa_r+0x6d8>
 8008e52:	bf00      	nop
 8008e54:	0800b4f8 	.word	0x0800b4f8
 8008e58:	0800b4d0 	.word	0x0800b4d0
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	40240000 	.word	0x40240000
 8008e64:	401c0000 	.word	0x401c0000
 8008e68:	40140000 	.word	0x40140000
 8008e6c:	3fe00000 	.word	0x3fe00000
 8008e70:	4baf      	ldr	r3, [pc, #700]	; (8009130 <_dtoa_r+0x920>)
 8008e72:	f7f7 fbd9 	bl	8000628 <__aeabi_dmul>
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	e7ac      	b.n	8008dd6 <_dtoa_r+0x5c6>
 8008e7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e80:	9d00      	ldr	r5, [sp, #0]
 8008e82:	4642      	mov	r2, r8
 8008e84:	464b      	mov	r3, r9
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	f7f7 fcf7 	bl	800087c <__aeabi_ddiv>
 8008e8e:	f7f7 fe7b 	bl	8000b88 <__aeabi_d2iz>
 8008e92:	9002      	str	r0, [sp, #8]
 8008e94:	f7f7 fb5e 	bl	8000554 <__aeabi_i2d>
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	f7f7 fbc4 	bl	8000628 <__aeabi_dmul>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fa06 	bl	80002b8 <__aeabi_dsub>
 8008eac:	9e02      	ldr	r6, [sp, #8]
 8008eae:	9f01      	ldr	r7, [sp, #4]
 8008eb0:	3630      	adds	r6, #48	; 0x30
 8008eb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008eb6:	9e00      	ldr	r6, [sp, #0]
 8008eb8:	1bae      	subs	r6, r5, r6
 8008eba:	42b7      	cmp	r7, r6
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	d137      	bne.n	8008f32 <_dtoa_r+0x722>
 8008ec2:	f7f7 f9fb 	bl	80002bc <__adddf3>
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	464b      	mov	r3, r9
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	f7f7 fe3b 	bl	8000b48 <__aeabi_dcmpgt>
 8008ed2:	b9c8      	cbnz	r0, 8008f08 <_dtoa_r+0x6f8>
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 fe0c 	bl	8000af8 <__aeabi_dcmpeq>
 8008ee0:	b110      	cbz	r0, 8008ee8 <_dtoa_r+0x6d8>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	07d9      	lsls	r1, r3, #31
 8008ee6:	d40f      	bmi.n	8008f08 <_dtoa_r+0x6f8>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	4659      	mov	r1, fp
 8008eec:	f000 fac8 	bl	8009480 <_Bfree>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	702b      	strb	r3, [r5, #0]
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ef6:	f10a 0001 	add.w	r0, sl, #1
 8008efa:	6018      	str	r0, [r3, #0]
 8008efc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f43f acd8 	beq.w	80088b4 <_dtoa_r+0xa4>
 8008f04:	601d      	str	r5, [r3, #0]
 8008f06:	e4d5      	b.n	80088b4 <_dtoa_r+0xa4>
 8008f08:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	461d      	mov	r5, r3
 8008f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f14:	2a39      	cmp	r2, #57	; 0x39
 8008f16:	d108      	bne.n	8008f2a <_dtoa_r+0x71a>
 8008f18:	9a00      	ldr	r2, [sp, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d1f7      	bne.n	8008f0e <_dtoa_r+0x6fe>
 8008f1e:	9a07      	ldr	r2, [sp, #28]
 8008f20:	9900      	ldr	r1, [sp, #0]
 8008f22:	3201      	adds	r2, #1
 8008f24:	9207      	str	r2, [sp, #28]
 8008f26:	2230      	movs	r2, #48	; 0x30
 8008f28:	700a      	strb	r2, [r1, #0]
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	3201      	adds	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	e78c      	b.n	8008e4c <_dtoa_r+0x63c>
 8008f32:	4b7f      	ldr	r3, [pc, #508]	; (8009130 <_dtoa_r+0x920>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	f7f7 fb77 	bl	8000628 <__aeabi_dmul>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4606      	mov	r6, r0
 8008f40:	460f      	mov	r7, r1
 8008f42:	f7f7 fdd9 	bl	8000af8 <__aeabi_dcmpeq>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d09b      	beq.n	8008e82 <_dtoa_r+0x672>
 8008f4a:	e7cd      	b.n	8008ee8 <_dtoa_r+0x6d8>
 8008f4c:	9a08      	ldr	r2, [sp, #32]
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	f000 80c4 	beq.w	80090dc <_dtoa_r+0x8cc>
 8008f54:	9a05      	ldr	r2, [sp, #20]
 8008f56:	2a01      	cmp	r2, #1
 8008f58:	f300 80a8 	bgt.w	80090ac <_dtoa_r+0x89c>
 8008f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	f000 80a0 	beq.w	80090a4 <_dtoa_r+0x894>
 8008f64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f68:	9e06      	ldr	r6, [sp, #24]
 8008f6a:	4645      	mov	r5, r8
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	2101      	movs	r1, #1
 8008f70:	441a      	add	r2, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	4498      	add	r8, r3
 8008f76:	9204      	str	r2, [sp, #16]
 8008f78:	f000 fb3e 	bl	80095f8 <__i2b>
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	dd0b      	ble.n	8008f9a <_dtoa_r+0x78a>
 8008f82:	9b04      	ldr	r3, [sp, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dd08      	ble.n	8008f9a <_dtoa_r+0x78a>
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	bfa8      	it	ge
 8008f8e:	462b      	movge	r3, r5
 8008f90:	eba8 0803 	sub.w	r8, r8, r3
 8008f94:	1aed      	subs	r5, r5, r3
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	b1fb      	cbz	r3, 8008fde <_dtoa_r+0x7ce>
 8008f9e:	9b08      	ldr	r3, [sp, #32]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 809f 	beq.w	80090e4 <_dtoa_r+0x8d4>
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	dd11      	ble.n	8008fce <_dtoa_r+0x7be>
 8008faa:	4639      	mov	r1, r7
 8008fac:	4632      	mov	r2, r6
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fbde 	bl	8009770 <__pow5mult>
 8008fb4:	465a      	mov	r2, fp
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	4607      	mov	r7, r0
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 fb32 	bl	8009624 <__multiply>
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	9007      	str	r0, [sp, #28]
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fa5b 	bl	8009480 <_Bfree>
 8008fca:	9b07      	ldr	r3, [sp, #28]
 8008fcc:	469b      	mov	fp, r3
 8008fce:	9b06      	ldr	r3, [sp, #24]
 8008fd0:	1b9a      	subs	r2, r3, r6
 8008fd2:	d004      	beq.n	8008fde <_dtoa_r+0x7ce>
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fbca 	bl	8009770 <__pow5mult>
 8008fdc:	4683      	mov	fp, r0
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fb09 	bl	80095f8 <__i2b>
 8008fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	4606      	mov	r6, r0
 8008fec:	dd7c      	ble.n	80090e8 <_dtoa_r+0x8d8>
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4601      	mov	r1, r0
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 fbbc 	bl	8009770 <__pow5mult>
 8008ff8:	9b05      	ldr	r3, [sp, #20]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	dd76      	ble.n	80090ee <_dtoa_r+0x8de>
 8009000:	2300      	movs	r3, #0
 8009002:	9306      	str	r3, [sp, #24]
 8009004:	6933      	ldr	r3, [r6, #16]
 8009006:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800900a:	6918      	ldr	r0, [r3, #16]
 800900c:	f000 faa4 	bl	8009558 <__hi0bits>
 8009010:	f1c0 0020 	rsb	r0, r0, #32
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	4418      	add	r0, r3
 8009018:	f010 001f 	ands.w	r0, r0, #31
 800901c:	f000 8086 	beq.w	800912c <_dtoa_r+0x91c>
 8009020:	f1c0 0320 	rsb	r3, r0, #32
 8009024:	2b04      	cmp	r3, #4
 8009026:	dd7f      	ble.n	8009128 <_dtoa_r+0x918>
 8009028:	f1c0 001c 	rsb	r0, r0, #28
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	4403      	add	r3, r0
 8009030:	4480      	add	r8, r0
 8009032:	4405      	add	r5, r0
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	dd05      	ble.n	8009048 <_dtoa_r+0x838>
 800903c:	4659      	mov	r1, fp
 800903e:	4642      	mov	r2, r8
 8009040:	4620      	mov	r0, r4
 8009042:	f000 fbef 	bl	8009824 <__lshift>
 8009046:	4683      	mov	fp, r0
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	dd05      	ble.n	800905a <_dtoa_r+0x84a>
 800904e:	4631      	mov	r1, r6
 8009050:	461a      	mov	r2, r3
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fbe6 	bl	8009824 <__lshift>
 8009058:	4606      	mov	r6, r0
 800905a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d069      	beq.n	8009134 <_dtoa_r+0x924>
 8009060:	4631      	mov	r1, r6
 8009062:	4658      	mov	r0, fp
 8009064:	f000 fc4a 	bl	80098fc <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	da63      	bge.n	8009134 <_dtoa_r+0x924>
 800906c:	2300      	movs	r3, #0
 800906e:	4659      	mov	r1, fp
 8009070:	220a      	movs	r2, #10
 8009072:	4620      	mov	r0, r4
 8009074:	f000 fa26 	bl	80094c4 <__multadd>
 8009078:	9b08      	ldr	r3, [sp, #32]
 800907a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800907e:	4683      	mov	fp, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 818f 	beq.w	80093a4 <_dtoa_r+0xb94>
 8009086:	4639      	mov	r1, r7
 8009088:	2300      	movs	r3, #0
 800908a:	220a      	movs	r2, #10
 800908c:	4620      	mov	r0, r4
 800908e:	f000 fa19 	bl	80094c4 <__multadd>
 8009092:	f1b9 0f00 	cmp.w	r9, #0
 8009096:	4607      	mov	r7, r0
 8009098:	f300 808e 	bgt.w	80091b8 <_dtoa_r+0x9a8>
 800909c:	9b05      	ldr	r3, [sp, #20]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	dc50      	bgt.n	8009144 <_dtoa_r+0x934>
 80090a2:	e089      	b.n	80091b8 <_dtoa_r+0x9a8>
 80090a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090aa:	e75d      	b.n	8008f68 <_dtoa_r+0x758>
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	1e5e      	subs	r6, r3, #1
 80090b0:	9b06      	ldr	r3, [sp, #24]
 80090b2:	42b3      	cmp	r3, r6
 80090b4:	bfbf      	itttt	lt
 80090b6:	9b06      	ldrlt	r3, [sp, #24]
 80090b8:	9606      	strlt	r6, [sp, #24]
 80090ba:	1af2      	sublt	r2, r6, r3
 80090bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090be:	bfb6      	itet	lt
 80090c0:	189b      	addlt	r3, r3, r2
 80090c2:	1b9e      	subge	r6, r3, r6
 80090c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	bfb8      	it	lt
 80090ca:	2600      	movlt	r6, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bfb5      	itete	lt
 80090d0:	eba8 0503 	sublt.w	r5, r8, r3
 80090d4:	9b01      	ldrge	r3, [sp, #4]
 80090d6:	2300      	movlt	r3, #0
 80090d8:	4645      	movge	r5, r8
 80090da:	e747      	b.n	8008f6c <_dtoa_r+0x75c>
 80090dc:	9e06      	ldr	r6, [sp, #24]
 80090de:	9f08      	ldr	r7, [sp, #32]
 80090e0:	4645      	mov	r5, r8
 80090e2:	e74c      	b.n	8008f7e <_dtoa_r+0x76e>
 80090e4:	9a06      	ldr	r2, [sp, #24]
 80090e6:	e775      	b.n	8008fd4 <_dtoa_r+0x7c4>
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	dc18      	bgt.n	8009120 <_dtoa_r+0x910>
 80090ee:	9b02      	ldr	r3, [sp, #8]
 80090f0:	b9b3      	cbnz	r3, 8009120 <_dtoa_r+0x910>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f8:	b9a3      	cbnz	r3, 8009124 <_dtoa_r+0x914>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009100:	0d1b      	lsrs	r3, r3, #20
 8009102:	051b      	lsls	r3, r3, #20
 8009104:	b12b      	cbz	r3, 8009112 <_dtoa_r+0x902>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	f108 0801 	add.w	r8, r8, #1
 8009110:	2301      	movs	r3, #1
 8009112:	9306      	str	r3, [sp, #24]
 8009114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009116:	2b00      	cmp	r3, #0
 8009118:	f47f af74 	bne.w	8009004 <_dtoa_r+0x7f4>
 800911c:	2001      	movs	r0, #1
 800911e:	e779      	b.n	8009014 <_dtoa_r+0x804>
 8009120:	2300      	movs	r3, #0
 8009122:	e7f6      	b.n	8009112 <_dtoa_r+0x902>
 8009124:	9b02      	ldr	r3, [sp, #8]
 8009126:	e7f4      	b.n	8009112 <_dtoa_r+0x902>
 8009128:	d085      	beq.n	8009036 <_dtoa_r+0x826>
 800912a:	4618      	mov	r0, r3
 800912c:	301c      	adds	r0, #28
 800912e:	e77d      	b.n	800902c <_dtoa_r+0x81c>
 8009130:	40240000 	.word	0x40240000
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	dc38      	bgt.n	80091ac <_dtoa_r+0x99c>
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	2b02      	cmp	r3, #2
 800913e:	dd35      	ble.n	80091ac <_dtoa_r+0x99c>
 8009140:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	d10d      	bne.n	8009166 <_dtoa_r+0x956>
 800914a:	4631      	mov	r1, r6
 800914c:	464b      	mov	r3, r9
 800914e:	2205      	movs	r2, #5
 8009150:	4620      	mov	r0, r4
 8009152:	f000 f9b7 	bl	80094c4 <__multadd>
 8009156:	4601      	mov	r1, r0
 8009158:	4606      	mov	r6, r0
 800915a:	4658      	mov	r0, fp
 800915c:	f000 fbce 	bl	80098fc <__mcmp>
 8009160:	2800      	cmp	r0, #0
 8009162:	f73f adbd 	bgt.w	8008ce0 <_dtoa_r+0x4d0>
 8009166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009168:	9d00      	ldr	r5, [sp, #0]
 800916a:	ea6f 0a03 	mvn.w	sl, r3
 800916e:	f04f 0800 	mov.w	r8, #0
 8009172:	4631      	mov	r1, r6
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f983 	bl	8009480 <_Bfree>
 800917a:	2f00      	cmp	r7, #0
 800917c:	f43f aeb4 	beq.w	8008ee8 <_dtoa_r+0x6d8>
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	d005      	beq.n	8009192 <_dtoa_r+0x982>
 8009186:	45b8      	cmp	r8, r7
 8009188:	d003      	beq.n	8009192 <_dtoa_r+0x982>
 800918a:	4641      	mov	r1, r8
 800918c:	4620      	mov	r0, r4
 800918e:	f000 f977 	bl	8009480 <_Bfree>
 8009192:	4639      	mov	r1, r7
 8009194:	4620      	mov	r0, r4
 8009196:	f000 f973 	bl	8009480 <_Bfree>
 800919a:	e6a5      	b.n	8008ee8 <_dtoa_r+0x6d8>
 800919c:	2600      	movs	r6, #0
 800919e:	4637      	mov	r7, r6
 80091a0:	e7e1      	b.n	8009166 <_dtoa_r+0x956>
 80091a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091a8:	4637      	mov	r7, r6
 80091aa:	e599      	b.n	8008ce0 <_dtoa_r+0x4d0>
 80091ac:	9b08      	ldr	r3, [sp, #32]
 80091ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80fd 	beq.w	80093b2 <_dtoa_r+0xba2>
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	dd05      	ble.n	80091c8 <_dtoa_r+0x9b8>
 80091bc:	4639      	mov	r1, r7
 80091be:	462a      	mov	r2, r5
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fb2f 	bl	8009824 <__lshift>
 80091c6:	4607      	mov	r7, r0
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d05c      	beq.n	8009288 <_dtoa_r+0xa78>
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 f915 	bl	8009400 <_Balloc>
 80091d6:	4605      	mov	r5, r0
 80091d8:	b928      	cbnz	r0, 80091e6 <_dtoa_r+0x9d6>
 80091da:	4b80      	ldr	r3, [pc, #512]	; (80093dc <_dtoa_r+0xbcc>)
 80091dc:	4602      	mov	r2, r0
 80091de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091e2:	f7ff bb2e 	b.w	8008842 <_dtoa_r+0x32>
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	3202      	adds	r2, #2
 80091ea:	0092      	lsls	r2, r2, #2
 80091ec:	f107 010c 	add.w	r1, r7, #12
 80091f0:	300c      	adds	r0, #12
 80091f2:	f7fe fd11 	bl	8007c18 <memcpy>
 80091f6:	2201      	movs	r2, #1
 80091f8:	4629      	mov	r1, r5
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fb12 	bl	8009824 <__lshift>
 8009200:	9b00      	ldr	r3, [sp, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	444b      	add	r3, r9
 800920a:	9307      	str	r3, [sp, #28]
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	46b8      	mov	r8, r7
 8009214:	9306      	str	r3, [sp, #24]
 8009216:	4607      	mov	r7, r0
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	4631      	mov	r1, r6
 800921c:	3b01      	subs	r3, #1
 800921e:	4658      	mov	r0, fp
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	f7ff fa69 	bl	80086f8 <quorem>
 8009226:	4603      	mov	r3, r0
 8009228:	3330      	adds	r3, #48	; 0x30
 800922a:	9004      	str	r0, [sp, #16]
 800922c:	4641      	mov	r1, r8
 800922e:	4658      	mov	r0, fp
 8009230:	9308      	str	r3, [sp, #32]
 8009232:	f000 fb63 	bl	80098fc <__mcmp>
 8009236:	463a      	mov	r2, r7
 8009238:	4681      	mov	r9, r0
 800923a:	4631      	mov	r1, r6
 800923c:	4620      	mov	r0, r4
 800923e:	f000 fb79 	bl	8009934 <__mdiff>
 8009242:	68c2      	ldr	r2, [r0, #12]
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	4605      	mov	r5, r0
 8009248:	bb02      	cbnz	r2, 800928c <_dtoa_r+0xa7c>
 800924a:	4601      	mov	r1, r0
 800924c:	4658      	mov	r0, fp
 800924e:	f000 fb55 	bl	80098fc <__mcmp>
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	4602      	mov	r2, r0
 8009256:	4629      	mov	r1, r5
 8009258:	4620      	mov	r0, r4
 800925a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800925e:	f000 f90f 	bl	8009480 <_Bfree>
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009266:	9d01      	ldr	r5, [sp, #4]
 8009268:	ea43 0102 	orr.w	r1, r3, r2
 800926c:	9b06      	ldr	r3, [sp, #24]
 800926e:	430b      	orrs	r3, r1
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	d10d      	bne.n	8009290 <_dtoa_r+0xa80>
 8009274:	2b39      	cmp	r3, #57	; 0x39
 8009276:	d029      	beq.n	80092cc <_dtoa_r+0xabc>
 8009278:	f1b9 0f00 	cmp.w	r9, #0
 800927c:	dd01      	ble.n	8009282 <_dtoa_r+0xa72>
 800927e:	9b04      	ldr	r3, [sp, #16]
 8009280:	3331      	adds	r3, #49	; 0x31
 8009282:	9a02      	ldr	r2, [sp, #8]
 8009284:	7013      	strb	r3, [r2, #0]
 8009286:	e774      	b.n	8009172 <_dtoa_r+0x962>
 8009288:	4638      	mov	r0, r7
 800928a:	e7b9      	b.n	8009200 <_dtoa_r+0x9f0>
 800928c:	2201      	movs	r2, #1
 800928e:	e7e2      	b.n	8009256 <_dtoa_r+0xa46>
 8009290:	f1b9 0f00 	cmp.w	r9, #0
 8009294:	db06      	blt.n	80092a4 <_dtoa_r+0xa94>
 8009296:	9905      	ldr	r1, [sp, #20]
 8009298:	ea41 0909 	orr.w	r9, r1, r9
 800929c:	9906      	ldr	r1, [sp, #24]
 800929e:	ea59 0101 	orrs.w	r1, r9, r1
 80092a2:	d120      	bne.n	80092e6 <_dtoa_r+0xad6>
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	ddec      	ble.n	8009282 <_dtoa_r+0xa72>
 80092a8:	4659      	mov	r1, fp
 80092aa:	2201      	movs	r2, #1
 80092ac:	4620      	mov	r0, r4
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	f000 fab8 	bl	8009824 <__lshift>
 80092b4:	4631      	mov	r1, r6
 80092b6:	4683      	mov	fp, r0
 80092b8:	f000 fb20 	bl	80098fc <__mcmp>
 80092bc:	2800      	cmp	r0, #0
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	dc02      	bgt.n	80092c8 <_dtoa_r+0xab8>
 80092c2:	d1de      	bne.n	8009282 <_dtoa_r+0xa72>
 80092c4:	07da      	lsls	r2, r3, #31
 80092c6:	d5dc      	bpl.n	8009282 <_dtoa_r+0xa72>
 80092c8:	2b39      	cmp	r3, #57	; 0x39
 80092ca:	d1d8      	bne.n	800927e <_dtoa_r+0xa6e>
 80092cc:	9a02      	ldr	r2, [sp, #8]
 80092ce:	2339      	movs	r3, #57	; 0x39
 80092d0:	7013      	strb	r3, [r2, #0]
 80092d2:	462b      	mov	r3, r5
 80092d4:	461d      	mov	r5, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092dc:	2a39      	cmp	r2, #57	; 0x39
 80092de:	d050      	beq.n	8009382 <_dtoa_r+0xb72>
 80092e0:	3201      	adds	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e745      	b.n	8009172 <_dtoa_r+0x962>
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	dd03      	ble.n	80092f2 <_dtoa_r+0xae2>
 80092ea:	2b39      	cmp	r3, #57	; 0x39
 80092ec:	d0ee      	beq.n	80092cc <_dtoa_r+0xabc>
 80092ee:	3301      	adds	r3, #1
 80092f0:	e7c7      	b.n	8009282 <_dtoa_r+0xa72>
 80092f2:	9a01      	ldr	r2, [sp, #4]
 80092f4:	9907      	ldr	r1, [sp, #28]
 80092f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092fa:	428a      	cmp	r2, r1
 80092fc:	d02a      	beq.n	8009354 <_dtoa_r+0xb44>
 80092fe:	4659      	mov	r1, fp
 8009300:	2300      	movs	r3, #0
 8009302:	220a      	movs	r2, #10
 8009304:	4620      	mov	r0, r4
 8009306:	f000 f8dd 	bl	80094c4 <__multadd>
 800930a:	45b8      	cmp	r8, r7
 800930c:	4683      	mov	fp, r0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	f04f 020a 	mov.w	r2, #10
 8009316:	4641      	mov	r1, r8
 8009318:	4620      	mov	r0, r4
 800931a:	d107      	bne.n	800932c <_dtoa_r+0xb1c>
 800931c:	f000 f8d2 	bl	80094c4 <__multadd>
 8009320:	4680      	mov	r8, r0
 8009322:	4607      	mov	r7, r0
 8009324:	9b01      	ldr	r3, [sp, #4]
 8009326:	3301      	adds	r3, #1
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	e775      	b.n	8009218 <_dtoa_r+0xa08>
 800932c:	f000 f8ca 	bl	80094c4 <__multadd>
 8009330:	4639      	mov	r1, r7
 8009332:	4680      	mov	r8, r0
 8009334:	2300      	movs	r3, #0
 8009336:	220a      	movs	r2, #10
 8009338:	4620      	mov	r0, r4
 800933a:	f000 f8c3 	bl	80094c4 <__multadd>
 800933e:	4607      	mov	r7, r0
 8009340:	e7f0      	b.n	8009324 <_dtoa_r+0xb14>
 8009342:	f1b9 0f00 	cmp.w	r9, #0
 8009346:	9a00      	ldr	r2, [sp, #0]
 8009348:	bfcc      	ite	gt
 800934a:	464d      	movgt	r5, r9
 800934c:	2501      	movle	r5, #1
 800934e:	4415      	add	r5, r2
 8009350:	f04f 0800 	mov.w	r8, #0
 8009354:	4659      	mov	r1, fp
 8009356:	2201      	movs	r2, #1
 8009358:	4620      	mov	r0, r4
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	f000 fa62 	bl	8009824 <__lshift>
 8009360:	4631      	mov	r1, r6
 8009362:	4683      	mov	fp, r0
 8009364:	f000 faca 	bl	80098fc <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	dcb2      	bgt.n	80092d2 <_dtoa_r+0xac2>
 800936c:	d102      	bne.n	8009374 <_dtoa_r+0xb64>
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	07db      	lsls	r3, r3, #31
 8009372:	d4ae      	bmi.n	80092d2 <_dtoa_r+0xac2>
 8009374:	462b      	mov	r3, r5
 8009376:	461d      	mov	r5, r3
 8009378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937c:	2a30      	cmp	r2, #48	; 0x30
 800937e:	d0fa      	beq.n	8009376 <_dtoa_r+0xb66>
 8009380:	e6f7      	b.n	8009172 <_dtoa_r+0x962>
 8009382:	9a00      	ldr	r2, [sp, #0]
 8009384:	429a      	cmp	r2, r3
 8009386:	d1a5      	bne.n	80092d4 <_dtoa_r+0xac4>
 8009388:	f10a 0a01 	add.w	sl, sl, #1
 800938c:	2331      	movs	r3, #49	; 0x31
 800938e:	e779      	b.n	8009284 <_dtoa_r+0xa74>
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <_dtoa_r+0xbd0>)
 8009392:	f7ff baaf 	b.w	80088f4 <_dtoa_r+0xe4>
 8009396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	f47f aa86 	bne.w	80088aa <_dtoa_r+0x9a>
 800939e:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <_dtoa_r+0xbd4>)
 80093a0:	f7ff baa8 	b.w	80088f4 <_dtoa_r+0xe4>
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	dc03      	bgt.n	80093b2 <_dtoa_r+0xba2>
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	f73f aec9 	bgt.w	8009144 <_dtoa_r+0x934>
 80093b2:	9d00      	ldr	r5, [sp, #0]
 80093b4:	4631      	mov	r1, r6
 80093b6:	4658      	mov	r0, fp
 80093b8:	f7ff f99e 	bl	80086f8 <quorem>
 80093bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093c0:	f805 3b01 	strb.w	r3, [r5], #1
 80093c4:	9a00      	ldr	r2, [sp, #0]
 80093c6:	1aaa      	subs	r2, r5, r2
 80093c8:	4591      	cmp	r9, r2
 80093ca:	ddba      	ble.n	8009342 <_dtoa_r+0xb32>
 80093cc:	4659      	mov	r1, fp
 80093ce:	2300      	movs	r3, #0
 80093d0:	220a      	movs	r2, #10
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 f876 	bl	80094c4 <__multadd>
 80093d8:	4683      	mov	fp, r0
 80093da:	e7eb      	b.n	80093b4 <_dtoa_r+0xba4>
 80093dc:	0800b459 	.word	0x0800b459
 80093e0:	0800b28c 	.word	0x0800b28c
 80093e4:	0800b3d6 	.word	0x0800b3d6

080093e8 <_localeconv_r>:
 80093e8:	4800      	ldr	r0, [pc, #0]	; (80093ec <_localeconv_r+0x4>)
 80093ea:	4770      	bx	lr
 80093ec:	20000170 	.word	0x20000170

080093f0 <malloc>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <malloc+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f000 bbe1 	b.w	8009bbc <_malloc_r>
 80093fa:	bf00      	nop
 80093fc:	2000001c 	.word	0x2000001c

08009400 <_Balloc>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009404:	4604      	mov	r4, r0
 8009406:	460d      	mov	r5, r1
 8009408:	b976      	cbnz	r6, 8009428 <_Balloc+0x28>
 800940a:	2010      	movs	r0, #16
 800940c:	f7ff fff0 	bl	80093f0 <malloc>
 8009410:	4602      	mov	r2, r0
 8009412:	6260      	str	r0, [r4, #36]	; 0x24
 8009414:	b920      	cbnz	r0, 8009420 <_Balloc+0x20>
 8009416:	4b18      	ldr	r3, [pc, #96]	; (8009478 <_Balloc+0x78>)
 8009418:	4818      	ldr	r0, [pc, #96]	; (800947c <_Balloc+0x7c>)
 800941a:	2166      	movs	r1, #102	; 0x66
 800941c:	f000 fd94 	bl	8009f48 <__assert_func>
 8009420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009424:	6006      	str	r6, [r0, #0]
 8009426:	60c6      	str	r6, [r0, #12]
 8009428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800942a:	68f3      	ldr	r3, [r6, #12]
 800942c:	b183      	cbz	r3, 8009450 <_Balloc+0x50>
 800942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009436:	b9b8      	cbnz	r0, 8009468 <_Balloc+0x68>
 8009438:	2101      	movs	r1, #1
 800943a:	fa01 f605 	lsl.w	r6, r1, r5
 800943e:	1d72      	adds	r2, r6, #5
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fb5a 	bl	8009afc <_calloc_r>
 8009448:	b160      	cbz	r0, 8009464 <_Balloc+0x64>
 800944a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800944e:	e00e      	b.n	800946e <_Balloc+0x6e>
 8009450:	2221      	movs	r2, #33	; 0x21
 8009452:	2104      	movs	r1, #4
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fb51 	bl	8009afc <_calloc_r>
 800945a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945c:	60f0      	str	r0, [r6, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e4      	bne.n	800942e <_Balloc+0x2e>
 8009464:	2000      	movs	r0, #0
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	6802      	ldr	r2, [r0, #0]
 800946a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800946e:	2300      	movs	r3, #0
 8009470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009474:	e7f7      	b.n	8009466 <_Balloc+0x66>
 8009476:	bf00      	nop
 8009478:	0800b3e3 	.word	0x0800b3e3
 800947c:	0800b46a 	.word	0x0800b46a

08009480 <_Bfree>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009484:	4605      	mov	r5, r0
 8009486:	460c      	mov	r4, r1
 8009488:	b976      	cbnz	r6, 80094a8 <_Bfree+0x28>
 800948a:	2010      	movs	r0, #16
 800948c:	f7ff ffb0 	bl	80093f0 <malloc>
 8009490:	4602      	mov	r2, r0
 8009492:	6268      	str	r0, [r5, #36]	; 0x24
 8009494:	b920      	cbnz	r0, 80094a0 <_Bfree+0x20>
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <_Bfree+0x3c>)
 8009498:	4809      	ldr	r0, [pc, #36]	; (80094c0 <_Bfree+0x40>)
 800949a:	218a      	movs	r1, #138	; 0x8a
 800949c:	f000 fd54 	bl	8009f48 <__assert_func>
 80094a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a4:	6006      	str	r6, [r0, #0]
 80094a6:	60c6      	str	r6, [r0, #12]
 80094a8:	b13c      	cbz	r4, 80094ba <_Bfree+0x3a>
 80094aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094ac:	6862      	ldr	r2, [r4, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b4:	6021      	str	r1, [r4, #0]
 80094b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	0800b3e3 	.word	0x0800b3e3
 80094c0:	0800b46a 	.word	0x0800b46a

080094c4 <__multadd>:
 80094c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	690e      	ldr	r6, [r1, #16]
 80094ca:	4607      	mov	r7, r0
 80094cc:	4698      	mov	r8, r3
 80094ce:	460c      	mov	r4, r1
 80094d0:	f101 0014 	add.w	r0, r1, #20
 80094d4:	2300      	movs	r3, #0
 80094d6:	6805      	ldr	r5, [r0, #0]
 80094d8:	b2a9      	uxth	r1, r5
 80094da:	fb02 8101 	mla	r1, r2, r1, r8
 80094de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094e2:	0c2d      	lsrs	r5, r5, #16
 80094e4:	fb02 c505 	mla	r5, r2, r5, ip
 80094e8:	b289      	uxth	r1, r1
 80094ea:	3301      	adds	r3, #1
 80094ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80094f0:	429e      	cmp	r6, r3
 80094f2:	f840 1b04 	str.w	r1, [r0], #4
 80094f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80094fa:	dcec      	bgt.n	80094d6 <__multadd+0x12>
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	d022      	beq.n	8009548 <__multadd+0x84>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	42b3      	cmp	r3, r6
 8009506:	dc19      	bgt.n	800953c <__multadd+0x78>
 8009508:	6861      	ldr	r1, [r4, #4]
 800950a:	4638      	mov	r0, r7
 800950c:	3101      	adds	r1, #1
 800950e:	f7ff ff77 	bl	8009400 <_Balloc>
 8009512:	4605      	mov	r5, r0
 8009514:	b928      	cbnz	r0, 8009522 <__multadd+0x5e>
 8009516:	4602      	mov	r2, r0
 8009518:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <__multadd+0x8c>)
 800951a:	480e      	ldr	r0, [pc, #56]	; (8009554 <__multadd+0x90>)
 800951c:	21b5      	movs	r1, #181	; 0xb5
 800951e:	f000 fd13 	bl	8009f48 <__assert_func>
 8009522:	6922      	ldr	r2, [r4, #16]
 8009524:	3202      	adds	r2, #2
 8009526:	f104 010c 	add.w	r1, r4, #12
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	300c      	adds	r0, #12
 800952e:	f7fe fb73 	bl	8007c18 <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff ffa3 	bl	8009480 <_Bfree>
 800953a:	462c      	mov	r4, r5
 800953c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009540:	3601      	adds	r6, #1
 8009542:	f8c3 8014 	str.w	r8, [r3, #20]
 8009546:	6126      	str	r6, [r4, #16]
 8009548:	4620      	mov	r0, r4
 800954a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954e:	bf00      	nop
 8009550:	0800b459 	.word	0x0800b459
 8009554:	0800b46a 	.word	0x0800b46a

08009558 <__hi0bits>:
 8009558:	0c03      	lsrs	r3, r0, #16
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	b9d3      	cbnz	r3, 8009594 <__hi0bits+0x3c>
 800955e:	0400      	lsls	r0, r0, #16
 8009560:	2310      	movs	r3, #16
 8009562:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009566:	bf04      	itt	eq
 8009568:	0200      	lsleq	r0, r0, #8
 800956a:	3308      	addeq	r3, #8
 800956c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009570:	bf04      	itt	eq
 8009572:	0100      	lsleq	r0, r0, #4
 8009574:	3304      	addeq	r3, #4
 8009576:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800957a:	bf04      	itt	eq
 800957c:	0080      	lsleq	r0, r0, #2
 800957e:	3302      	addeq	r3, #2
 8009580:	2800      	cmp	r0, #0
 8009582:	db05      	blt.n	8009590 <__hi0bits+0x38>
 8009584:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009588:	f103 0301 	add.w	r3, r3, #1
 800958c:	bf08      	it	eq
 800958e:	2320      	moveq	r3, #32
 8009590:	4618      	mov	r0, r3
 8009592:	4770      	bx	lr
 8009594:	2300      	movs	r3, #0
 8009596:	e7e4      	b.n	8009562 <__hi0bits+0xa>

08009598 <__lo0bits>:
 8009598:	6803      	ldr	r3, [r0, #0]
 800959a:	f013 0207 	ands.w	r2, r3, #7
 800959e:	4601      	mov	r1, r0
 80095a0:	d00b      	beq.n	80095ba <__lo0bits+0x22>
 80095a2:	07da      	lsls	r2, r3, #31
 80095a4:	d424      	bmi.n	80095f0 <__lo0bits+0x58>
 80095a6:	0798      	lsls	r0, r3, #30
 80095a8:	bf49      	itett	mi
 80095aa:	085b      	lsrmi	r3, r3, #1
 80095ac:	089b      	lsrpl	r3, r3, #2
 80095ae:	2001      	movmi	r0, #1
 80095b0:	600b      	strmi	r3, [r1, #0]
 80095b2:	bf5c      	itt	pl
 80095b4:	600b      	strpl	r3, [r1, #0]
 80095b6:	2002      	movpl	r0, #2
 80095b8:	4770      	bx	lr
 80095ba:	b298      	uxth	r0, r3
 80095bc:	b9b0      	cbnz	r0, 80095ec <__lo0bits+0x54>
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	2010      	movs	r0, #16
 80095c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095c6:	bf04      	itt	eq
 80095c8:	0a1b      	lsreq	r3, r3, #8
 80095ca:	3008      	addeq	r0, #8
 80095cc:	071a      	lsls	r2, r3, #28
 80095ce:	bf04      	itt	eq
 80095d0:	091b      	lsreq	r3, r3, #4
 80095d2:	3004      	addeq	r0, #4
 80095d4:	079a      	lsls	r2, r3, #30
 80095d6:	bf04      	itt	eq
 80095d8:	089b      	lsreq	r3, r3, #2
 80095da:	3002      	addeq	r0, #2
 80095dc:	07da      	lsls	r2, r3, #31
 80095de:	d403      	bmi.n	80095e8 <__lo0bits+0x50>
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	f100 0001 	add.w	r0, r0, #1
 80095e6:	d005      	beq.n	80095f4 <__lo0bits+0x5c>
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	4770      	bx	lr
 80095ec:	4610      	mov	r0, r2
 80095ee:	e7e8      	b.n	80095c2 <__lo0bits+0x2a>
 80095f0:	2000      	movs	r0, #0
 80095f2:	4770      	bx	lr
 80095f4:	2020      	movs	r0, #32
 80095f6:	4770      	bx	lr

080095f8 <__i2b>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	2101      	movs	r1, #1
 80095fe:	f7ff feff 	bl	8009400 <_Balloc>
 8009602:	4602      	mov	r2, r0
 8009604:	b928      	cbnz	r0, 8009612 <__i2b+0x1a>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <__i2b+0x24>)
 8009608:	4805      	ldr	r0, [pc, #20]	; (8009620 <__i2b+0x28>)
 800960a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800960e:	f000 fc9b 	bl	8009f48 <__assert_func>
 8009612:	2301      	movs	r3, #1
 8009614:	6144      	str	r4, [r0, #20]
 8009616:	6103      	str	r3, [r0, #16]
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	0800b459 	.word	0x0800b459
 8009620:	0800b46a 	.word	0x0800b46a

08009624 <__multiply>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4614      	mov	r4, r2
 800962a:	690a      	ldr	r2, [r1, #16]
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	429a      	cmp	r2, r3
 8009630:	bfb8      	it	lt
 8009632:	460b      	movlt	r3, r1
 8009634:	460d      	mov	r5, r1
 8009636:	bfbc      	itt	lt
 8009638:	4625      	movlt	r5, r4
 800963a:	461c      	movlt	r4, r3
 800963c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009640:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009644:	68ab      	ldr	r3, [r5, #8]
 8009646:	6869      	ldr	r1, [r5, #4]
 8009648:	eb0a 0709 	add.w	r7, sl, r9
 800964c:	42bb      	cmp	r3, r7
 800964e:	b085      	sub	sp, #20
 8009650:	bfb8      	it	lt
 8009652:	3101      	addlt	r1, #1
 8009654:	f7ff fed4 	bl	8009400 <_Balloc>
 8009658:	b930      	cbnz	r0, 8009668 <__multiply+0x44>
 800965a:	4602      	mov	r2, r0
 800965c:	4b42      	ldr	r3, [pc, #264]	; (8009768 <__multiply+0x144>)
 800965e:	4843      	ldr	r0, [pc, #268]	; (800976c <__multiply+0x148>)
 8009660:	f240 115d 	movw	r1, #349	; 0x15d
 8009664:	f000 fc70 	bl	8009f48 <__assert_func>
 8009668:	f100 0614 	add.w	r6, r0, #20
 800966c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009670:	4633      	mov	r3, r6
 8009672:	2200      	movs	r2, #0
 8009674:	4543      	cmp	r3, r8
 8009676:	d31e      	bcc.n	80096b6 <__multiply+0x92>
 8009678:	f105 0c14 	add.w	ip, r5, #20
 800967c:	f104 0314 	add.w	r3, r4, #20
 8009680:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009684:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	ebac 0205 	sub.w	r2, ip, r5
 800968e:	3a15      	subs	r2, #21
 8009690:	f022 0203 	bic.w	r2, r2, #3
 8009694:	3204      	adds	r2, #4
 8009696:	f105 0115 	add.w	r1, r5, #21
 800969a:	458c      	cmp	ip, r1
 800969c:	bf38      	it	cc
 800969e:	2204      	movcc	r2, #4
 80096a0:	9201      	str	r2, [sp, #4]
 80096a2:	9a02      	ldr	r2, [sp, #8]
 80096a4:	9303      	str	r3, [sp, #12]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d808      	bhi.n	80096bc <__multiply+0x98>
 80096aa:	2f00      	cmp	r7, #0
 80096ac:	dc55      	bgt.n	800975a <__multiply+0x136>
 80096ae:	6107      	str	r7, [r0, #16]
 80096b0:	b005      	add	sp, #20
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	f843 2b04 	str.w	r2, [r3], #4
 80096ba:	e7db      	b.n	8009674 <__multiply+0x50>
 80096bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c0:	f1ba 0f00 	cmp.w	sl, #0
 80096c4:	d020      	beq.n	8009708 <__multiply+0xe4>
 80096c6:	f105 0e14 	add.w	lr, r5, #20
 80096ca:	46b1      	mov	r9, r6
 80096cc:	2200      	movs	r2, #0
 80096ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096d2:	f8d9 b000 	ldr.w	fp, [r9]
 80096d6:	b2a1      	uxth	r1, r4
 80096d8:	fa1f fb8b 	uxth.w	fp, fp
 80096dc:	fb0a b101 	mla	r1, sl, r1, fp
 80096e0:	4411      	add	r1, r2
 80096e2:	f8d9 2000 	ldr.w	r2, [r9]
 80096e6:	0c24      	lsrs	r4, r4, #16
 80096e8:	0c12      	lsrs	r2, r2, #16
 80096ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80096ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80096f2:	b289      	uxth	r1, r1
 80096f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80096f8:	45f4      	cmp	ip, lr
 80096fa:	f849 1b04 	str.w	r1, [r9], #4
 80096fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009702:	d8e4      	bhi.n	80096ce <__multiply+0xaa>
 8009704:	9901      	ldr	r1, [sp, #4]
 8009706:	5072      	str	r2, [r6, r1]
 8009708:	9a03      	ldr	r2, [sp, #12]
 800970a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800970e:	3304      	adds	r3, #4
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	d01f      	beq.n	8009756 <__multiply+0x132>
 8009716:	6834      	ldr	r4, [r6, #0]
 8009718:	f105 0114 	add.w	r1, r5, #20
 800971c:	46b6      	mov	lr, r6
 800971e:	f04f 0a00 	mov.w	sl, #0
 8009722:	880a      	ldrh	r2, [r1, #0]
 8009724:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009728:	fb09 b202 	mla	r2, r9, r2, fp
 800972c:	4492      	add	sl, r2
 800972e:	b2a4      	uxth	r4, r4
 8009730:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009734:	f84e 4b04 	str.w	r4, [lr], #4
 8009738:	f851 4b04 	ldr.w	r4, [r1], #4
 800973c:	f8be 2000 	ldrh.w	r2, [lr]
 8009740:	0c24      	lsrs	r4, r4, #16
 8009742:	fb09 2404 	mla	r4, r9, r4, r2
 8009746:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800974a:	458c      	cmp	ip, r1
 800974c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009750:	d8e7      	bhi.n	8009722 <__multiply+0xfe>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	50b4      	str	r4, [r6, r2]
 8009756:	3604      	adds	r6, #4
 8009758:	e7a3      	b.n	80096a2 <__multiply+0x7e>
 800975a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1a5      	bne.n	80096ae <__multiply+0x8a>
 8009762:	3f01      	subs	r7, #1
 8009764:	e7a1      	b.n	80096aa <__multiply+0x86>
 8009766:	bf00      	nop
 8009768:	0800b459 	.word	0x0800b459
 800976c:	0800b46a 	.word	0x0800b46a

08009770 <__pow5mult>:
 8009770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009774:	4615      	mov	r5, r2
 8009776:	f012 0203 	ands.w	r2, r2, #3
 800977a:	4606      	mov	r6, r0
 800977c:	460f      	mov	r7, r1
 800977e:	d007      	beq.n	8009790 <__pow5mult+0x20>
 8009780:	4c25      	ldr	r4, [pc, #148]	; (8009818 <__pow5mult+0xa8>)
 8009782:	3a01      	subs	r2, #1
 8009784:	2300      	movs	r3, #0
 8009786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978a:	f7ff fe9b 	bl	80094c4 <__multadd>
 800978e:	4607      	mov	r7, r0
 8009790:	10ad      	asrs	r5, r5, #2
 8009792:	d03d      	beq.n	8009810 <__pow5mult+0xa0>
 8009794:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009796:	b97c      	cbnz	r4, 80097b8 <__pow5mult+0x48>
 8009798:	2010      	movs	r0, #16
 800979a:	f7ff fe29 	bl	80093f0 <malloc>
 800979e:	4602      	mov	r2, r0
 80097a0:	6270      	str	r0, [r6, #36]	; 0x24
 80097a2:	b928      	cbnz	r0, 80097b0 <__pow5mult+0x40>
 80097a4:	4b1d      	ldr	r3, [pc, #116]	; (800981c <__pow5mult+0xac>)
 80097a6:	481e      	ldr	r0, [pc, #120]	; (8009820 <__pow5mult+0xb0>)
 80097a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097ac:	f000 fbcc 	bl	8009f48 <__assert_func>
 80097b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097b4:	6004      	str	r4, [r0, #0]
 80097b6:	60c4      	str	r4, [r0, #12]
 80097b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c0:	b94c      	cbnz	r4, 80097d6 <__pow5mult+0x66>
 80097c2:	f240 2171 	movw	r1, #625	; 0x271
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ff16 	bl	80095f8 <__i2b>
 80097cc:	2300      	movs	r3, #0
 80097ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80097d2:	4604      	mov	r4, r0
 80097d4:	6003      	str	r3, [r0, #0]
 80097d6:	f04f 0900 	mov.w	r9, #0
 80097da:	07eb      	lsls	r3, r5, #31
 80097dc:	d50a      	bpl.n	80097f4 <__pow5mult+0x84>
 80097de:	4639      	mov	r1, r7
 80097e0:	4622      	mov	r2, r4
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff ff1e 	bl	8009624 <__multiply>
 80097e8:	4639      	mov	r1, r7
 80097ea:	4680      	mov	r8, r0
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7ff fe47 	bl	8009480 <_Bfree>
 80097f2:	4647      	mov	r7, r8
 80097f4:	106d      	asrs	r5, r5, #1
 80097f6:	d00b      	beq.n	8009810 <__pow5mult+0xa0>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	b938      	cbnz	r0, 800980c <__pow5mult+0x9c>
 80097fc:	4622      	mov	r2, r4
 80097fe:	4621      	mov	r1, r4
 8009800:	4630      	mov	r0, r6
 8009802:	f7ff ff0f 	bl	8009624 <__multiply>
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	f8c0 9000 	str.w	r9, [r0]
 800980c:	4604      	mov	r4, r0
 800980e:	e7e4      	b.n	80097da <__pow5mult+0x6a>
 8009810:	4638      	mov	r0, r7
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009816:	bf00      	nop
 8009818:	0800b5c0 	.word	0x0800b5c0
 800981c:	0800b3e3 	.word	0x0800b3e3
 8009820:	0800b46a 	.word	0x0800b46a

08009824 <__lshift>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	6849      	ldr	r1, [r1, #4]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	4607      	mov	r7, r0
 8009836:	4691      	mov	r9, r2
 8009838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800983c:	f108 0601 	add.w	r6, r8, #1
 8009840:	42b3      	cmp	r3, r6
 8009842:	db0b      	blt.n	800985c <__lshift+0x38>
 8009844:	4638      	mov	r0, r7
 8009846:	f7ff fddb 	bl	8009400 <_Balloc>
 800984a:	4605      	mov	r5, r0
 800984c:	b948      	cbnz	r0, 8009862 <__lshift+0x3e>
 800984e:	4602      	mov	r2, r0
 8009850:	4b28      	ldr	r3, [pc, #160]	; (80098f4 <__lshift+0xd0>)
 8009852:	4829      	ldr	r0, [pc, #164]	; (80098f8 <__lshift+0xd4>)
 8009854:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009858:	f000 fb76 	bl	8009f48 <__assert_func>
 800985c:	3101      	adds	r1, #1
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	e7ee      	b.n	8009840 <__lshift+0x1c>
 8009862:	2300      	movs	r3, #0
 8009864:	f100 0114 	add.w	r1, r0, #20
 8009868:	f100 0210 	add.w	r2, r0, #16
 800986c:	4618      	mov	r0, r3
 800986e:	4553      	cmp	r3, sl
 8009870:	db33      	blt.n	80098da <__lshift+0xb6>
 8009872:	6920      	ldr	r0, [r4, #16]
 8009874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009878:	f104 0314 	add.w	r3, r4, #20
 800987c:	f019 091f 	ands.w	r9, r9, #31
 8009880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009888:	d02b      	beq.n	80098e2 <__lshift+0xbe>
 800988a:	f1c9 0e20 	rsb	lr, r9, #32
 800988e:	468a      	mov	sl, r1
 8009890:	2200      	movs	r2, #0
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	fa00 f009 	lsl.w	r0, r0, r9
 8009898:	4302      	orrs	r2, r0
 800989a:	f84a 2b04 	str.w	r2, [sl], #4
 800989e:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a2:	459c      	cmp	ip, r3
 80098a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80098a8:	d8f3      	bhi.n	8009892 <__lshift+0x6e>
 80098aa:	ebac 0304 	sub.w	r3, ip, r4
 80098ae:	3b15      	subs	r3, #21
 80098b0:	f023 0303 	bic.w	r3, r3, #3
 80098b4:	3304      	adds	r3, #4
 80098b6:	f104 0015 	add.w	r0, r4, #21
 80098ba:	4584      	cmp	ip, r0
 80098bc:	bf38      	it	cc
 80098be:	2304      	movcc	r3, #4
 80098c0:	50ca      	str	r2, [r1, r3]
 80098c2:	b10a      	cbz	r2, 80098c8 <__lshift+0xa4>
 80098c4:	f108 0602 	add.w	r6, r8, #2
 80098c8:	3e01      	subs	r6, #1
 80098ca:	4638      	mov	r0, r7
 80098cc:	612e      	str	r6, [r5, #16]
 80098ce:	4621      	mov	r1, r4
 80098d0:	f7ff fdd6 	bl	8009480 <_Bfree>
 80098d4:	4628      	mov	r0, r5
 80098d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098da:	f842 0f04 	str.w	r0, [r2, #4]!
 80098de:	3301      	adds	r3, #1
 80098e0:	e7c5      	b.n	800986e <__lshift+0x4a>
 80098e2:	3904      	subs	r1, #4
 80098e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098ec:	459c      	cmp	ip, r3
 80098ee:	d8f9      	bhi.n	80098e4 <__lshift+0xc0>
 80098f0:	e7ea      	b.n	80098c8 <__lshift+0xa4>
 80098f2:	bf00      	nop
 80098f4:	0800b459 	.word	0x0800b459
 80098f8:	0800b46a 	.word	0x0800b46a

080098fc <__mcmp>:
 80098fc:	b530      	push	{r4, r5, lr}
 80098fe:	6902      	ldr	r2, [r0, #16]
 8009900:	690c      	ldr	r4, [r1, #16]
 8009902:	1b12      	subs	r2, r2, r4
 8009904:	d10e      	bne.n	8009924 <__mcmp+0x28>
 8009906:	f100 0314 	add.w	r3, r0, #20
 800990a:	3114      	adds	r1, #20
 800990c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009910:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009914:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009918:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800991c:	42a5      	cmp	r5, r4
 800991e:	d003      	beq.n	8009928 <__mcmp+0x2c>
 8009920:	d305      	bcc.n	800992e <__mcmp+0x32>
 8009922:	2201      	movs	r2, #1
 8009924:	4610      	mov	r0, r2
 8009926:	bd30      	pop	{r4, r5, pc}
 8009928:	4283      	cmp	r3, r0
 800992a:	d3f3      	bcc.n	8009914 <__mcmp+0x18>
 800992c:	e7fa      	b.n	8009924 <__mcmp+0x28>
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	e7f7      	b.n	8009924 <__mcmp+0x28>

08009934 <__mdiff>:
 8009934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	460c      	mov	r4, r1
 800993a:	4606      	mov	r6, r0
 800993c:	4611      	mov	r1, r2
 800993e:	4620      	mov	r0, r4
 8009940:	4617      	mov	r7, r2
 8009942:	f7ff ffdb 	bl	80098fc <__mcmp>
 8009946:	1e05      	subs	r5, r0, #0
 8009948:	d110      	bne.n	800996c <__mdiff+0x38>
 800994a:	4629      	mov	r1, r5
 800994c:	4630      	mov	r0, r6
 800994e:	f7ff fd57 	bl	8009400 <_Balloc>
 8009952:	b930      	cbnz	r0, 8009962 <__mdiff+0x2e>
 8009954:	4b39      	ldr	r3, [pc, #228]	; (8009a3c <__mdiff+0x108>)
 8009956:	4602      	mov	r2, r0
 8009958:	f240 2132 	movw	r1, #562	; 0x232
 800995c:	4838      	ldr	r0, [pc, #224]	; (8009a40 <__mdiff+0x10c>)
 800995e:	f000 faf3 	bl	8009f48 <__assert_func>
 8009962:	2301      	movs	r3, #1
 8009964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	bfa4      	itt	ge
 800996e:	463b      	movge	r3, r7
 8009970:	4627      	movge	r7, r4
 8009972:	4630      	mov	r0, r6
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	bfa6      	itte	ge
 8009978:	461c      	movge	r4, r3
 800997a:	2500      	movge	r5, #0
 800997c:	2501      	movlt	r5, #1
 800997e:	f7ff fd3f 	bl	8009400 <_Balloc>
 8009982:	b920      	cbnz	r0, 800998e <__mdiff+0x5a>
 8009984:	4b2d      	ldr	r3, [pc, #180]	; (8009a3c <__mdiff+0x108>)
 8009986:	4602      	mov	r2, r0
 8009988:	f44f 7110 	mov.w	r1, #576	; 0x240
 800998c:	e7e6      	b.n	800995c <__mdiff+0x28>
 800998e:	693e      	ldr	r6, [r7, #16]
 8009990:	60c5      	str	r5, [r0, #12]
 8009992:	6925      	ldr	r5, [r4, #16]
 8009994:	f107 0114 	add.w	r1, r7, #20
 8009998:	f104 0914 	add.w	r9, r4, #20
 800999c:	f100 0e14 	add.w	lr, r0, #20
 80099a0:	f107 0210 	add.w	r2, r7, #16
 80099a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099ac:	46f2      	mov	sl, lr
 80099ae:	2700      	movs	r7, #0
 80099b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80099b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099b8:	fa1f f883 	uxth.w	r8, r3
 80099bc:	fa17 f78b 	uxtah	r7, r7, fp
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	eba7 0808 	sub.w	r8, r7, r8
 80099c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099ce:	fa1f f888 	uxth.w	r8, r8
 80099d2:	141f      	asrs	r7, r3, #16
 80099d4:	454d      	cmp	r5, r9
 80099d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099da:	f84a 3b04 	str.w	r3, [sl], #4
 80099de:	d8e7      	bhi.n	80099b0 <__mdiff+0x7c>
 80099e0:	1b2b      	subs	r3, r5, r4
 80099e2:	3b15      	subs	r3, #21
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	3304      	adds	r3, #4
 80099ea:	3415      	adds	r4, #21
 80099ec:	42a5      	cmp	r5, r4
 80099ee:	bf38      	it	cc
 80099f0:	2304      	movcc	r3, #4
 80099f2:	4419      	add	r1, r3
 80099f4:	4473      	add	r3, lr
 80099f6:	469e      	mov	lr, r3
 80099f8:	460d      	mov	r5, r1
 80099fa:	4565      	cmp	r5, ip
 80099fc:	d30e      	bcc.n	8009a1c <__mdiff+0xe8>
 80099fe:	f10c 0203 	add.w	r2, ip, #3
 8009a02:	1a52      	subs	r2, r2, r1
 8009a04:	f022 0203 	bic.w	r2, r2, #3
 8009a08:	3903      	subs	r1, #3
 8009a0a:	458c      	cmp	ip, r1
 8009a0c:	bf38      	it	cc
 8009a0e:	2200      	movcc	r2, #0
 8009a10:	441a      	add	r2, r3
 8009a12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a16:	b17b      	cbz	r3, 8009a38 <__mdiff+0x104>
 8009a18:	6106      	str	r6, [r0, #16]
 8009a1a:	e7a5      	b.n	8009968 <__mdiff+0x34>
 8009a1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a20:	fa17 f488 	uxtah	r4, r7, r8
 8009a24:	1422      	asrs	r2, r4, #16
 8009a26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a2a:	b2a4      	uxth	r4, r4
 8009a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a30:	f84e 4b04 	str.w	r4, [lr], #4
 8009a34:	1417      	asrs	r7, r2, #16
 8009a36:	e7e0      	b.n	80099fa <__mdiff+0xc6>
 8009a38:	3e01      	subs	r6, #1
 8009a3a:	e7ea      	b.n	8009a12 <__mdiff+0xde>
 8009a3c:	0800b459 	.word	0x0800b459
 8009a40:	0800b46a 	.word	0x0800b46a

08009a44 <__d2b>:
 8009a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a48:	4689      	mov	r9, r1
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	ec57 6b10 	vmov	r6, r7, d0
 8009a50:	4690      	mov	r8, r2
 8009a52:	f7ff fcd5 	bl	8009400 <_Balloc>
 8009a56:	4604      	mov	r4, r0
 8009a58:	b930      	cbnz	r0, 8009a68 <__d2b+0x24>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4b25      	ldr	r3, [pc, #148]	; (8009af4 <__d2b+0xb0>)
 8009a5e:	4826      	ldr	r0, [pc, #152]	; (8009af8 <__d2b+0xb4>)
 8009a60:	f240 310a 	movw	r1, #778	; 0x30a
 8009a64:	f000 fa70 	bl	8009f48 <__assert_func>
 8009a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a70:	bb35      	cbnz	r5, 8009ac0 <__d2b+0x7c>
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	d028      	beq.n	8009aca <__d2b+0x86>
 8009a78:	4668      	mov	r0, sp
 8009a7a:	9600      	str	r6, [sp, #0]
 8009a7c:	f7ff fd8c 	bl	8009598 <__lo0bits>
 8009a80:	9900      	ldr	r1, [sp, #0]
 8009a82:	b300      	cbz	r0, 8009ac6 <__d2b+0x82>
 8009a84:	9a01      	ldr	r2, [sp, #4]
 8009a86:	f1c0 0320 	rsb	r3, r0, #32
 8009a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	40c2      	lsrs	r2, r0
 8009a92:	6163      	str	r3, [r4, #20]
 8009a94:	9201      	str	r2, [sp, #4]
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	61a3      	str	r3, [r4, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bf14      	ite	ne
 8009a9e:	2202      	movne	r2, #2
 8009aa0:	2201      	moveq	r2, #1
 8009aa2:	6122      	str	r2, [r4, #16]
 8009aa4:	b1d5      	cbz	r5, 8009adc <__d2b+0x98>
 8009aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aaa:	4405      	add	r5, r0
 8009aac:	f8c9 5000 	str.w	r5, [r9]
 8009ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ab4:	f8c8 0000 	str.w	r0, [r8]
 8009ab8:	4620      	mov	r0, r4
 8009aba:	b003      	add	sp, #12
 8009abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ac4:	e7d5      	b.n	8009a72 <__d2b+0x2e>
 8009ac6:	6161      	str	r1, [r4, #20]
 8009ac8:	e7e5      	b.n	8009a96 <__d2b+0x52>
 8009aca:	a801      	add	r0, sp, #4
 8009acc:	f7ff fd64 	bl	8009598 <__lo0bits>
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	6122      	str	r2, [r4, #16]
 8009ad8:	3020      	adds	r0, #32
 8009ada:	e7e3      	b.n	8009aa4 <__d2b+0x60>
 8009adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ae4:	f8c9 0000 	str.w	r0, [r9]
 8009ae8:	6918      	ldr	r0, [r3, #16]
 8009aea:	f7ff fd35 	bl	8009558 <__hi0bits>
 8009aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009af2:	e7df      	b.n	8009ab4 <__d2b+0x70>
 8009af4:	0800b459 	.word	0x0800b459
 8009af8:	0800b46a 	.word	0x0800b46a

08009afc <_calloc_r>:
 8009afc:	b513      	push	{r0, r1, r4, lr}
 8009afe:	434a      	muls	r2, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	9201      	str	r2, [sp, #4]
 8009b04:	f000 f85a 	bl	8009bbc <_malloc_r>
 8009b08:	4604      	mov	r4, r0
 8009b0a:	b118      	cbz	r0, 8009b14 <_calloc_r+0x18>
 8009b0c:	9a01      	ldr	r2, [sp, #4]
 8009b0e:	2100      	movs	r1, #0
 8009b10:	f7fe f890 	bl	8007c34 <memset>
 8009b14:	4620      	mov	r0, r4
 8009b16:	b002      	add	sp, #8
 8009b18:	bd10      	pop	{r4, pc}
	...

08009b1c <_free_r>:
 8009b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	d048      	beq.n	8009bb4 <_free_r+0x98>
 8009b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b2e:	bfb8      	it	lt
 8009b30:	18e4      	addlt	r4, r4, r3
 8009b32:	f000 fa65 	bl	800a000 <__malloc_lock>
 8009b36:	4a20      	ldr	r2, [pc, #128]	; (8009bb8 <_free_r+0x9c>)
 8009b38:	9801      	ldr	r0, [sp, #4]
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	4615      	mov	r5, r2
 8009b3e:	b933      	cbnz	r3, 8009b4e <_free_r+0x32>
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	6014      	str	r4, [r2, #0]
 8009b44:	b003      	add	sp, #12
 8009b46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b4a:	f000 ba5f 	b.w	800a00c <__malloc_unlock>
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	d90b      	bls.n	8009b6a <_free_r+0x4e>
 8009b52:	6821      	ldr	r1, [r4, #0]
 8009b54:	1862      	adds	r2, r4, r1
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bf04      	itt	eq
 8009b5a:	681a      	ldreq	r2, [r3, #0]
 8009b5c:	685b      	ldreq	r3, [r3, #4]
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	bf04      	itt	eq
 8009b62:	1852      	addeq	r2, r2, r1
 8009b64:	6022      	streq	r2, [r4, #0]
 8009b66:	602c      	str	r4, [r5, #0]
 8009b68:	e7ec      	b.n	8009b44 <_free_r+0x28>
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	b10b      	cbz	r3, 8009b74 <_free_r+0x58>
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d9fa      	bls.n	8009b6a <_free_r+0x4e>
 8009b74:	6811      	ldr	r1, [r2, #0]
 8009b76:	1855      	adds	r5, r2, r1
 8009b78:	42a5      	cmp	r5, r4
 8009b7a:	d10b      	bne.n	8009b94 <_free_r+0x78>
 8009b7c:	6824      	ldr	r4, [r4, #0]
 8009b7e:	4421      	add	r1, r4
 8009b80:	1854      	adds	r4, r2, r1
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	6011      	str	r1, [r2, #0]
 8009b86:	d1dd      	bne.n	8009b44 <_free_r+0x28>
 8009b88:	681c      	ldr	r4, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	6053      	str	r3, [r2, #4]
 8009b8e:	4421      	add	r1, r4
 8009b90:	6011      	str	r1, [r2, #0]
 8009b92:	e7d7      	b.n	8009b44 <_free_r+0x28>
 8009b94:	d902      	bls.n	8009b9c <_free_r+0x80>
 8009b96:	230c      	movs	r3, #12
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	e7d3      	b.n	8009b44 <_free_r+0x28>
 8009b9c:	6825      	ldr	r5, [r4, #0]
 8009b9e:	1961      	adds	r1, r4, r5
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	bf04      	itt	eq
 8009ba4:	6819      	ldreq	r1, [r3, #0]
 8009ba6:	685b      	ldreq	r3, [r3, #4]
 8009ba8:	6063      	str	r3, [r4, #4]
 8009baa:	bf04      	itt	eq
 8009bac:	1949      	addeq	r1, r1, r5
 8009bae:	6021      	streq	r1, [r4, #0]
 8009bb0:	6054      	str	r4, [r2, #4]
 8009bb2:	e7c7      	b.n	8009b44 <_free_r+0x28>
 8009bb4:	b003      	add	sp, #12
 8009bb6:	bd30      	pop	{r4, r5, pc}
 8009bb8:	20000210 	.word	0x20000210

08009bbc <_malloc_r>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	1ccd      	adds	r5, r1, #3
 8009bc0:	f025 0503 	bic.w	r5, r5, #3
 8009bc4:	3508      	adds	r5, #8
 8009bc6:	2d0c      	cmp	r5, #12
 8009bc8:	bf38      	it	cc
 8009bca:	250c      	movcc	r5, #12
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	4606      	mov	r6, r0
 8009bd0:	db01      	blt.n	8009bd6 <_malloc_r+0x1a>
 8009bd2:	42a9      	cmp	r1, r5
 8009bd4:	d903      	bls.n	8009bde <_malloc_r+0x22>
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	2000      	movs	r0, #0
 8009bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bde:	f000 fa0f 	bl	800a000 <__malloc_lock>
 8009be2:	4921      	ldr	r1, [pc, #132]	; (8009c68 <_malloc_r+0xac>)
 8009be4:	680a      	ldr	r2, [r1, #0]
 8009be6:	4614      	mov	r4, r2
 8009be8:	b99c      	cbnz	r4, 8009c12 <_malloc_r+0x56>
 8009bea:	4f20      	ldr	r7, [pc, #128]	; (8009c6c <_malloc_r+0xb0>)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	b923      	cbnz	r3, 8009bfa <_malloc_r+0x3e>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 f998 	bl	8009f28 <_sbrk_r>
 8009bf8:	6038      	str	r0, [r7, #0]
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f000 f993 	bl	8009f28 <_sbrk_r>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d123      	bne.n	8009c4e <_malloc_r+0x92>
 8009c06:	230c      	movs	r3, #12
 8009c08:	6033      	str	r3, [r6, #0]
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 f9fe 	bl	800a00c <__malloc_unlock>
 8009c10:	e7e3      	b.n	8009bda <_malloc_r+0x1e>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	1b5b      	subs	r3, r3, r5
 8009c16:	d417      	bmi.n	8009c48 <_malloc_r+0x8c>
 8009c18:	2b0b      	cmp	r3, #11
 8009c1a:	d903      	bls.n	8009c24 <_malloc_r+0x68>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	441c      	add	r4, r3
 8009c20:	6025      	str	r5, [r4, #0]
 8009c22:	e004      	b.n	8009c2e <_malloc_r+0x72>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	42a2      	cmp	r2, r4
 8009c28:	bf0c      	ite	eq
 8009c2a:	600b      	streq	r3, [r1, #0]
 8009c2c:	6053      	strne	r3, [r2, #4]
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f000 f9ec 	bl	800a00c <__malloc_unlock>
 8009c34:	f104 000b 	add.w	r0, r4, #11
 8009c38:	1d23      	adds	r3, r4, #4
 8009c3a:	f020 0007 	bic.w	r0, r0, #7
 8009c3e:	1ac2      	subs	r2, r0, r3
 8009c40:	d0cc      	beq.n	8009bdc <_malloc_r+0x20>
 8009c42:	1a1b      	subs	r3, r3, r0
 8009c44:	50a3      	str	r3, [r4, r2]
 8009c46:	e7c9      	b.n	8009bdc <_malloc_r+0x20>
 8009c48:	4622      	mov	r2, r4
 8009c4a:	6864      	ldr	r4, [r4, #4]
 8009c4c:	e7cc      	b.n	8009be8 <_malloc_r+0x2c>
 8009c4e:	1cc4      	adds	r4, r0, #3
 8009c50:	f024 0403 	bic.w	r4, r4, #3
 8009c54:	42a0      	cmp	r0, r4
 8009c56:	d0e3      	beq.n	8009c20 <_malloc_r+0x64>
 8009c58:	1a21      	subs	r1, r4, r0
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f964 	bl	8009f28 <_sbrk_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d1dd      	bne.n	8009c20 <_malloc_r+0x64>
 8009c64:	e7cf      	b.n	8009c06 <_malloc_r+0x4a>
 8009c66:	bf00      	nop
 8009c68:	20000210 	.word	0x20000210
 8009c6c:	20000214 	.word	0x20000214

08009c70 <__ssputs_r>:
 8009c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	688e      	ldr	r6, [r1, #8]
 8009c76:	429e      	cmp	r6, r3
 8009c78:	4682      	mov	sl, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	4690      	mov	r8, r2
 8009c7e:	461f      	mov	r7, r3
 8009c80:	d838      	bhi.n	8009cf4 <__ssputs_r+0x84>
 8009c82:	898a      	ldrh	r2, [r1, #12]
 8009c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c88:	d032      	beq.n	8009cf0 <__ssputs_r+0x80>
 8009c8a:	6825      	ldr	r5, [r4, #0]
 8009c8c:	6909      	ldr	r1, [r1, #16]
 8009c8e:	eba5 0901 	sub.w	r9, r5, r1
 8009c92:	6965      	ldr	r5, [r4, #20]
 8009c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	444b      	add	r3, r9
 8009ca0:	106d      	asrs	r5, r5, #1
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	bf38      	it	cc
 8009ca6:	461d      	movcc	r5, r3
 8009ca8:	0553      	lsls	r3, r2, #21
 8009caa:	d531      	bpl.n	8009d10 <__ssputs_r+0xa0>
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7ff ff85 	bl	8009bbc <_malloc_r>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	b950      	cbnz	r0, 8009ccc <__ssputs_r+0x5c>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	f8ca 3000 	str.w	r3, [sl]
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ccc:	6921      	ldr	r1, [r4, #16]
 8009cce:	464a      	mov	r2, r9
 8009cd0:	f7fd ffa2 	bl	8007c18 <memcpy>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	6126      	str	r6, [r4, #16]
 8009ce2:	6165      	str	r5, [r4, #20]
 8009ce4:	444e      	add	r6, r9
 8009ce6:	eba5 0509 	sub.w	r5, r5, r9
 8009cea:	6026      	str	r6, [r4, #0]
 8009cec:	60a5      	str	r5, [r4, #8]
 8009cee:	463e      	mov	r6, r7
 8009cf0:	42be      	cmp	r6, r7
 8009cf2:	d900      	bls.n	8009cf6 <__ssputs_r+0x86>
 8009cf4:	463e      	mov	r6, r7
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	6820      	ldr	r0, [r4, #0]
 8009cfa:	4641      	mov	r1, r8
 8009cfc:	f000 f966 	bl	8009fcc <memmove>
 8009d00:	68a3      	ldr	r3, [r4, #8]
 8009d02:	6822      	ldr	r2, [r4, #0]
 8009d04:	1b9b      	subs	r3, r3, r6
 8009d06:	4432      	add	r2, r6
 8009d08:	60a3      	str	r3, [r4, #8]
 8009d0a:	6022      	str	r2, [r4, #0]
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e7db      	b.n	8009cc8 <__ssputs_r+0x58>
 8009d10:	462a      	mov	r2, r5
 8009d12:	f000 f981 	bl	800a018 <_realloc_r>
 8009d16:	4606      	mov	r6, r0
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d1e1      	bne.n	8009ce0 <__ssputs_r+0x70>
 8009d1c:	6921      	ldr	r1, [r4, #16]
 8009d1e:	4650      	mov	r0, sl
 8009d20:	f7ff fefc 	bl	8009b1c <_free_r>
 8009d24:	e7c7      	b.n	8009cb6 <__ssputs_r+0x46>
	...

08009d28 <_svfiprintf_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4698      	mov	r8, r3
 8009d2e:	898b      	ldrh	r3, [r1, #12]
 8009d30:	061b      	lsls	r3, r3, #24
 8009d32:	b09d      	sub	sp, #116	; 0x74
 8009d34:	4607      	mov	r7, r0
 8009d36:	460d      	mov	r5, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	d50e      	bpl.n	8009d5a <_svfiprintf_r+0x32>
 8009d3c:	690b      	ldr	r3, [r1, #16]
 8009d3e:	b963      	cbnz	r3, 8009d5a <_svfiprintf_r+0x32>
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	f7ff ff3b 	bl	8009bbc <_malloc_r>
 8009d46:	6028      	str	r0, [r5, #0]
 8009d48:	6128      	str	r0, [r5, #16]
 8009d4a:	b920      	cbnz	r0, 8009d56 <_svfiprintf_r+0x2e>
 8009d4c:	230c      	movs	r3, #12
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	e0d1      	b.n	8009efa <_svfiprintf_r+0x1d2>
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	616b      	str	r3, [r5, #20]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	2320      	movs	r3, #32
 8009d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d68:	2330      	movs	r3, #48	; 0x30
 8009d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f14 <_svfiprintf_r+0x1ec>
 8009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d72:	f04f 0901 	mov.w	r9, #1
 8009d76:	4623      	mov	r3, r4
 8009d78:	469a      	mov	sl, r3
 8009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7e:	b10a      	cbz	r2, 8009d84 <_svfiprintf_r+0x5c>
 8009d80:	2a25      	cmp	r2, #37	; 0x25
 8009d82:	d1f9      	bne.n	8009d78 <_svfiprintf_r+0x50>
 8009d84:	ebba 0b04 	subs.w	fp, sl, r4
 8009d88:	d00b      	beq.n	8009da2 <_svfiprintf_r+0x7a>
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ff6d 	bl	8009c70 <__ssputs_r>
 8009d96:	3001      	adds	r0, #1
 8009d98:	f000 80aa 	beq.w	8009ef0 <_svfiprintf_r+0x1c8>
 8009d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9e:	445a      	add	r2, fp
 8009da0:	9209      	str	r2, [sp, #36]	; 0x24
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 80a2 	beq.w	8009ef0 <_svfiprintf_r+0x1c8>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295
 8009db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db6:	f10a 0a01 	add.w	sl, sl, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2205      	movs	r2, #5
 8009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dcc:	4851      	ldr	r0, [pc, #324]	; (8009f14 <_svfiprintf_r+0x1ec>)
 8009dce:	f7f6 fa1f 	bl	8000210 <memchr>
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	b9d8      	cbnz	r0, 8009e0e <_svfiprintf_r+0xe6>
 8009dd6:	06d0      	lsls	r0, r2, #27
 8009dd8:	bf44      	itt	mi
 8009dda:	2320      	movmi	r3, #32
 8009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de0:	0711      	lsls	r1, r2, #28
 8009de2:	bf44      	itt	mi
 8009de4:	232b      	movmi	r3, #43	; 0x2b
 8009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b2a      	cmp	r3, #42	; 0x2a
 8009df0:	d015      	beq.n	8009e1e <_svfiprintf_r+0xf6>
 8009df2:	9a07      	ldr	r2, [sp, #28]
 8009df4:	4654      	mov	r4, sl
 8009df6:	2000      	movs	r0, #0
 8009df8:	f04f 0c0a 	mov.w	ip, #10
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e02:	3b30      	subs	r3, #48	; 0x30
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	d94e      	bls.n	8009ea6 <_svfiprintf_r+0x17e>
 8009e08:	b1b0      	cbz	r0, 8009e38 <_svfiprintf_r+0x110>
 8009e0a:	9207      	str	r2, [sp, #28]
 8009e0c:	e014      	b.n	8009e38 <_svfiprintf_r+0x110>
 8009e0e:	eba0 0308 	sub.w	r3, r0, r8
 8009e12:	fa09 f303 	lsl.w	r3, r9, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	46a2      	mov	sl, r4
 8009e1c:	e7d2      	b.n	8009dc4 <_svfiprintf_r+0x9c>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d19      	adds	r1, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9103      	str	r1, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfbb      	ittet	lt
 8009e2a:	425b      	neglt	r3, r3
 8009e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e30:	9307      	strge	r3, [sp, #28]
 8009e32:	9307      	strlt	r3, [sp, #28]
 8009e34:	bfb8      	it	lt
 8009e36:	9204      	strlt	r2, [sp, #16]
 8009e38:	7823      	ldrb	r3, [r4, #0]
 8009e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e3c:	d10c      	bne.n	8009e58 <_svfiprintf_r+0x130>
 8009e3e:	7863      	ldrb	r3, [r4, #1]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d135      	bne.n	8009eb0 <_svfiprintf_r+0x188>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	9203      	str	r2, [sp, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfb8      	it	lt
 8009e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e54:	3402      	adds	r4, #2
 8009e56:	9305      	str	r3, [sp, #20]
 8009e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f24 <_svfiprintf_r+0x1fc>
 8009e5c:	7821      	ldrb	r1, [r4, #0]
 8009e5e:	2203      	movs	r2, #3
 8009e60:	4650      	mov	r0, sl
 8009e62:	f7f6 f9d5 	bl	8000210 <memchr>
 8009e66:	b140      	cbz	r0, 8009e7a <_svfiprintf_r+0x152>
 8009e68:	2340      	movs	r3, #64	; 0x40
 8009e6a:	eba0 000a 	sub.w	r0, r0, sl
 8009e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	4303      	orrs	r3, r0
 8009e76:	3401      	adds	r4, #1
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	4826      	ldr	r0, [pc, #152]	; (8009f18 <_svfiprintf_r+0x1f0>)
 8009e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e84:	2206      	movs	r2, #6
 8009e86:	f7f6 f9c3 	bl	8000210 <memchr>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d038      	beq.n	8009f00 <_svfiprintf_r+0x1d8>
 8009e8e:	4b23      	ldr	r3, [pc, #140]	; (8009f1c <_svfiprintf_r+0x1f4>)
 8009e90:	bb1b      	cbnz	r3, 8009eda <_svfiprintf_r+0x1b2>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	3307      	adds	r3, #7
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea0:	4433      	add	r3, r6
 8009ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea4:	e767      	b.n	8009d76 <_svfiprintf_r+0x4e>
 8009ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eaa:	460c      	mov	r4, r1
 8009eac:	2001      	movs	r0, #1
 8009eae:	e7a5      	b.n	8009dfc <_svfiprintf_r+0xd4>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	3401      	adds	r4, #1
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	f04f 0c0a 	mov.w	ip, #10
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec2:	3a30      	subs	r2, #48	; 0x30
 8009ec4:	2a09      	cmp	r2, #9
 8009ec6:	d903      	bls.n	8009ed0 <_svfiprintf_r+0x1a8>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0c5      	beq.n	8009e58 <_svfiprintf_r+0x130>
 8009ecc:	9105      	str	r1, [sp, #20]
 8009ece:	e7c3      	b.n	8009e58 <_svfiprintf_r+0x130>
 8009ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e7f0      	b.n	8009ebc <_svfiprintf_r+0x194>
 8009eda:	ab03      	add	r3, sp, #12
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	462a      	mov	r2, r5
 8009ee0:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <_svfiprintf_r+0x1f8>)
 8009ee2:	a904      	add	r1, sp, #16
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7fd ff4d 	bl	8007d84 <_printf_float>
 8009eea:	1c42      	adds	r2, r0, #1
 8009eec:	4606      	mov	r6, r0
 8009eee:	d1d6      	bne.n	8009e9e <_svfiprintf_r+0x176>
 8009ef0:	89ab      	ldrh	r3, [r5, #12]
 8009ef2:	065b      	lsls	r3, r3, #25
 8009ef4:	f53f af2c 	bmi.w	8009d50 <_svfiprintf_r+0x28>
 8009ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efa:	b01d      	add	sp, #116	; 0x74
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	ab03      	add	r3, sp, #12
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	462a      	mov	r2, r5
 8009f06:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <_svfiprintf_r+0x1f8>)
 8009f08:	a904      	add	r1, sp, #16
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f7fe f9de 	bl	80082cc <_printf_i>
 8009f10:	e7eb      	b.n	8009eea <_svfiprintf_r+0x1c2>
 8009f12:	bf00      	nop
 8009f14:	0800b5cc 	.word	0x0800b5cc
 8009f18:	0800b5d6 	.word	0x0800b5d6
 8009f1c:	08007d85 	.word	0x08007d85
 8009f20:	08009c71 	.word	0x08009c71
 8009f24:	0800b5d2 	.word	0x0800b5d2

08009f28 <_sbrk_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d06      	ldr	r5, [pc, #24]	; (8009f44 <_sbrk_r+0x1c>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f7 ff32 	bl	8001d9c <_sbrk>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_sbrk_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_sbrk_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20003bb4 	.word	0x20003bb4

08009f48 <__assert_func>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <__assert_func+0x2c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4605      	mov	r5, r0
 8009f54:	68d8      	ldr	r0, [r3, #12]
 8009f56:	b14c      	cbz	r4, 8009f6c <__assert_func+0x24>
 8009f58:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <__assert_func+0x30>)
 8009f5a:	9100      	str	r1, [sp, #0]
 8009f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f60:	4906      	ldr	r1, [pc, #24]	; (8009f7c <__assert_func+0x34>)
 8009f62:	462b      	mov	r3, r5
 8009f64:	f000 f80e 	bl	8009f84 <fiprintf>
 8009f68:	f000 faa4 	bl	800a4b4 <abort>
 8009f6c:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <__assert_func+0x38>)
 8009f6e:	461c      	mov	r4, r3
 8009f70:	e7f3      	b.n	8009f5a <__assert_func+0x12>
 8009f72:	bf00      	nop
 8009f74:	2000001c 	.word	0x2000001c
 8009f78:	0800b5dd 	.word	0x0800b5dd
 8009f7c:	0800b5ea 	.word	0x0800b5ea
 8009f80:	0800b618 	.word	0x0800b618

08009f84 <fiprintf>:
 8009f84:	b40e      	push	{r1, r2, r3}
 8009f86:	b503      	push	{r0, r1, lr}
 8009f88:	4601      	mov	r1, r0
 8009f8a:	ab03      	add	r3, sp, #12
 8009f8c:	4805      	ldr	r0, [pc, #20]	; (8009fa4 <fiprintf+0x20>)
 8009f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	f000 f88f 	bl	800a0b8 <_vfiprintf_r>
 8009f9a:	b002      	add	sp, #8
 8009f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa0:	b003      	add	sp, #12
 8009fa2:	4770      	bx	lr
 8009fa4:	2000001c 	.word	0x2000001c

08009fa8 <__ascii_mbtowc>:
 8009fa8:	b082      	sub	sp, #8
 8009faa:	b901      	cbnz	r1, 8009fae <__ascii_mbtowc+0x6>
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	b142      	cbz	r2, 8009fc2 <__ascii_mbtowc+0x1a>
 8009fb0:	b14b      	cbz	r3, 8009fc6 <__ascii_mbtowc+0x1e>
 8009fb2:	7813      	ldrb	r3, [r2, #0]
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	7812      	ldrb	r2, [r2, #0]
 8009fb8:	1e10      	subs	r0, r2, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	b002      	add	sp, #8
 8009fc0:	4770      	bx	lr
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	e7fb      	b.n	8009fbe <__ascii_mbtowc+0x16>
 8009fc6:	f06f 0001 	mvn.w	r0, #1
 8009fca:	e7f8      	b.n	8009fbe <__ascii_mbtowc+0x16>

08009fcc <memmove>:
 8009fcc:	4288      	cmp	r0, r1
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	eb01 0402 	add.w	r4, r1, r2
 8009fd4:	d902      	bls.n	8009fdc <memmove+0x10>
 8009fd6:	4284      	cmp	r4, r0
 8009fd8:	4623      	mov	r3, r4
 8009fda:	d807      	bhi.n	8009fec <memmove+0x20>
 8009fdc:	1e43      	subs	r3, r0, #1
 8009fde:	42a1      	cmp	r1, r4
 8009fe0:	d008      	beq.n	8009ff4 <memmove+0x28>
 8009fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fea:	e7f8      	b.n	8009fde <memmove+0x12>
 8009fec:	4402      	add	r2, r0
 8009fee:	4601      	mov	r1, r0
 8009ff0:	428a      	cmp	r2, r1
 8009ff2:	d100      	bne.n	8009ff6 <memmove+0x2a>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ffe:	e7f7      	b.n	8009ff0 <memmove+0x24>

0800a000 <__malloc_lock>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__malloc_lock+0x8>)
 800a002:	f000 bc17 	b.w	800a834 <__retarget_lock_acquire_recursive>
 800a006:	bf00      	nop
 800a008:	20003bbc 	.word	0x20003bbc

0800a00c <__malloc_unlock>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__malloc_unlock+0x8>)
 800a00e:	f000 bc12 	b.w	800a836 <__retarget_lock_release_recursive>
 800a012:	bf00      	nop
 800a014:	20003bbc 	.word	0x20003bbc

0800a018 <_realloc_r>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	4607      	mov	r7, r0
 800a01c:	4614      	mov	r4, r2
 800a01e:	460e      	mov	r6, r1
 800a020:	b921      	cbnz	r1, 800a02c <_realloc_r+0x14>
 800a022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a026:	4611      	mov	r1, r2
 800a028:	f7ff bdc8 	b.w	8009bbc <_malloc_r>
 800a02c:	b922      	cbnz	r2, 800a038 <_realloc_r+0x20>
 800a02e:	f7ff fd75 	bl	8009b1c <_free_r>
 800a032:	4625      	mov	r5, r4
 800a034:	4628      	mov	r0, r5
 800a036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a038:	f000 fc62 	bl	800a900 <_malloc_usable_size_r>
 800a03c:	42a0      	cmp	r0, r4
 800a03e:	d20f      	bcs.n	800a060 <_realloc_r+0x48>
 800a040:	4621      	mov	r1, r4
 800a042:	4638      	mov	r0, r7
 800a044:	f7ff fdba 	bl	8009bbc <_malloc_r>
 800a048:	4605      	mov	r5, r0
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0f2      	beq.n	800a034 <_realloc_r+0x1c>
 800a04e:	4631      	mov	r1, r6
 800a050:	4622      	mov	r2, r4
 800a052:	f7fd fde1 	bl	8007c18 <memcpy>
 800a056:	4631      	mov	r1, r6
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff fd5f 	bl	8009b1c <_free_r>
 800a05e:	e7e9      	b.n	800a034 <_realloc_r+0x1c>
 800a060:	4635      	mov	r5, r6
 800a062:	e7e7      	b.n	800a034 <_realloc_r+0x1c>

0800a064 <__sfputc_r>:
 800a064:	6893      	ldr	r3, [r2, #8]
 800a066:	3b01      	subs	r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	b410      	push	{r4}
 800a06c:	6093      	str	r3, [r2, #8]
 800a06e:	da08      	bge.n	800a082 <__sfputc_r+0x1e>
 800a070:	6994      	ldr	r4, [r2, #24]
 800a072:	42a3      	cmp	r3, r4
 800a074:	db01      	blt.n	800a07a <__sfputc_r+0x16>
 800a076:	290a      	cmp	r1, #10
 800a078:	d103      	bne.n	800a082 <__sfputc_r+0x1e>
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	f000 b94b 	b.w	800a318 <__swbuf_r>
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	1c58      	adds	r0, r3, #1
 800a086:	6010      	str	r0, [r2, #0]
 800a088:	7019      	strb	r1, [r3, #0]
 800a08a:	4608      	mov	r0, r1
 800a08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <__sfputs_r>:
 800a092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	18d5      	adds	r5, r2, r3
 800a09c:	42ac      	cmp	r4, r5
 800a09e:	d101      	bne.n	800a0a4 <__sfputs_r+0x12>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e007      	b.n	800a0b4 <__sfputs_r+0x22>
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	463a      	mov	r2, r7
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ffda 	bl	800a064 <__sfputc_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d1f3      	bne.n	800a09c <__sfputs_r+0xa>
 800a0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0b8 <_vfiprintf_r>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	460d      	mov	r5, r1
 800a0be:	b09d      	sub	sp, #116	; 0x74
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	4698      	mov	r8, r3
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	b118      	cbz	r0, 800a0d0 <_vfiprintf_r+0x18>
 800a0c8:	6983      	ldr	r3, [r0, #24]
 800a0ca:	b90b      	cbnz	r3, 800a0d0 <_vfiprintf_r+0x18>
 800a0cc:	f000 fb14 	bl	800a6f8 <__sinit>
 800a0d0:	4b89      	ldr	r3, [pc, #548]	; (800a2f8 <_vfiprintf_r+0x240>)
 800a0d2:	429d      	cmp	r5, r3
 800a0d4:	d11b      	bne.n	800a10e <_vfiprintf_r+0x56>
 800a0d6:	6875      	ldr	r5, [r6, #4]
 800a0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0da:	07d9      	lsls	r1, r3, #31
 800a0dc:	d405      	bmi.n	800a0ea <_vfiprintf_r+0x32>
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	059a      	lsls	r2, r3, #22
 800a0e2:	d402      	bmi.n	800a0ea <_vfiprintf_r+0x32>
 800a0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e6:	f000 fba5 	bl	800a834 <__retarget_lock_acquire_recursive>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	071b      	lsls	r3, r3, #28
 800a0ee:	d501      	bpl.n	800a0f4 <_vfiprintf_r+0x3c>
 800a0f0:	692b      	ldr	r3, [r5, #16]
 800a0f2:	b9eb      	cbnz	r3, 800a130 <_vfiprintf_r+0x78>
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f000 f96e 	bl	800a3d8 <__swsetup_r>
 800a0fc:	b1c0      	cbz	r0, 800a130 <_vfiprintf_r+0x78>
 800a0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a100:	07dc      	lsls	r4, r3, #31
 800a102:	d50e      	bpl.n	800a122 <_vfiprintf_r+0x6a>
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	b01d      	add	sp, #116	; 0x74
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	4b7b      	ldr	r3, [pc, #492]	; (800a2fc <_vfiprintf_r+0x244>)
 800a110:	429d      	cmp	r5, r3
 800a112:	d101      	bne.n	800a118 <_vfiprintf_r+0x60>
 800a114:	68b5      	ldr	r5, [r6, #8]
 800a116:	e7df      	b.n	800a0d8 <_vfiprintf_r+0x20>
 800a118:	4b79      	ldr	r3, [pc, #484]	; (800a300 <_vfiprintf_r+0x248>)
 800a11a:	429d      	cmp	r5, r3
 800a11c:	bf08      	it	eq
 800a11e:	68f5      	ldreq	r5, [r6, #12]
 800a120:	e7da      	b.n	800a0d8 <_vfiprintf_r+0x20>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	0598      	lsls	r0, r3, #22
 800a126:	d4ed      	bmi.n	800a104 <_vfiprintf_r+0x4c>
 800a128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12a:	f000 fb84 	bl	800a836 <__retarget_lock_release_recursive>
 800a12e:	e7e9      	b.n	800a104 <_vfiprintf_r+0x4c>
 800a130:	2300      	movs	r3, #0
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	2320      	movs	r3, #32
 800a136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a13e:	2330      	movs	r3, #48	; 0x30
 800a140:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a304 <_vfiprintf_r+0x24c>
 800a144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a148:	f04f 0901 	mov.w	r9, #1
 800a14c:	4623      	mov	r3, r4
 800a14e:	469a      	mov	sl, r3
 800a150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a154:	b10a      	cbz	r2, 800a15a <_vfiprintf_r+0xa2>
 800a156:	2a25      	cmp	r2, #37	; 0x25
 800a158:	d1f9      	bne.n	800a14e <_vfiprintf_r+0x96>
 800a15a:	ebba 0b04 	subs.w	fp, sl, r4
 800a15e:	d00b      	beq.n	800a178 <_vfiprintf_r+0xc0>
 800a160:	465b      	mov	r3, fp
 800a162:	4622      	mov	r2, r4
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff93 	bl	800a092 <__sfputs_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	f000 80aa 	beq.w	800a2c6 <_vfiprintf_r+0x20e>
 800a172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a174:	445a      	add	r2, fp
 800a176:	9209      	str	r2, [sp, #36]	; 0x24
 800a178:	f89a 3000 	ldrb.w	r3, [sl]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80a2 	beq.w	800a2c6 <_vfiprintf_r+0x20e>
 800a182:	2300      	movs	r3, #0
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a18c:	f10a 0a01 	add.w	sl, sl, #1
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	9307      	str	r3, [sp, #28]
 800a194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a198:	931a      	str	r3, [sp, #104]	; 0x68
 800a19a:	4654      	mov	r4, sl
 800a19c:	2205      	movs	r2, #5
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	4858      	ldr	r0, [pc, #352]	; (800a304 <_vfiprintf_r+0x24c>)
 800a1a4:	f7f6 f834 	bl	8000210 <memchr>
 800a1a8:	9a04      	ldr	r2, [sp, #16]
 800a1aa:	b9d8      	cbnz	r0, 800a1e4 <_vfiprintf_r+0x12c>
 800a1ac:	06d1      	lsls	r1, r2, #27
 800a1ae:	bf44      	itt	mi
 800a1b0:	2320      	movmi	r3, #32
 800a1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b6:	0713      	lsls	r3, r2, #28
 800a1b8:	bf44      	itt	mi
 800a1ba:	232b      	movmi	r3, #43	; 0x2b
 800a1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c6:	d015      	beq.n	800a1f4 <_vfiprintf_r+0x13c>
 800a1c8:	9a07      	ldr	r2, [sp, #28]
 800a1ca:	4654      	mov	r4, sl
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f04f 0c0a 	mov.w	ip, #10
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d8:	3b30      	subs	r3, #48	; 0x30
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d94e      	bls.n	800a27c <_vfiprintf_r+0x1c4>
 800a1de:	b1b0      	cbz	r0, 800a20e <_vfiprintf_r+0x156>
 800a1e0:	9207      	str	r2, [sp, #28]
 800a1e2:	e014      	b.n	800a20e <_vfiprintf_r+0x156>
 800a1e4:	eba0 0308 	sub.w	r3, r0, r8
 800a1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	9304      	str	r3, [sp, #16]
 800a1f0:	46a2      	mov	sl, r4
 800a1f2:	e7d2      	b.n	800a19a <_vfiprintf_r+0xe2>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	1d19      	adds	r1, r3, #4
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	9103      	str	r1, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfbb      	ittet	lt
 800a200:	425b      	neglt	r3, r3
 800a202:	f042 0202 	orrlt.w	r2, r2, #2
 800a206:	9307      	strge	r3, [sp, #28]
 800a208:	9307      	strlt	r3, [sp, #28]
 800a20a:	bfb8      	it	lt
 800a20c:	9204      	strlt	r2, [sp, #16]
 800a20e:	7823      	ldrb	r3, [r4, #0]
 800a210:	2b2e      	cmp	r3, #46	; 0x2e
 800a212:	d10c      	bne.n	800a22e <_vfiprintf_r+0x176>
 800a214:	7863      	ldrb	r3, [r4, #1]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d135      	bne.n	800a286 <_vfiprintf_r+0x1ce>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	9203      	str	r2, [sp, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	bfb8      	it	lt
 800a226:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22a:	3402      	adds	r4, #2
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a314 <_vfiprintf_r+0x25c>
 800a232:	7821      	ldrb	r1, [r4, #0]
 800a234:	2203      	movs	r2, #3
 800a236:	4650      	mov	r0, sl
 800a238:	f7f5 ffea 	bl	8000210 <memchr>
 800a23c:	b140      	cbz	r0, 800a250 <_vfiprintf_r+0x198>
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	eba0 000a 	sub.w	r0, r0, sl
 800a244:	fa03 f000 	lsl.w	r0, r3, r0
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	4303      	orrs	r3, r0
 800a24c:	3401      	adds	r4, #1
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	482c      	ldr	r0, [pc, #176]	; (800a308 <_vfiprintf_r+0x250>)
 800a256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25a:	2206      	movs	r2, #6
 800a25c:	f7f5 ffd8 	bl	8000210 <memchr>
 800a260:	2800      	cmp	r0, #0
 800a262:	d03f      	beq.n	800a2e4 <_vfiprintf_r+0x22c>
 800a264:	4b29      	ldr	r3, [pc, #164]	; (800a30c <_vfiprintf_r+0x254>)
 800a266:	bb1b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x1f8>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	3307      	adds	r3, #7
 800a26c:	f023 0307 	bic.w	r3, r3, #7
 800a270:	3308      	adds	r3, #8
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a276:	443b      	add	r3, r7
 800a278:	9309      	str	r3, [sp, #36]	; 0x24
 800a27a:	e767      	b.n	800a14c <_vfiprintf_r+0x94>
 800a27c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a280:	460c      	mov	r4, r1
 800a282:	2001      	movs	r0, #1
 800a284:	e7a5      	b.n	800a1d2 <_vfiprintf_r+0x11a>
 800a286:	2300      	movs	r3, #0
 800a288:	3401      	adds	r4, #1
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	4619      	mov	r1, r3
 800a28e:	f04f 0c0a 	mov.w	ip, #10
 800a292:	4620      	mov	r0, r4
 800a294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a298:	3a30      	subs	r2, #48	; 0x30
 800a29a:	2a09      	cmp	r2, #9
 800a29c:	d903      	bls.n	800a2a6 <_vfiprintf_r+0x1ee>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0c5      	beq.n	800a22e <_vfiprintf_r+0x176>
 800a2a2:	9105      	str	r1, [sp, #20]
 800a2a4:	e7c3      	b.n	800a22e <_vfiprintf_r+0x176>
 800a2a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e7f0      	b.n	800a292 <_vfiprintf_r+0x1da>
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <_vfiprintf_r+0x258>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7fd fd62 	bl	8007d84 <_printf_float>
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	1c78      	adds	r0, r7, #1
 800a2c4:	d1d6      	bne.n	800a274 <_vfiprintf_r+0x1bc>
 800a2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c8:	07d9      	lsls	r1, r3, #31
 800a2ca:	d405      	bmi.n	800a2d8 <_vfiprintf_r+0x220>
 800a2cc:	89ab      	ldrh	r3, [r5, #12]
 800a2ce:	059a      	lsls	r2, r3, #22
 800a2d0:	d402      	bmi.n	800a2d8 <_vfiprintf_r+0x220>
 800a2d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d4:	f000 faaf 	bl	800a836 <__retarget_lock_release_recursive>
 800a2d8:	89ab      	ldrh	r3, [r5, #12]
 800a2da:	065b      	lsls	r3, r3, #25
 800a2dc:	f53f af12 	bmi.w	800a104 <_vfiprintf_r+0x4c>
 800a2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e2:	e711      	b.n	800a108 <_vfiprintf_r+0x50>
 800a2e4:	ab03      	add	r3, sp, #12
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <_vfiprintf_r+0x258>)
 800a2ec:	a904      	add	r1, sp, #16
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7fd ffec 	bl	80082cc <_printf_i>
 800a2f4:	e7e4      	b.n	800a2c0 <_vfiprintf_r+0x208>
 800a2f6:	bf00      	nop
 800a2f8:	0800b644 	.word	0x0800b644
 800a2fc:	0800b664 	.word	0x0800b664
 800a300:	0800b624 	.word	0x0800b624
 800a304:	0800b5cc 	.word	0x0800b5cc
 800a308:	0800b5d6 	.word	0x0800b5d6
 800a30c:	08007d85 	.word	0x08007d85
 800a310:	0800a093 	.word	0x0800a093
 800a314:	0800b5d2 	.word	0x0800b5d2

0800a318 <__swbuf_r>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	460e      	mov	r6, r1
 800a31c:	4614      	mov	r4, r2
 800a31e:	4605      	mov	r5, r0
 800a320:	b118      	cbz	r0, 800a32a <__swbuf_r+0x12>
 800a322:	6983      	ldr	r3, [r0, #24]
 800a324:	b90b      	cbnz	r3, 800a32a <__swbuf_r+0x12>
 800a326:	f000 f9e7 	bl	800a6f8 <__sinit>
 800a32a:	4b21      	ldr	r3, [pc, #132]	; (800a3b0 <__swbuf_r+0x98>)
 800a32c:	429c      	cmp	r4, r3
 800a32e:	d12b      	bne.n	800a388 <__swbuf_r+0x70>
 800a330:	686c      	ldr	r4, [r5, #4]
 800a332:	69a3      	ldr	r3, [r4, #24]
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	071a      	lsls	r2, r3, #28
 800a33a:	d52f      	bpl.n	800a39c <__swbuf_r+0x84>
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	b36b      	cbz	r3, 800a39c <__swbuf_r+0x84>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	6820      	ldr	r0, [r4, #0]
 800a344:	1ac0      	subs	r0, r0, r3
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	b2f6      	uxtb	r6, r6
 800a34a:	4283      	cmp	r3, r0
 800a34c:	4637      	mov	r7, r6
 800a34e:	dc04      	bgt.n	800a35a <__swbuf_r+0x42>
 800a350:	4621      	mov	r1, r4
 800a352:	4628      	mov	r0, r5
 800a354:	f000 f93c 	bl	800a5d0 <_fflush_r>
 800a358:	bb30      	cbnz	r0, 800a3a8 <__swbuf_r+0x90>
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	60a3      	str	r3, [r4, #8]
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	701e      	strb	r6, [r3, #0]
 800a368:	6963      	ldr	r3, [r4, #20]
 800a36a:	3001      	adds	r0, #1
 800a36c:	4283      	cmp	r3, r0
 800a36e:	d004      	beq.n	800a37a <__swbuf_r+0x62>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	07db      	lsls	r3, r3, #31
 800a374:	d506      	bpl.n	800a384 <__swbuf_r+0x6c>
 800a376:	2e0a      	cmp	r6, #10
 800a378:	d104      	bne.n	800a384 <__swbuf_r+0x6c>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f927 	bl	800a5d0 <_fflush_r>
 800a382:	b988      	cbnz	r0, 800a3a8 <__swbuf_r+0x90>
 800a384:	4638      	mov	r0, r7
 800a386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <__swbuf_r+0x9c>)
 800a38a:	429c      	cmp	r4, r3
 800a38c:	d101      	bne.n	800a392 <__swbuf_r+0x7a>
 800a38e:	68ac      	ldr	r4, [r5, #8]
 800a390:	e7cf      	b.n	800a332 <__swbuf_r+0x1a>
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <__swbuf_r+0xa0>)
 800a394:	429c      	cmp	r4, r3
 800a396:	bf08      	it	eq
 800a398:	68ec      	ldreq	r4, [r5, #12]
 800a39a:	e7ca      	b.n	800a332 <__swbuf_r+0x1a>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 f81a 	bl	800a3d8 <__swsetup_r>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d0cb      	beq.n	800a340 <__swbuf_r+0x28>
 800a3a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a3ac:	e7ea      	b.n	800a384 <__swbuf_r+0x6c>
 800a3ae:	bf00      	nop
 800a3b0:	0800b644 	.word	0x0800b644
 800a3b4:	0800b664 	.word	0x0800b664
 800a3b8:	0800b624 	.word	0x0800b624

0800a3bc <__ascii_wctomb>:
 800a3bc:	b149      	cbz	r1, 800a3d2 <__ascii_wctomb+0x16>
 800a3be:	2aff      	cmp	r2, #255	; 0xff
 800a3c0:	bf85      	ittet	hi
 800a3c2:	238a      	movhi	r3, #138	; 0x8a
 800a3c4:	6003      	strhi	r3, [r0, #0]
 800a3c6:	700a      	strbls	r2, [r1, #0]
 800a3c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3cc:	bf98      	it	ls
 800a3ce:	2001      	movls	r0, #1
 800a3d0:	4770      	bx	lr
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <__swsetup_r>:
 800a3d8:	4b32      	ldr	r3, [pc, #200]	; (800a4a4 <__swsetup_r+0xcc>)
 800a3da:	b570      	push	{r4, r5, r6, lr}
 800a3dc:	681d      	ldr	r5, [r3, #0]
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	b125      	cbz	r5, 800a3ee <__swsetup_r+0x16>
 800a3e4:	69ab      	ldr	r3, [r5, #24]
 800a3e6:	b913      	cbnz	r3, 800a3ee <__swsetup_r+0x16>
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 f985 	bl	800a6f8 <__sinit>
 800a3ee:	4b2e      	ldr	r3, [pc, #184]	; (800a4a8 <__swsetup_r+0xd0>)
 800a3f0:	429c      	cmp	r4, r3
 800a3f2:	d10f      	bne.n	800a414 <__swsetup_r+0x3c>
 800a3f4:	686c      	ldr	r4, [r5, #4]
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3fc:	0719      	lsls	r1, r3, #28
 800a3fe:	d42c      	bmi.n	800a45a <__swsetup_r+0x82>
 800a400:	06dd      	lsls	r5, r3, #27
 800a402:	d411      	bmi.n	800a428 <__swsetup_r+0x50>
 800a404:	2309      	movs	r3, #9
 800a406:	6033      	str	r3, [r6, #0]
 800a408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	f04f 30ff 	mov.w	r0, #4294967295
 800a412:	e03e      	b.n	800a492 <__swsetup_r+0xba>
 800a414:	4b25      	ldr	r3, [pc, #148]	; (800a4ac <__swsetup_r+0xd4>)
 800a416:	429c      	cmp	r4, r3
 800a418:	d101      	bne.n	800a41e <__swsetup_r+0x46>
 800a41a:	68ac      	ldr	r4, [r5, #8]
 800a41c:	e7eb      	b.n	800a3f6 <__swsetup_r+0x1e>
 800a41e:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <__swsetup_r+0xd8>)
 800a420:	429c      	cmp	r4, r3
 800a422:	bf08      	it	eq
 800a424:	68ec      	ldreq	r4, [r5, #12]
 800a426:	e7e6      	b.n	800a3f6 <__swsetup_r+0x1e>
 800a428:	0758      	lsls	r0, r3, #29
 800a42a:	d512      	bpl.n	800a452 <__swsetup_r+0x7a>
 800a42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42e:	b141      	cbz	r1, 800a442 <__swsetup_r+0x6a>
 800a430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a434:	4299      	cmp	r1, r3
 800a436:	d002      	beq.n	800a43e <__swsetup_r+0x66>
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff fb6f 	bl	8009b1c <_free_r>
 800a43e:	2300      	movs	r3, #0
 800a440:	6363      	str	r3, [r4, #52]	; 0x34
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	2300      	movs	r3, #0
 800a44c:	6063      	str	r3, [r4, #4]
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	f043 0308 	orr.w	r3, r3, #8
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	b94b      	cbnz	r3, 800a472 <__swsetup_r+0x9a>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a468:	d003      	beq.n	800a472 <__swsetup_r+0x9a>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4630      	mov	r0, r6
 800a46e:	f000 fa07 	bl	800a880 <__smakebuf_r>
 800a472:	89a0      	ldrh	r0, [r4, #12]
 800a474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a478:	f010 0301 	ands.w	r3, r0, #1
 800a47c:	d00a      	beq.n	800a494 <__swsetup_r+0xbc>
 800a47e:	2300      	movs	r3, #0
 800a480:	60a3      	str	r3, [r4, #8]
 800a482:	6963      	ldr	r3, [r4, #20]
 800a484:	425b      	negs	r3, r3
 800a486:	61a3      	str	r3, [r4, #24]
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	b943      	cbnz	r3, 800a49e <__swsetup_r+0xc6>
 800a48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a490:	d1ba      	bne.n	800a408 <__swsetup_r+0x30>
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	0781      	lsls	r1, r0, #30
 800a496:	bf58      	it	pl
 800a498:	6963      	ldrpl	r3, [r4, #20]
 800a49a:	60a3      	str	r3, [r4, #8]
 800a49c:	e7f4      	b.n	800a488 <__swsetup_r+0xb0>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e7f7      	b.n	800a492 <__swsetup_r+0xba>
 800a4a2:	bf00      	nop
 800a4a4:	2000001c 	.word	0x2000001c
 800a4a8:	0800b644 	.word	0x0800b644
 800a4ac:	0800b664 	.word	0x0800b664
 800a4b0:	0800b624 	.word	0x0800b624

0800a4b4 <abort>:
 800a4b4:	b508      	push	{r3, lr}
 800a4b6:	2006      	movs	r0, #6
 800a4b8:	f000 fa52 	bl	800a960 <raise>
 800a4bc:	2001      	movs	r0, #1
 800a4be:	f7f7 fbf5 	bl	8001cac <_exit>
	...

0800a4c4 <__sflush_r>:
 800a4c4:	898a      	ldrh	r2, [r1, #12]
 800a4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	0710      	lsls	r0, r2, #28
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	d458      	bmi.n	800a584 <__sflush_r+0xc0>
 800a4d2:	684b      	ldr	r3, [r1, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dc05      	bgt.n	800a4e4 <__sflush_r+0x20>
 800a4d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dc02      	bgt.n	800a4e4 <__sflush_r+0x20>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d0f9      	beq.n	800a4de <__sflush_r+0x1a>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4f0:	682f      	ldr	r7, [r5, #0]
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	d032      	beq.n	800a55c <__sflush_r+0x98>
 800a4f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	075a      	lsls	r2, r3, #29
 800a4fc:	d505      	bpl.n	800a50a <__sflush_r+0x46>
 800a4fe:	6863      	ldr	r3, [r4, #4]
 800a500:	1ac0      	subs	r0, r0, r3
 800a502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a504:	b10b      	cbz	r3, 800a50a <__sflush_r+0x46>
 800a506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a508:	1ac0      	subs	r0, r0, r3
 800a50a:	2300      	movs	r3, #0
 800a50c:	4602      	mov	r2, r0
 800a50e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a510:	6a21      	ldr	r1, [r4, #32]
 800a512:	4628      	mov	r0, r5
 800a514:	47b0      	blx	r6
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	d106      	bne.n	800a52a <__sflush_r+0x66>
 800a51c:	6829      	ldr	r1, [r5, #0]
 800a51e:	291d      	cmp	r1, #29
 800a520:	d82c      	bhi.n	800a57c <__sflush_r+0xb8>
 800a522:	4a2a      	ldr	r2, [pc, #168]	; (800a5cc <__sflush_r+0x108>)
 800a524:	40ca      	lsrs	r2, r1
 800a526:	07d6      	lsls	r6, r2, #31
 800a528:	d528      	bpl.n	800a57c <__sflush_r+0xb8>
 800a52a:	2200      	movs	r2, #0
 800a52c:	6062      	str	r2, [r4, #4]
 800a52e:	04d9      	lsls	r1, r3, #19
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	6022      	str	r2, [r4, #0]
 800a534:	d504      	bpl.n	800a540 <__sflush_r+0x7c>
 800a536:	1c42      	adds	r2, r0, #1
 800a538:	d101      	bne.n	800a53e <__sflush_r+0x7a>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	b903      	cbnz	r3, 800a540 <__sflush_r+0x7c>
 800a53e:	6560      	str	r0, [r4, #84]	; 0x54
 800a540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a542:	602f      	str	r7, [r5, #0]
 800a544:	2900      	cmp	r1, #0
 800a546:	d0ca      	beq.n	800a4de <__sflush_r+0x1a>
 800a548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a54c:	4299      	cmp	r1, r3
 800a54e:	d002      	beq.n	800a556 <__sflush_r+0x92>
 800a550:	4628      	mov	r0, r5
 800a552:	f7ff fae3 	bl	8009b1c <_free_r>
 800a556:	2000      	movs	r0, #0
 800a558:	6360      	str	r0, [r4, #52]	; 0x34
 800a55a:	e7c1      	b.n	800a4e0 <__sflush_r+0x1c>
 800a55c:	6a21      	ldr	r1, [r4, #32]
 800a55e:	2301      	movs	r3, #1
 800a560:	4628      	mov	r0, r5
 800a562:	47b0      	blx	r6
 800a564:	1c41      	adds	r1, r0, #1
 800a566:	d1c7      	bne.n	800a4f8 <__sflush_r+0x34>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0c4      	beq.n	800a4f8 <__sflush_r+0x34>
 800a56e:	2b1d      	cmp	r3, #29
 800a570:	d001      	beq.n	800a576 <__sflush_r+0xb2>
 800a572:	2b16      	cmp	r3, #22
 800a574:	d101      	bne.n	800a57a <__sflush_r+0xb6>
 800a576:	602f      	str	r7, [r5, #0]
 800a578:	e7b1      	b.n	800a4de <__sflush_r+0x1a>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	e7ad      	b.n	800a4e0 <__sflush_r+0x1c>
 800a584:	690f      	ldr	r7, [r1, #16]
 800a586:	2f00      	cmp	r7, #0
 800a588:	d0a9      	beq.n	800a4de <__sflush_r+0x1a>
 800a58a:	0793      	lsls	r3, r2, #30
 800a58c:	680e      	ldr	r6, [r1, #0]
 800a58e:	bf08      	it	eq
 800a590:	694b      	ldreq	r3, [r1, #20]
 800a592:	600f      	str	r7, [r1, #0]
 800a594:	bf18      	it	ne
 800a596:	2300      	movne	r3, #0
 800a598:	eba6 0807 	sub.w	r8, r6, r7
 800a59c:	608b      	str	r3, [r1, #8]
 800a59e:	f1b8 0f00 	cmp.w	r8, #0
 800a5a2:	dd9c      	ble.n	800a4de <__sflush_r+0x1a>
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5a8:	4643      	mov	r3, r8
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b0      	blx	r6
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	dc06      	bgt.n	800a5c2 <__sflush_r+0xfe>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	e78e      	b.n	800a4e0 <__sflush_r+0x1c>
 800a5c2:	4407      	add	r7, r0
 800a5c4:	eba8 0800 	sub.w	r8, r8, r0
 800a5c8:	e7e9      	b.n	800a59e <__sflush_r+0xda>
 800a5ca:	bf00      	nop
 800a5cc:	20400001 	.word	0x20400001

0800a5d0 <_fflush_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	690b      	ldr	r3, [r1, #16]
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b913      	cbnz	r3, 800a5e0 <_fflush_r+0x10>
 800a5da:	2500      	movs	r5, #0
 800a5dc:	4628      	mov	r0, r5
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	b118      	cbz	r0, 800a5ea <_fflush_r+0x1a>
 800a5e2:	6983      	ldr	r3, [r0, #24]
 800a5e4:	b90b      	cbnz	r3, 800a5ea <_fflush_r+0x1a>
 800a5e6:	f000 f887 	bl	800a6f8 <__sinit>
 800a5ea:	4b14      	ldr	r3, [pc, #80]	; (800a63c <_fflush_r+0x6c>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	d11b      	bne.n	800a628 <_fflush_r+0x58>
 800a5f0:	686c      	ldr	r4, [r5, #4]
 800a5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0ef      	beq.n	800a5da <_fflush_r+0xa>
 800a5fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5fc:	07d0      	lsls	r0, r2, #31
 800a5fe:	d404      	bmi.n	800a60a <_fflush_r+0x3a>
 800a600:	0599      	lsls	r1, r3, #22
 800a602:	d402      	bmi.n	800a60a <_fflush_r+0x3a>
 800a604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a606:	f000 f915 	bl	800a834 <__retarget_lock_acquire_recursive>
 800a60a:	4628      	mov	r0, r5
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7ff ff59 	bl	800a4c4 <__sflush_r>
 800a612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a614:	07da      	lsls	r2, r3, #31
 800a616:	4605      	mov	r5, r0
 800a618:	d4e0      	bmi.n	800a5dc <_fflush_r+0xc>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	059b      	lsls	r3, r3, #22
 800a61e:	d4dd      	bmi.n	800a5dc <_fflush_r+0xc>
 800a620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a622:	f000 f908 	bl	800a836 <__retarget_lock_release_recursive>
 800a626:	e7d9      	b.n	800a5dc <_fflush_r+0xc>
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <_fflush_r+0x70>)
 800a62a:	429c      	cmp	r4, r3
 800a62c:	d101      	bne.n	800a632 <_fflush_r+0x62>
 800a62e:	68ac      	ldr	r4, [r5, #8]
 800a630:	e7df      	b.n	800a5f2 <_fflush_r+0x22>
 800a632:	4b04      	ldr	r3, [pc, #16]	; (800a644 <_fflush_r+0x74>)
 800a634:	429c      	cmp	r4, r3
 800a636:	bf08      	it	eq
 800a638:	68ec      	ldreq	r4, [r5, #12]
 800a63a:	e7da      	b.n	800a5f2 <_fflush_r+0x22>
 800a63c:	0800b644 	.word	0x0800b644
 800a640:	0800b664 	.word	0x0800b664
 800a644:	0800b624 	.word	0x0800b624

0800a648 <std>:
 800a648:	2300      	movs	r3, #0
 800a64a:	b510      	push	{r4, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	e9c0 3300 	strd	r3, r3, [r0]
 800a652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a656:	6083      	str	r3, [r0, #8]
 800a658:	8181      	strh	r1, [r0, #12]
 800a65a:	6643      	str	r3, [r0, #100]	; 0x64
 800a65c:	81c2      	strh	r2, [r0, #14]
 800a65e:	6183      	str	r3, [r0, #24]
 800a660:	4619      	mov	r1, r3
 800a662:	2208      	movs	r2, #8
 800a664:	305c      	adds	r0, #92	; 0x5c
 800a666:	f7fd fae5 	bl	8007c34 <memset>
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <std+0x38>)
 800a66c:	6263      	str	r3, [r4, #36]	; 0x24
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <std+0x3c>)
 800a670:	62a3      	str	r3, [r4, #40]	; 0x28
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <std+0x40>)
 800a674:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <std+0x44>)
 800a678:	6224      	str	r4, [r4, #32]
 800a67a:	6323      	str	r3, [r4, #48]	; 0x30
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	bf00      	nop
 800a680:	0800a999 	.word	0x0800a999
 800a684:	0800a9bb 	.word	0x0800a9bb
 800a688:	0800a9f3 	.word	0x0800a9f3
 800a68c:	0800aa17 	.word	0x0800aa17

0800a690 <_cleanup_r>:
 800a690:	4901      	ldr	r1, [pc, #4]	; (800a698 <_cleanup_r+0x8>)
 800a692:	f000 b8af 	b.w	800a7f4 <_fwalk_reent>
 800a696:	bf00      	nop
 800a698:	0800a5d1 	.word	0x0800a5d1

0800a69c <__sfmoreglue>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	1e4a      	subs	r2, r1, #1
 800a6a0:	2568      	movs	r5, #104	; 0x68
 800a6a2:	4355      	muls	r5, r2
 800a6a4:	460e      	mov	r6, r1
 800a6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6aa:	f7ff fa87 	bl	8009bbc <_malloc_r>
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	b140      	cbz	r0, 800a6c4 <__sfmoreglue+0x28>
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a6b8:	300c      	adds	r0, #12
 800a6ba:	60a0      	str	r0, [r4, #8]
 800a6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6c0:	f7fd fab8 	bl	8007c34 <memset>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}

0800a6c8 <__sfp_lock_acquire>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__sfp_lock_acquire+0x8>)
 800a6ca:	f000 b8b3 	b.w	800a834 <__retarget_lock_acquire_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	20003bc0 	.word	0x20003bc0

0800a6d4 <__sfp_lock_release>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	; (800a6dc <__sfp_lock_release+0x8>)
 800a6d6:	f000 b8ae 	b.w	800a836 <__retarget_lock_release_recursive>
 800a6da:	bf00      	nop
 800a6dc:	20003bc0 	.word	0x20003bc0

0800a6e0 <__sinit_lock_acquire>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	; (800a6e8 <__sinit_lock_acquire+0x8>)
 800a6e2:	f000 b8a7 	b.w	800a834 <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	20003bbb 	.word	0x20003bbb

0800a6ec <__sinit_lock_release>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	; (800a6f4 <__sinit_lock_release+0x8>)
 800a6ee:	f000 b8a2 	b.w	800a836 <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	20003bbb 	.word	0x20003bbb

0800a6f8 <__sinit>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	f7ff fff0 	bl	800a6e0 <__sinit_lock_acquire>
 800a700:	69a3      	ldr	r3, [r4, #24]
 800a702:	b11b      	cbz	r3, 800a70c <__sinit+0x14>
 800a704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a708:	f7ff bff0 	b.w	800a6ec <__sinit_lock_release>
 800a70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a710:	6523      	str	r3, [r4, #80]	; 0x50
 800a712:	4b13      	ldr	r3, [pc, #76]	; (800a760 <__sinit+0x68>)
 800a714:	4a13      	ldr	r2, [pc, #76]	; (800a764 <__sinit+0x6c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	62a2      	str	r2, [r4, #40]	; 0x28
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	bf04      	itt	eq
 800a71e:	2301      	moveq	r3, #1
 800a720:	61a3      	streq	r3, [r4, #24]
 800a722:	4620      	mov	r0, r4
 800a724:	f000 f820 	bl	800a768 <__sfp>
 800a728:	6060      	str	r0, [r4, #4]
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f81c 	bl	800a768 <__sfp>
 800a730:	60a0      	str	r0, [r4, #8]
 800a732:	4620      	mov	r0, r4
 800a734:	f000 f818 	bl	800a768 <__sfp>
 800a738:	2200      	movs	r2, #0
 800a73a:	60e0      	str	r0, [r4, #12]
 800a73c:	2104      	movs	r1, #4
 800a73e:	6860      	ldr	r0, [r4, #4]
 800a740:	f7ff ff82 	bl	800a648 <std>
 800a744:	68a0      	ldr	r0, [r4, #8]
 800a746:	2201      	movs	r2, #1
 800a748:	2109      	movs	r1, #9
 800a74a:	f7ff ff7d 	bl	800a648 <std>
 800a74e:	68e0      	ldr	r0, [r4, #12]
 800a750:	2202      	movs	r2, #2
 800a752:	2112      	movs	r1, #18
 800a754:	f7ff ff78 	bl	800a648 <std>
 800a758:	2301      	movs	r3, #1
 800a75a:	61a3      	str	r3, [r4, #24]
 800a75c:	e7d2      	b.n	800a704 <__sinit+0xc>
 800a75e:	bf00      	nop
 800a760:	0800b278 	.word	0x0800b278
 800a764:	0800a691 	.word	0x0800a691

0800a768 <__sfp>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	4607      	mov	r7, r0
 800a76c:	f7ff ffac 	bl	800a6c8 <__sfp_lock_acquire>
 800a770:	4b1e      	ldr	r3, [pc, #120]	; (800a7ec <__sfp+0x84>)
 800a772:	681e      	ldr	r6, [r3, #0]
 800a774:	69b3      	ldr	r3, [r6, #24]
 800a776:	b913      	cbnz	r3, 800a77e <__sfp+0x16>
 800a778:	4630      	mov	r0, r6
 800a77a:	f7ff ffbd 	bl	800a6f8 <__sinit>
 800a77e:	3648      	adds	r6, #72	; 0x48
 800a780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a784:	3b01      	subs	r3, #1
 800a786:	d503      	bpl.n	800a790 <__sfp+0x28>
 800a788:	6833      	ldr	r3, [r6, #0]
 800a78a:	b30b      	cbz	r3, 800a7d0 <__sfp+0x68>
 800a78c:	6836      	ldr	r6, [r6, #0]
 800a78e:	e7f7      	b.n	800a780 <__sfp+0x18>
 800a790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a794:	b9d5      	cbnz	r5, 800a7cc <__sfp+0x64>
 800a796:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <__sfp+0x88>)
 800a798:	60e3      	str	r3, [r4, #12]
 800a79a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a79e:	6665      	str	r5, [r4, #100]	; 0x64
 800a7a0:	f000 f847 	bl	800a832 <__retarget_lock_init_recursive>
 800a7a4:	f7ff ff96 	bl	800a6d4 <__sfp_lock_release>
 800a7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7b0:	6025      	str	r5, [r4, #0]
 800a7b2:	61a5      	str	r5, [r4, #24]
 800a7b4:	2208      	movs	r2, #8
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7bc:	f7fd fa3a 	bl	8007c34 <memset>
 800a7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7cc:	3468      	adds	r4, #104	; 0x68
 800a7ce:	e7d9      	b.n	800a784 <__sfp+0x1c>
 800a7d0:	2104      	movs	r1, #4
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f7ff ff62 	bl	800a69c <__sfmoreglue>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	6030      	str	r0, [r6, #0]
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d1d5      	bne.n	800a78c <__sfp+0x24>
 800a7e0:	f7ff ff78 	bl	800a6d4 <__sfp_lock_release>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	e7ee      	b.n	800a7c8 <__sfp+0x60>
 800a7ea:	bf00      	nop
 800a7ec:	0800b278 	.word	0x0800b278
 800a7f0:	ffff0001 	.word	0xffff0001

0800a7f4 <_fwalk_reent>:
 800a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	4688      	mov	r8, r1
 800a7fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a800:	2700      	movs	r7, #0
 800a802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a806:	f1b9 0901 	subs.w	r9, r9, #1
 800a80a:	d505      	bpl.n	800a818 <_fwalk_reent+0x24>
 800a80c:	6824      	ldr	r4, [r4, #0]
 800a80e:	2c00      	cmp	r4, #0
 800a810:	d1f7      	bne.n	800a802 <_fwalk_reent+0xe>
 800a812:	4638      	mov	r0, r7
 800a814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a818:	89ab      	ldrh	r3, [r5, #12]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d907      	bls.n	800a82e <_fwalk_reent+0x3a>
 800a81e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a822:	3301      	adds	r3, #1
 800a824:	d003      	beq.n	800a82e <_fwalk_reent+0x3a>
 800a826:	4629      	mov	r1, r5
 800a828:	4630      	mov	r0, r6
 800a82a:	47c0      	blx	r8
 800a82c:	4307      	orrs	r7, r0
 800a82e:	3568      	adds	r5, #104	; 0x68
 800a830:	e7e9      	b.n	800a806 <_fwalk_reent+0x12>

0800a832 <__retarget_lock_init_recursive>:
 800a832:	4770      	bx	lr

0800a834 <__retarget_lock_acquire_recursive>:
 800a834:	4770      	bx	lr

0800a836 <__retarget_lock_release_recursive>:
 800a836:	4770      	bx	lr

0800a838 <__swhatbuf_r>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	460e      	mov	r6, r1
 800a83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a840:	2900      	cmp	r1, #0
 800a842:	b096      	sub	sp, #88	; 0x58
 800a844:	4614      	mov	r4, r2
 800a846:	461d      	mov	r5, r3
 800a848:	da07      	bge.n	800a85a <__swhatbuf_r+0x22>
 800a84a:	2300      	movs	r3, #0
 800a84c:	602b      	str	r3, [r5, #0]
 800a84e:	89b3      	ldrh	r3, [r6, #12]
 800a850:	061a      	lsls	r2, r3, #24
 800a852:	d410      	bmi.n	800a876 <__swhatbuf_r+0x3e>
 800a854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a858:	e00e      	b.n	800a878 <__swhatbuf_r+0x40>
 800a85a:	466a      	mov	r2, sp
 800a85c:	f000 f902 	bl	800aa64 <_fstat_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	dbf2      	blt.n	800a84a <__swhatbuf_r+0x12>
 800a864:	9a01      	ldr	r2, [sp, #4]
 800a866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a86a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a86e:	425a      	negs	r2, r3
 800a870:	415a      	adcs	r2, r3
 800a872:	602a      	str	r2, [r5, #0]
 800a874:	e7ee      	b.n	800a854 <__swhatbuf_r+0x1c>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	2000      	movs	r0, #0
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	b016      	add	sp, #88	; 0x58
 800a87e:	bd70      	pop	{r4, r5, r6, pc}

0800a880 <__smakebuf_r>:
 800a880:	898b      	ldrh	r3, [r1, #12]
 800a882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a884:	079d      	lsls	r5, r3, #30
 800a886:	4606      	mov	r6, r0
 800a888:	460c      	mov	r4, r1
 800a88a:	d507      	bpl.n	800a89c <__smakebuf_r+0x1c>
 800a88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	2301      	movs	r3, #1
 800a896:	6163      	str	r3, [r4, #20]
 800a898:	b002      	add	sp, #8
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	ab01      	add	r3, sp, #4
 800a89e:	466a      	mov	r2, sp
 800a8a0:	f7ff ffca 	bl	800a838 <__swhatbuf_r>
 800a8a4:	9900      	ldr	r1, [sp, #0]
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff f987 	bl	8009bbc <_malloc_r>
 800a8ae:	b948      	cbnz	r0, 800a8c4 <__smakebuf_r+0x44>
 800a8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b4:	059a      	lsls	r2, r3, #22
 800a8b6:	d4ef      	bmi.n	800a898 <__smakebuf_r+0x18>
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	f043 0302 	orr.w	r3, r3, #2
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	e7e3      	b.n	800a88c <__smakebuf_r+0xc>
 800a8c4:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <__smakebuf_r+0x7c>)
 800a8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	6163      	str	r3, [r4, #20]
 800a8d6:	9b01      	ldr	r3, [sp, #4]
 800a8d8:	6120      	str	r0, [r4, #16]
 800a8da:	b15b      	cbz	r3, 800a8f4 <__smakebuf_r+0x74>
 800a8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f000 f8d1 	bl	800aa88 <_isatty_r>
 800a8e6:	b128      	cbz	r0, 800a8f4 <__smakebuf_r+0x74>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	89a0      	ldrh	r0, [r4, #12]
 800a8f6:	4305      	orrs	r5, r0
 800a8f8:	81a5      	strh	r5, [r4, #12]
 800a8fa:	e7cd      	b.n	800a898 <__smakebuf_r+0x18>
 800a8fc:	0800a691 	.word	0x0800a691

0800a900 <_malloc_usable_size_r>:
 800a900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a904:	1f18      	subs	r0, r3, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	bfbc      	itt	lt
 800a90a:	580b      	ldrlt	r3, [r1, r0]
 800a90c:	18c0      	addlt	r0, r0, r3
 800a90e:	4770      	bx	lr

0800a910 <_raise_r>:
 800a910:	291f      	cmp	r1, #31
 800a912:	b538      	push	{r3, r4, r5, lr}
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	d904      	bls.n	800a924 <_raise_r+0x14>
 800a91a:	2316      	movs	r3, #22
 800a91c:	6003      	str	r3, [r0, #0]
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a926:	b112      	cbz	r2, 800a92e <_raise_r+0x1e>
 800a928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a92c:	b94b      	cbnz	r3, 800a942 <_raise_r+0x32>
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 f830 	bl	800a994 <_getpid_r>
 800a934:	462a      	mov	r2, r5
 800a936:	4601      	mov	r1, r0
 800a938:	4620      	mov	r0, r4
 800a93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a93e:	f000 b817 	b.w	800a970 <_kill_r>
 800a942:	2b01      	cmp	r3, #1
 800a944:	d00a      	beq.n	800a95c <_raise_r+0x4c>
 800a946:	1c59      	adds	r1, r3, #1
 800a948:	d103      	bne.n	800a952 <_raise_r+0x42>
 800a94a:	2316      	movs	r3, #22
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	2001      	movs	r0, #1
 800a950:	e7e7      	b.n	800a922 <_raise_r+0x12>
 800a952:	2400      	movs	r4, #0
 800a954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a958:	4628      	mov	r0, r5
 800a95a:	4798      	blx	r3
 800a95c:	2000      	movs	r0, #0
 800a95e:	e7e0      	b.n	800a922 <_raise_r+0x12>

0800a960 <raise>:
 800a960:	4b02      	ldr	r3, [pc, #8]	; (800a96c <raise+0xc>)
 800a962:	4601      	mov	r1, r0
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f7ff bfd3 	b.w	800a910 <_raise_r>
 800a96a:	bf00      	nop
 800a96c:	2000001c 	.word	0x2000001c

0800a970 <_kill_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d07      	ldr	r5, [pc, #28]	; (800a990 <_kill_r+0x20>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	f7f7 f985 	bl	8001c8c <_kill>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d102      	bne.n	800a98c <_kill_r+0x1c>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	b103      	cbz	r3, 800a98c <_kill_r+0x1c>
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	bf00      	nop
 800a990:	20003bb4 	.word	0x20003bb4

0800a994 <_getpid_r>:
 800a994:	f7f7 b972 	b.w	8001c7c <_getpid>

0800a998 <__sread>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a0:	f000 f894 	bl	800aacc <_read_r>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	bfab      	itete	ge
 800a9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a9ac:	181b      	addge	r3, r3, r0
 800a9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9b2:	bfac      	ite	ge
 800a9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9b6:	81a3      	strhlt	r3, [r4, #12]
 800a9b8:	bd10      	pop	{r4, pc}

0800a9ba <__swrite>:
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	461f      	mov	r7, r3
 800a9c0:	898b      	ldrh	r3, [r1, #12]
 800a9c2:	05db      	lsls	r3, r3, #23
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	d505      	bpl.n	800a9d8 <__swrite+0x1e>
 800a9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f000 f868 	bl	800aaa8 <_lseek_r>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	f000 b817 	b.w	800aa20 <_write_r>

0800a9f2 <__sseek>:
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fa:	f000 f855 	bl	800aaa8 <_lseek_r>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	bf15      	itete	ne
 800aa04:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa0e:	81a3      	strheq	r3, [r4, #12]
 800aa10:	bf18      	it	ne
 800aa12:	81a3      	strhne	r3, [r4, #12]
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <__sclose>:
 800aa16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1a:	f000 b813 	b.w	800aa44 <_close_r>
	...

0800aa20 <_write_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d07      	ldr	r5, [pc, #28]	; (800aa40 <_write_r+0x20>)
 800aa24:	4604      	mov	r4, r0
 800aa26:	4608      	mov	r0, r1
 800aa28:	4611      	mov	r1, r2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	602a      	str	r2, [r5, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f7f7 f963 	bl	8001cfa <_write>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_write_r+0x1e>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_write_r+0x1e>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	20003bb4 	.word	0x20003bb4

0800aa44 <_close_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_close_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f7 f96f 	bl	8001d32 <_close>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_close_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_close_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	20003bb4 	.word	0x20003bb4

0800aa64 <_fstat_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d07      	ldr	r5, [pc, #28]	; (800aa84 <_fstat_r+0x20>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	f7f7 f96a 	bl	8001d4a <_fstat>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d102      	bne.n	800aa80 <_fstat_r+0x1c>
 800aa7a:	682b      	ldr	r3, [r5, #0]
 800aa7c:	b103      	cbz	r3, 800aa80 <_fstat_r+0x1c>
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	bd38      	pop	{r3, r4, r5, pc}
 800aa82:	bf00      	nop
 800aa84:	20003bb4 	.word	0x20003bb4

0800aa88 <_isatty_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	; (800aaa4 <_isatty_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f7 f969 	bl	8001d6a <_isatty>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_isatty_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_isatty_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20003bb4 	.word	0x20003bb4

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_lseek_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f7 f962 	bl	8001d80 <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20003bb4 	.word	0x20003bb4

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_read_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f7 f8f0 	bl	8001cc0 <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20003bb4 	.word	0x20003bb4

0800aaf0 <_init>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr

0800aafc <_fini>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr
