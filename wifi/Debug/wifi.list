
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  0800ac78  0800ac78  0001ac78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b804  0800b804  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b804  0800b804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b80c  0800b80c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b810  0800b810  0001b810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039d8  200001ec  0800ba00  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bc4  0800ba00  00023bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001826b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003519  00000000  00000000  00038487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c20  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f0a  00000000  00000000  000576f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096707  00000000  00000000  0006d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af0  00000000  00000000  00103d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac60 	.word	0x0800ac60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800ac60 	.word	0x0800ac60

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  return wire_init();
 8000f74:	f002 fc00 	bl	8003778 <wire_init>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <send_cmd>:




static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000f8a:	f002 fc17 	bl	80037bc <wire_reset>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <send_cmd+0x1a>
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e01e      	b.n	8000fd6 <send_cmd+0x58>

  if (!rom_code) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000f9e:	20cc      	movs	r0, #204	; 0xcc
 8000fa0:	f002 fca8 	bl	80038f4 <wire_write>
 8000fa4:	e012      	b.n	8000fcc <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000fa6:	2055      	movs	r0, #85	; 0x55
 8000fa8:	f002 fca4 	bl	80038f4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e009      	b.n	8000fc6 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fc9a 	bl	80038f4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	ddf2      	ble.n	8000fb2 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fc90 	bl	80038f4 <wire_write>
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <ds18b20_start_measure>:


HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000fe6:	2144      	movs	r1, #68	; 0x44
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffc8 	bl	8000f7e <send_cmd>
 8000fee:	4603      	mov	r3, r0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <ds18b20_read_scratchpad>:


static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001002:	21be      	movs	r1, #190	; 0xbe
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffba 	bl	8000f7e <send_cmd>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e01e      	b.n	8001052 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e009      	b.n	800102e <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	18d4      	adds	r4, r2, r3
 8001020:	f002 fc1a 	bl	8003858 <wire_read>
 8001024:	4603      	mov	r3, r0
 8001026:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b08      	cmp	r3, #8
 8001032:	ddf2      	ble.n	800101a <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001034:	2108      	movs	r1, #8
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f002 fca4 	bl	8003984 <wire_crc>
 800103c:	4603      	mov	r3, r0
 800103e:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3308      	adds	r3, #8
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	7afa      	ldrb	r2, [r7, #11]
 8001048:	429a      	cmp	r2, r3
 800104a:	d101      	bne.n	8001050 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
	...

0800105c <ds18b20_get_temp>:


float ds18b20_get_temp(const uint8_t* rom_code)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;
  int i;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffc4 	bl	8000ff8 <ds18b20_read_scratchpad>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <ds18b20_get_temp+0x20>
    return 85.0f;
 8001076:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010d0 <ds18b20_get_temp+0x74>
 800107a:	e022      	b.n	80010c2 <ds18b20_get_temp+0x66>

  for(i=0 ; i<DS18B20_SCRATCHPAD_SIZE ; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e00c      	b.n	800109c <ds18b20_get_temp+0x40>
  moj_scratchpad[i] = scratchpad[i];
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	4413      	add	r3, r2
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <ds18b20_get_temp+0x78>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	4413      	add	r3, r2
 8001092:	460a      	mov	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
  for(i=0 ; i<DS18B20_SCRATCHPAD_SIZE ; i++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	ddef      	ble.n	8001082 <ds18b20_get_temp+0x26>
 80010a2:	8a3b      	ldrh	r3, [r7, #16]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 80010a4:	81fb      	strh	r3, [r7, #14]
  temp2 = temp;
 80010a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <ds18b20_get_temp+0x7c>)
 80010ac:	801a      	strh	r2, [r3, #0]


  return temp / 16.0f;
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c2:	eef0 7a47 	vmov.f32	s15, s14
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	42aa0000 	.word	0x42aa0000
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000222 	.word	0x20000222

080010dc <esp_write_line>:
#include "esp.h"

char esp_IP2 [1000]; //[30]
// Funkcja wysyłająca podany ciąg znaków przez interfejs UART
void esp_write_line(UART_HandleTypeDef * handler, char * text) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
HAL_UART_Transmit(handler, text, strlen(text), 1000);
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f884 	bl	80001f4 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f005 f99c 	bl	8006434 <HAL_UART_Transmit>
HAL_UART_Transmit(handler, "\r\n", 2, 100);
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	2202      	movs	r2, #2
 8001100:	4903      	ldr	r1, [pc, #12]	; (8001110 <esp_write_line+0x34>)
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f005 f996 	bl	8006434 <HAL_UART_Transmit>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800ac78 	.word	0x0800ac78

08001114 <esp_read_line>:
// Funkcja odbierająca linię tekstu przez interfejs UART
void esp_read_line(UART_HandleTypeDef * handler, char * buffer, uint16_t buffer_size) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	80fb      	strh	r3, [r7, #6]
HAL_StatusTypeDef status;
char current_char;
uint16_t char_counter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	82fb      	strh	r3, [r7, #22]
while (char_counter < buffer_size - 1) {
 8001126:	e01d      	b.n	8001164 <esp_read_line+0x50>
status = HAL_UART_Receive(handler, &current_char, 1, 1);
 8001128:	f107 0114 	add.w	r1, r7, #20
 800112c:	2301      	movs	r3, #1
 800112e:	2201      	movs	r2, #1
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f005 fa11 	bl	8006558 <HAL_UART_Receive>
 8001136:	4603      	mov	r3, r0
 8001138:	757b      	strb	r3, [r7, #21]
if (status == HAL_OK) {
 800113a:	7d7b      	ldrb	r3, [r7, #21]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d111      	bne.n	8001164 <esp_read_line+0x50>
if (current_char == '\r' || current_char == '\n')
 8001140:	7d3b      	ldrb	r3, [r7, #20]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d002      	beq.n	800114c <esp_read_line+0x38>
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	2b0a      	cmp	r3, #10
 800114a:	d103      	bne.n	8001154 <esp_read_line+0x40>
if (char_counter == 0) continue;
 800114c:	8afb      	ldrh	r3, [r7, #22]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10e      	bne.n	8001170 <esp_read_line+0x5c>
 8001152:	e007      	b.n	8001164 <esp_read_line+0x50>
else break;
*(buffer + char_counter++) = current_char;
 8001154:	8afb      	ldrh	r3, [r7, #22]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	82fa      	strh	r2, [r7, #22]
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4413      	add	r3, r2
 8001160:	7d3a      	ldrb	r2, [r7, #20]
 8001162:	701a      	strb	r2, [r3, #0]
while (char_counter < buffer_size - 1) {
 8001164:	8afa      	ldrh	r2, [r7, #22]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	3b01      	subs	r3, #1
 800116a:	429a      	cmp	r2, r3
 800116c:	dbdc      	blt.n	8001128 <esp_read_line+0x14>
 800116e:	e000      	b.n	8001172 <esp_read_line+0x5e>
else break;
 8001170:	bf00      	nop
}
}
*(buffer + char_counter) = '\0';
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <esp_read_char>:
// Funkcja odczytująca pojedynczy znak odebrany przez UART
char esp_read_char(UART_HandleTypeDef * handler) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
char buffer = '\0';
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
HAL_UART_Receive(handler, &buffer, 1, 1000);
 8001190:	f107 010f 	add.w	r1, r7, #15
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	2201      	movs	r2, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f005 f9dc 	bl	8006558 <HAL_UART_Receive>
return buffer;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <esp_send_cmd>:
// Funkcja wysyłająca polecenie do modułu ESP8266
// i oczekująca na jego potwierdzenie
uint8_t esp_send_cmd(UART_HandleTypeDef * uart, char * command) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	6018      	str	r0, [r3, #0]
 80011b8:	463b      	mov	r3, r7
 80011ba:	6019      	str	r1, [r3, #0]
char response[1000]; //[30]
response[0] = '\0';
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
int i = 1000;//dołożone
 80011c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
esp_write_line(uart, command);
 80011cc:	463a      	mov	r2, r7
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	6811      	ldr	r1, [r2, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f7ff ff82 	bl	80010dc <esp_write_line>
__HAL_UART_FLUSH_DRREGISTER(&huart1);
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <esp_send_cmd+0x9c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
//i++;
//}
//strcat(esp_IP2,response);
//return 1;

while (strcmp(response, "OK") != 0 && strcmp(response, "no change") != 0 && strcmp(response, "ERROR") != 0)
 80011de:	e006      	b.n	80011ee <esp_send_cmd+0x42>
esp_read_line(uart, response, 30);
 80011e0:	f107 010c 	add.w	r1, r7, #12
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	221e      	movs	r2, #30
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f7ff ff93 	bl	8001114 <esp_read_line>
while (strcmp(response, "OK") != 0 && strcmp(response, "no change") != 0 && strcmp(response, "ERROR") != 0)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4916      	ldr	r1, [pc, #88]	; (800124c <esp_send_cmd+0xa0>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe fff3 	bl	80001e0 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d011      	beq.n	8001224 <esp_send_cmd+0x78>
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4912      	ldr	r1, [pc, #72]	; (8001250 <esp_send_cmd+0xa4>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffea 	bl	80001e0 <strcmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <esp_send_cmd+0x78>
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	490f      	ldr	r1, [pc, #60]	; (8001254 <esp_send_cmd+0xa8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffe1 	bl	80001e0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1dd      	bne.n	80011e0 <esp_send_cmd+0x34>
if (strcmp(response, "ERROR") == 0) return 0;
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	490a      	ldr	r1, [pc, #40]	; (8001254 <esp_send_cmd+0xa8>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ffd8 	bl	80001e0 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <esp_send_cmd+0x8e>
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <esp_send_cmd+0x90>
else return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20003b6c 	.word	0x20003b6c
 800124c:	0800ac7c 	.word	0x0800ac7c
 8001250:	0800ac80 	.word	0x0800ac80
 8001254:	0800ac8c 	.word	0x0800ac8c

08001258 <esp_send_data_and_close>:
}
//

// Funkcja wysyłająca dane przez nawiązane połączenie TCP
// i zamykająca to połączenie
void esp_send_data_and_close(UART_HandleTypeDef * uart, char mux_id, char * content) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	460b      	mov	r3, r1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	72fb      	strb	r3, [r7, #11]
	char cmd[17];
	sprintf(cmd, "AT+CIPSEND=%c,%d", mux_id, strlen(content));
 8001266:	7afc      	ldrb	r4, [r7, #11]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ffc3 	bl	80001f4 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	f107 0014 	add.w	r0, r7, #20
 8001274:	4622      	mov	r2, r4
 8001276:	4917      	ldr	r1, [pc, #92]	; (80012d4 <esp_send_data_and_close+0x7c>)
 8001278:	f007 fa04 	bl	8008684 <siprintf>
	esp_write_line(uart, cmd);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ff2a 	bl	80010dc <esp_write_line>
	HAL_Delay(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f002 fc39 	bl	8003b00 <HAL_Delay>
	HAL_UART_Transmit(uart, content, strlen(content),5000 ); /// 5000
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7fe ffb0 	bl	80001f4 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f241 3388 	movw	r3, #5000	; 0x1388
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f005 f8c8 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f002 fc2b 	bl	8003b00 <HAL_Delay>
	sprintf(cmd, "AT+CIPCLOSE=%c", esp_recv_mux);
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <esp_send_data_and_close+0x80>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <esp_send_data_and_close+0x84>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 f9e3 	bl	8008684 <siprintf>
	esp_write_line(uart, cmd);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff ff09 	bl	80010dc <esp_write_line>


}
 80012ca:	bf00      	nop
 80012cc:	372c      	adds	r7, #44	; 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800aca0 	.word	0x0800aca0
 80012d8:	2000060c 	.word	0x2000060c
 80012dc:	0800acb4 	.word	0x0800acb4

080012e0 <esp_start_int_recv>:
// Funkcja uruchamiająca obsługę przerwań
void esp_start_int_recv(UART_HandleTypeDef * uart) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(uart);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 80012ee:	2201      	movs	r2, #1
 80012f0:	4903      	ldr	r1, [pc, #12]	; (8001300 <esp_start_int_recv+0x20>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f005 f9d2 	bl	800669c <HAL_UART_Receive_IT>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000610 	.word	0x20000610

08001304 <esp_restart_int_recv>:
// Funkcja wznawiająca obsługę przerwań
void esp_restart_int_recv(UART_HandleTypeDef * uart) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	esp_recv_flag = 0;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <esp_restart_int_recv+0x20>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <esp_restart_int_recv+0x24>)
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f005 f9c0 	bl	800669c <HAL_UART_Receive_IT>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000a14 	.word	0x20000a14
 8001328:	20000610 	.word	0x20000610

0800132c <HAL_UART_RxCpltCallback>:

// Funkcja obsługująca przerwanie, wywoływana w momencie odebrania
// przez interfejs UART pojedynczego bajtu danych
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * uart) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (esp_recv_char == esp_pattern[esp_char_counter]) {
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_UART_RxCpltCallback+0xc0>)
 800133e:	5c9a      	ldrb	r2, [r3, r2]
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	d143      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0xa6>
		esp_char_counter++;
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 8001356:	701a      	strb	r2, [r3, #0]
		if (esp_char_counter == 5) {
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d13a      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0xac>
			// Jeśli odbierzemy ciąg znaków "+IPD,":
			// Odczytujemy numer połączenia do zmiennej esp_recv_mux
			esp_recv_mux = esp_read_char(uart);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff0e 	bl	8001184 <esp_read_char>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_UART_RxCpltCallback+0xc8>)
 800136e:	701a      	strb	r2, [r3, #0]
			esp_read_char(uart);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff07 	bl	8001184 <esp_read_char>
			// Odczytujemy długość odebranych danych do esp_recv_len
			char length_str[5];
			char current_char = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75bb      	strb	r3, [r7, #22]
			uint8_t char_counter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
			do {
				current_char = esp_read_char(uart);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff00 	bl	8001184 <esp_read_char>
 8001384:	4603      	mov	r3, r0
 8001386:	75bb      	strb	r3, [r7, #22]
				length_str[char_counter++] = current_char;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	75fa      	strb	r2, [r7, #23]
 800138e:	f107 0218 	add.w	r2, r7, #24
 8001392:	4413      	add	r3, r2
 8001394:	7dba      	ldrb	r2, [r7, #22]
 8001396:	f803 2c0c 	strb.w	r2, [r3, #-12]
			} while (current_char != ':');
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	2b3a      	cmp	r3, #58	; 0x3a
 800139e:	d1ee      	bne.n	800137e <HAL_UART_RxCpltCallback+0x52>

			length_str[char_counter] = '\0';
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	f107 0218 	add.w	r2, r7, #24
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
			uint16_t esp_recv_len = atoi(&length_str);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fc9e 	bl	8007cf4 <atoi>
 80013b8:	4603      	mov	r3, r0
 80013ba:	82bb      	strh	r3, [r7, #20]
			// Odbieramy dane do bufora esp_recv_buffer
			HAL_UART_Receive(uart, esp_recv_buffer,
 80013bc:	8aba      	ldrh	r2, [r7, #20]
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <HAL_UART_RxCpltCallback+0xcc>)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f005 f8c7 	bl	8006558 <HAL_UART_Receive>
			esp_recv_len, 1000);
			esp_recv_flag = 1;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_UART_RxCpltCallback+0xd0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_UART_RxCpltCallback+0xb6>

			return;
		}
	} else esp_char_counter = 0;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_UART_RxCpltCallback+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	// Ponowne uruchomienie przerwania
	HAL_UART_Receive_IT(uart, &esp_recv_char, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	4905      	ldr	r1, [pc, #20]	; (80013f0 <HAL_UART_RxCpltCallback+0xc4>)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f005 f95d 	bl	800669c <HAL_UART_Receive_IT>
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000611 	.word	0x20000611
 80013ec:	20000a18 	.word	0x20000a18
 80013f0:	20000610 	.word	0x20000610
 80013f4:	2000060c 	.word	0x2000060c
 80013f8:	20000614 	.word	0x20000614
 80013fc:	20000a14 	.word	0x20000a14

08001400 <esp_setup>:

// Funkcja przesyłająca do modułu ESP8266 polecenia konfigurujące
uint8_t esp_setup(UART_HandleTypeDef * uart, char * wifi_name, char * wifi_pass) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b09e      	sub	sp, #120	; 0x78
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
esp_char_counter = 0;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <esp_setup+0xa8>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
strcpy(esp_pattern, "+IPD,");
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <esp_setup+0xac>)
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <esp_setup+0xb0>)
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	6018      	str	r0, [r3, #0]
 800141a:	8892      	ldrh	r2, [r2, #4]
 800141c:	809a      	strh	r2, [r3, #4]
esp_recv_flag = 0;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <esp_setup+0xb4>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
char conn_str[100];
sprintf(conn_str, "AT+CWJAP_CUR=\"%s\",\"%s\"", wifi_name, wifi_pass);
 8001424:	f107 0014 	add.w	r0, r7, #20
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <esp_setup+0xb8>)
 800142e:	f007 f929 	bl	8008684 <siprintf>
HAL_Delay(500); // Oczekujemy na uruchomienie modułu
 8001432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001436:	f002 fb63 	bl	8003b00 <HAL_Delay>
if (!esp_send_cmd(uart, "AT+CWMODE=1")) return 0;
 800143a:	4920      	ldr	r1, [pc, #128]	; (80014bc <esp_setup+0xbc>)
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff feb5 	bl	80011ac <esp_send_cmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <esp_setup+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e029      	b.n	80014a0 <esp_setup+0xa0>
if (!esp_send_cmd(uart, conn_str)) return 0;
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff feaa 	bl	80011ac <esp_send_cmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <esp_setup+0x62>
 800145e:	2300      	movs	r3, #0
 8001460:	e01e      	b.n	80014a0 <esp_setup+0xa0>
if (!esp_send_cmd(uart, "AT+CIPMUX=1")) return 0;
 8001462:	4917      	ldr	r1, [pc, #92]	; (80014c0 <esp_setup+0xc0>)
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fea1 	bl	80011ac <esp_send_cmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <esp_setup+0x74>
 8001470:	2300      	movs	r3, #0
 8001472:	e015      	b.n	80014a0 <esp_setup+0xa0>
if (!esp_send_cmd(uart, "AT+CIPSERVER=1,80")) return 0;
 8001474:	4913      	ldr	r1, [pc, #76]	; (80014c4 <esp_setup+0xc4>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff fe98 	bl	80011ac <esp_send_cmd>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <esp_setup+0x86>
 8001482:	2300      	movs	r3, #0
 8001484:	e00c      	b.n	80014a0 <esp_setup+0xa0>
if (!esp_send_cmd(uart, "AT+CIPSTA?")) return 0;
 8001486:	4910      	ldr	r1, [pc, #64]	; (80014c8 <esp_setup+0xc8>)
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fe8f 	bl	80011ac <esp_send_cmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <esp_setup+0x98>
 8001494:	2300      	movs	r3, #0
 8001496:	e003      	b.n	80014a0 <esp_setup+0xa0>
//HAL_Delay(1500); // w razie w odkomentuj
esp_start_int_recv(uart);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff ff21 	bl	80012e0 <esp_start_int_recv>
return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3778      	adds	r7, #120	; 0x78
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000611 	.word	0x20000611
 80014ac:	20000a18 	.word	0x20000a18
 80014b0:	0800acc4 	.word	0x0800acc4
 80014b4:	20000a14 	.word	0x20000a14
 80014b8:	0800accc 	.word	0x0800accc
 80014bc:	0800ace4 	.word	0x0800ace4
 80014c0:	0800acf0 	.word	0x0800acf0
 80014c4:	0800acfc 	.word	0x0800acfc
 80014c8:	0800ac94 	.word	0x0800ac94

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <MX_GPIO_Init+0xfc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a37      	ldr	r2, [pc, #220]	; (80015c8 <MX_GPIO_Init+0xfc>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <MX_GPIO_Init+0xfc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_GPIO_Init+0xfc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_GPIO_Init+0xfc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <MX_GPIO_Init+0xfc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_CH_PD_Pin|DS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	481d      	ldr	r0, [pc, #116]	; (80015cc <MX_GPIO_Init+0x100>)
 8001558:	f002 fe36 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4816      	ldr	r0, [pc, #88]	; (80015cc <MX_GPIO_Init+0x100>)
 8001574:	f002 fc8c 	bl	8003e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_CH_PD_Pin;
 8001578:	2308      	movs	r3, #8
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_CH_PD_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <MX_GPIO_Init+0x100>)
 8001590:	f002 fc7e 	bl	8003e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001594:	2320      	movs	r3, #32
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001598:	2311      	movs	r3, #17
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4808      	ldr	r0, [pc, #32]	; (80015cc <MX_GPIO_Init+0x100>)
 80015ac:	f002 fc70 	bl	8003e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2028      	movs	r0, #40	; 0x28
 80015b6:	f002 fba2 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ba:	2028      	movs	r0, #40	; 0x28
 80015bc:	f002 fbbb 	bl	8003d36 <HAL_NVIC_EnableIRQ>

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_GPIO_EXTI_Callback>:

void Log_Time(void); // pobranie aktualnego czasu i wpisanie aktualnego loga

// tu powinna być tylko deklaracja funkcji, a poniżej maina jej ciało, no ale dobra
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // funkcja z redefinicji
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]

	  Log_Time();
 80015da:	f000 f9a1 	bl	8001920 <Log_Time>
	//interrupt++;

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <set_led_brightness>:


// Funkcja obliczająca korekcję gamma i ustawiająca jasność diody
void set_led_brightness(TIM_HandleTypeDef * timer,
		uint32_t channel, uint8_t brightness)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	71fb      	strb	r3, [r7, #7]
	int32_t value = powf((double) brightness / 255.0, 2.2) * 49999;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff9b 	bl	8000534 <__aeabi_ui2d>
 80015fe:	a320      	add	r3, pc, #128	; (adr r3, 8001680 <set_led_brightness+0x98>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f93a 	bl	800087c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fae2 	bl	8000bd8 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001678 <set_led_brightness+0x90>
 800161a:	ee00 3a10 	vmov	s0, r3
 800161e:	f005 ff25 	bl	800746c <powf>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800167c <set_led_brightness+0x94>
 800162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <set_led_brightness+0x60>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001646:	e013      	b.n	8001670 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d104      	bne.n	8001658 <set_led_brightness+0x70>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001656:	e00b      	b.n	8001670 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d104      	bne.n	8001668 <set_led_brightness+0x80>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001666:	e003      	b.n	8001670 <set_led_brightness+0x88>
	__HAL_TIM_SET_COMPARE(timer, channel, value);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	400ccccd 	.word	0x400ccccd
 800167c:	47434f00 	.word	0x47434f00
 8001680:	00000000 	.word	0x00000000
 8001684:	406fe000 	.word	0x406fe000

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int web_state = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f002 f9c3 	bl	8003a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 f8d9 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f7ff ff17 	bl	80014cc <MX_GPIO_Init>
  MX_TIM1_Init();
 800169e:	f000 fc8f 	bl	8001fc0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016a2:	f000 fdf7 	bl	8002294 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016a6:	f000 fd27 	bl	80020f8 <MX_TIM2_Init>
  MX_RTC_Init();
 80016aa:	f000 fabd 	bl	8001c28 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016ae:	2100      	movs	r1, #0
 80016b0:	4856      	ldr	r0, [pc, #344]	; (800180c <main+0x184>)
 80016b2:	f004 fccd 	bl	8006050 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016b6:	2104      	movs	r1, #4
 80016b8:	4854      	ldr	r0, [pc, #336]	; (800180c <main+0x184>)
 80016ba:	f004 fcc9 	bl	8006050 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80016be:	2108      	movs	r1, #8
 80016c0:	4852      	ldr	r0, [pc, #328]	; (800180c <main+0x184>)
 80016c2:	f004 fcc5 	bl	8006050 <HAL_TIMEx_PWMN_Start>


  if(ds18b20_init() != HAL_OK) Error_Handler();
 80016c6:	f7ff fc53 	bl	8000f70 <ds18b20_init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <main+0x4c>
 80016d0:	f000 faa4 	bl	8001c1c <Error_Handler>
  //if(ds18b20_read_address(ds1)!= HAL_OK)Error_Handler(); // do odczytywania adresów czujników

  web_def(); // przepisanie stron internetowych
 80016d4:	f001 f93e 	bl	8002954 <web_def>
//  if (esp_setup(&huart1, "BUS OBSERWACYJNY 1504", "HUNDERTWASSERHAUS"))
//	  set_color(100, 100, 0);
//  else
//	  set_color(30, 30, 0);           //////// Docelowy router

  if (esp_setup(&huart1, "BUS OBSERWACYJNY 1504", "HUNDERTWASSERHAUS"))
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <main+0x188>)
 80016da:	494e      	ldr	r1, [pc, #312]	; (8001814 <main+0x18c>)
 80016dc:	484e      	ldr	r0, [pc, #312]	; (8001818 <main+0x190>)
 80016de:	f7ff fe8f 	bl	8001400 <esp_setup>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <main+0x6c>
	  set_color(100, 100, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2164      	movs	r1, #100	; 0x64
 80016ec:	2064      	movs	r0, #100	; 0x64
 80016ee:	f000 fa73 	bl	8001bd8 <set_color>
 80016f2:	e004      	b.n	80016fe <main+0x76>
  else
	  set_color(30, 30, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	211e      	movs	r1, #30
 80016f8:	201e      	movs	r0, #30
 80016fa:	f000 fa6d 	bl	8001bd8 <set_color>
	//esp_send_data_and_close(&huart1, esp_recv_mux, webpage); // dodałem, żeby wysyłało stronę zanim wejdzie do while
	//esp_restart_int_recv(&huart1);


  //  //set time
    if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1) != 0x32F2) // próba zrobienia, żeby się nie resetowało
 80016fe:	2101      	movs	r1, #1
 8001700:	4846      	ldr	r0, [pc, #280]	; (800181c <main+0x194>)
 8001702:	f003 fe29 	bl	8005358 <HAL_RTCEx_BKUPRead>
 8001706:	4603      	mov	r3, r0
 8001708:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <main+0xa4>
    {
    sTime.Hours = 13;
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <main+0x198>)
 8001712:	220d      	movs	r2, #13
 8001714:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 23;
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <main+0x198>)
 8001718:	2217      	movs	r2, #23
 800171a:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 30;
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <main+0x198>)
 800171e:	221e      	movs	r2, #30
 8001720:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 8001722:	2200      	movs	r2, #0
 8001724:	493e      	ldr	r1, [pc, #248]	; (8001820 <main+0x198>)
 8001726:	483d      	ldr	r0, [pc, #244]	; (800181c <main+0x194>)
 8001728:	f003 fb75 	bl	8004e16 <HAL_RTC_SetTime>
    }

    sDate.Date = 18;
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <main+0x19c>)
 800172e:	2212      	movs	r2, #18
 8001730:	709a      	strb	r2, [r3, #2]
    sDate.Month = RTC_MONTH_MARCH;
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <main+0x19c>)
 8001734:	2203      	movs	r2, #3
 8001736:	705a      	strb	r2, [r3, #1]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <main+0x19c>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    sDate.Year = 22;
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <main+0x19c>)
 8001740:	2216      	movs	r2, #22
 8001742:	70da      	strb	r2, [r3, #3]
    HAL_RTC_SetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 8001744:	2200      	movs	r2, #0
 8001746:	4937      	ldr	r1, [pc, #220]	; (8001824 <main+0x19c>)
 8001748:	4834      	ldr	r0, [pc, #208]	; (800181c <main+0x194>)
 800174a:	f003 fc7f 	bl	800504c <HAL_RTC_SetDate>
//	  esp_send_data_and_close(&huart1, esp_recv_mux, frontpage);
//	  HAL_Delay(15000);



	  if (esp_recv_flag == 1)
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <main+0x1a0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d104      	bne.n	8001762 <main+0xda>
	  {
		select_web(&huart1, &web_state);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	482e      	ldr	r0, [pc, #184]	; (8001818 <main+0x190>)
 800175e:	f000 fe13 	bl	8002388 <select_web>
	  }


	  ds18b20_start_measure(ds1);
 8001762:	4832      	ldr	r0, [pc, #200]	; (800182c <main+0x1a4>)
 8001764:	f7ff fc3b 	bl	8000fde <ds18b20_start_measure>
	  temperature1 = ds18b20_get_temp(ds1);
 8001768:	4830      	ldr	r0, [pc, #192]	; (800182c <main+0x1a4>)
 800176a:	f7ff fc77 	bl	800105c <ds18b20_get_temp>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <main+0x1a8>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(temp_char_air,"%0.1f",temperature1);
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <main+0x1a8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fefb 	bl	8000578 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	492b      	ldr	r1, [pc, #172]	; (8001834 <main+0x1ac>)
 8001788:	482b      	ldr	r0, [pc, #172]	; (8001838 <main+0x1b0>)
 800178a:	f006 ff7b 	bl	8008684 <siprintf>

	  ds18b20_start_measure(ds2);
 800178e:	482b      	ldr	r0, [pc, #172]	; (800183c <main+0x1b4>)
 8001790:	f7ff fc25 	bl	8000fde <ds18b20_start_measure>
	  temperature2 = ds18b20_get_temp(ds2);
 8001794:	4829      	ldr	r0, [pc, #164]	; (800183c <main+0x1b4>)
 8001796:	f7ff fc61 	bl	800105c <ds18b20_get_temp>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <main+0x1b8>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(temp_char_water,"%0.1f",temperature2);
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <main+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fee5 	bl	8000578 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4920      	ldr	r1, [pc, #128]	; (8001834 <main+0x1ac>)
 80017b4:	4823      	ldr	r0, [pc, #140]	; (8001844 <main+0x1bc>)
 80017b6:	f006 ff65 	bl	8008684 <siprintf>

	  //strcat(&heizung[216], temp_char);
	  heizung[232] = temp_char_air[0];
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <main+0x1b0>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <main+0x1c0>)
 80017c0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	  heizung[233] = temp_char_air[1];
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <main+0x1b0>)
 80017c6:	785a      	ldrb	r2, [r3, #1]
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <main+0x1c0>)
 80017ca:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	  heizung[234] = temp_char_air[2];
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <main+0x1b0>)
 80017d0:	789a      	ldrb	r2, [r3, #2]
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <main+0x1c0>)
 80017d4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	  heizung[235] = temp_char_air[3];
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <main+0x1b0>)
 80017da:	78da      	ldrb	r2, [r3, #3]
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <main+0x1c0>)
 80017de:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb

	  heizung[285] = temp_char_water[0];
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <main+0x1bc>)
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <main+0x1c0>)
 80017e8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
	  heizung[286] = temp_char_water[1];
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <main+0x1bc>)
 80017ee:	785a      	ldrb	r2, [r3, #1]
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <main+0x1c0>)
 80017f2:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
	  heizung[287] = temp_char_water[2];
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <main+0x1bc>)
 80017f8:	789a      	ldrb	r2, [r3, #2]
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <main+0x1c0>)
 80017fc:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
	  heizung[288] = temp_char_water[3];
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <main+0x1bc>)
 8001802:	78da      	ldrb	r2, [r3, #3]
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <main+0x1c0>)
 8001806:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	  if (esp_recv_flag == 1)
 800180a:	e7a0      	b.n	800174e <main+0xc6>
 800180c:	20003adc 	.word	0x20003adc
 8001810:	0800ad10 	.word	0x0800ad10
 8001814:	0800ad24 	.word	0x0800ad24
 8001818:	20003b6c 	.word	0x20003b6c
 800181c:	20002cc8 	.word	0x20002cc8
 8001820:	20000a24 	.word	0x20000a24
 8001824:	20002cc0 	.word	0x20002cc0
 8001828:	20000a14 	.word	0x20000a14
 800182c:	20000000 	.word	0x20000000
 8001830:	20000a20 	.word	0x20000a20
 8001834:	0800ad3c 	.word	0x0800ad3c
 8001838:	20002c98 	.word	0x20002c98
 800183c:	20000008 	.word	0x20000008
 8001840:	200038e4 	.word	0x200038e4
 8001844:	200038dc 	.word	0x200038dc
 8001848:	20000a38 	.word	0x20000a38

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	; 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f006 faa0 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <SystemClock_Config+0xcc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <SystemClock_Config+0xcc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <SystemClock_Config+0xd0>)
 8001896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SystemClock_Config+0xd0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80018a8:	2305      	movs	r3, #5
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018b2:	2301      	movs	r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b6:	2302      	movs	r3, #2
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018c4:	2364      	movs	r3, #100	; 0x64
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fca9 	bl	800422c <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e0:	f000 f99c 	bl	8001c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2103      	movs	r1, #3
 8001900:	4618      	mov	r0, r3
 8001902:	f002 ff0b 	bl	800471c <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800190c:	f000 f986 	bl	8001c1c <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <Log_Time>:

/* USER CODE BEGIN 4 */

void Log_Time(void){
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

	int i=644;
 8001926:	f44f 7321 	mov.w	r3, #644	; 0x284
 800192a:	61fb      	str	r3, [r7, #28]
	char seconds[3]={0,0,0};
 800192c:	4aa3      	ldr	r2, [pc, #652]	; (8001bbc <Log_Time+0x29c>)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	3302      	adds	r3, #2
 800193a:	0c12      	lsrs	r2, r2, #16
 800193c:	701a      	strb	r2, [r3, #0]
	char minutes[3]={0,0,0};
 800193e:	4a9f      	ldr	r2, [pc, #636]	; (8001bbc <Log_Time+0x29c>)
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	4611      	mov	r1, r2
 8001948:	8019      	strh	r1, [r3, #0]
 800194a:	3302      	adds	r3, #2
 800194c:	0c12      	lsrs	r2, r2, #16
 800194e:	701a      	strb	r2, [r3, #0]
	char hours[3]={0,0,0};
 8001950:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <Log_Time+0x29c>)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4611      	mov	r1, r2
 800195a:	8019      	strh	r1, [r3, #0]
 800195c:	3302      	adds	r3, #2
 800195e:	0c12      	lsrs	r2, r2, #16
 8001960:	701a      	strb	r2, [r3, #0]
	char date[3]={0,0,0};
 8001962:	4a96      	ldr	r2, [pc, #600]	; (8001bbc <Log_Time+0x29c>)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4611      	mov	r1, r2
 800196c:	8019      	strh	r1, [r3, #0]
 800196e:	3302      	adds	r3, #2
 8001970:	0c12      	lsrs	r2, r2, #16
 8001972:	701a      	strb	r2, [r3, #0]
	char month[3]={0,0,0};
 8001974:	4a91      	ldr	r2, [pc, #580]	; (8001bbc <Log_Time+0x29c>)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4611      	mov	r1, r2
 800197e:	8019      	strh	r1, [r3, #0]
 8001980:	3302      	adds	r3, #2
 8001982:	0c12      	lsrs	r2, r2, #16
 8001984:	701a      	strb	r2, [r3, #0]
	char year[3]={0,0,0};
 8001986:	4a8d      	ldr	r2, [pc, #564]	; (8001bbc <Log_Time+0x29c>)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	4611      	mov	r1, r2
 800198e:	8019      	strh	r1, [r3, #0]
 8001990:	3302      	adds	r3, #2
 8001992:	0c12      	lsrs	r2, r2, #16
 8001994:	701a      	strb	r2, [r3, #0]

	  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BIN);
 8001996:	2200      	movs	r2, #0
 8001998:	4989      	ldr	r1, [pc, #548]	; (8001bc0 <Log_Time+0x2a0>)
 800199a:	488a      	ldr	r0, [pc, #552]	; (8001bc4 <Log_Time+0x2a4>)
 800199c:	f003 faf8 	bl	8004f90 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BIN);
 80019a0:	2200      	movs	r2, #0
 80019a2:	4989      	ldr	r1, [pc, #548]	; (8001bc8 <Log_Time+0x2a8>)
 80019a4:	4887      	ldr	r0, [pc, #540]	; (8001bc4 <Log_Time+0x2a4>)
 80019a6:	f003 fbf8 	bl	800519a <HAL_RTC_GetDate>

	  if(second_prev != sTime.Seconds){
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <Log_Time+0x2a0>)
 80019ac:	789a      	ldrb	r2, [r3, #2]
 80019ae:	4b87      	ldr	r3, [pc, #540]	; (8001bcc <Log_Time+0x2ac>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	f000 80fd 	beq.w	8001bb2 <Log_Time+0x292>

		  itoa(sTime.Seconds,seconds,10);
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <Log_Time+0x2a0>)
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	4618      	mov	r0, r3
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	220a      	movs	r2, #10
 80019c4:	4619      	mov	r1, r3
 80019c6:	f006 f9db 	bl	8007d80 <itoa>
		  itoa(sTime.Minutes,minutes,10);
 80019ca:	4b7d      	ldr	r3, [pc, #500]	; (8001bc0 <Log_Time+0x2a0>)
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	220a      	movs	r2, #10
 80019d6:	4619      	mov	r1, r3
 80019d8:	f006 f9d2 	bl	8007d80 <itoa>
		  itoa(sTime.Hours,hours,10);
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <Log_Time+0x2a0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	220a      	movs	r2, #10
 80019e8:	4619      	mov	r1, r3
 80019ea:	f006 f9c9 	bl	8007d80 <itoa>
		  itoa(sDate.Date,date,10);
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <Log_Time+0x2a8>)
 80019f0:	789b      	ldrb	r3, [r3, #2]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	220a      	movs	r2, #10
 80019fa:	4619      	mov	r1, r3
 80019fc:	f006 f9c0 	bl	8007d80 <itoa>
		  itoa(sDate.Month,month,10);
 8001a00:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <Log_Time+0x2a8>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	220a      	movs	r2, #10
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f006 f9b7 	bl	8007d80 <itoa>
		  itoa(sDate.Year,year,10);
 8001a12:	4b6d      	ldr	r3, [pc, #436]	; (8001bc8 <Log_Time+0x2a8>)
 8001a14:	78db      	ldrb	r3, [r3, #3]
 8001a16:	4618      	mov	r0, r3
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f006 f9af 	bl	8007d80 <itoa>

		  if (seconds[1]=='\0'){
 8001a22:	7e7b      	ldrb	r3, [r7, #25]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <Log_Time+0x10c>
			  seconds[1]='0';
 8001a28:	2330      	movs	r3, #48	; 0x30
 8001a2a:	767b      	strb	r3, [r7, #25]
			 }
		  if(minutes[1]=='\0'){
 8001a2c:	7d7b      	ldrb	r3, [r7, #21]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <Log_Time+0x116>
			  minutes[1]='0';
 8001a32:	2330      	movs	r3, #48	; 0x30
 8001a34:	757b      	strb	r3, [r7, #21]
			 }
		  if(hours[1]=='\0'){
 8001a36:	7c7b      	ldrb	r3, [r7, #17]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <Log_Time+0x120>
			  hours[1]='0';
 8001a3c:	2330      	movs	r3, #48	; 0x30
 8001a3e:	747b      	strb	r3, [r7, #17]
			 }
		  if(date[1]=='\0'){
 8001a40:	7b7b      	ldrb	r3, [r7, #13]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <Log_Time+0x12a>
			  date[1]='0';
 8001a46:	2330      	movs	r3, #48	; 0x30
 8001a48:	737b      	strb	r3, [r7, #13]
			 }
		  if(month[1]=='\0'){
 8001a4a:	7a7b      	ldrb	r3, [r7, #9]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <Log_Time+0x134>
			  month[1]='0';
 8001a50:	2330      	movs	r3, #48	; 0x30
 8001a52:	727b      	strb	r3, [r7, #9]
			 }
		  if(year[1]=='\0'){
 8001a54:	797b      	ldrb	r3, [r7, #5]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <Log_Time+0x13e>
			  year[1]='0';
 8001a5a:	2330      	movs	r3, #48	; 0x30
 8001a5c:	717b      	strb	r3, [r7, #5]
			 }

	////////////// hours:minutes:seconds //////////////

		  if(sTime.Seconds < 10){
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <Log_Time+0x2a0>)
 8001a60:	789b      	ldrb	r3, [r3, #2]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d808      	bhi.n	8001a78 <Log_Time+0x158>
		  presence[298]=seconds[1];
 8001a66:	7e7a      	ldrb	r2, [r7, #25]
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <Log_Time+0x2b0>)
 8001a6a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
		  presence[299]=seconds[0];
 8001a6e:	7e3a      	ldrb	r2, [r7, #24]
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <Log_Time+0x2b0>)
 8001a72:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
 8001a76:	e007      	b.n	8001a88 <Log_Time+0x168>
		  }
		  else{
			  presence[298]=seconds[0];
 8001a78:	7e3a      	ldrb	r2, [r7, #24]
 8001a7a:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <Log_Time+0x2b0>)
 8001a7c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
			  presence[299]=seconds[1];
 8001a80:	7e7a      	ldrb	r2, [r7, #25]
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <Log_Time+0x2b0>)
 8001a84:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
		  }

		  if (sTime.Minutes < 10){
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <Log_Time+0x2a0>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d808      	bhi.n	8001aa2 <Log_Time+0x182>
		  presence[295]=minutes[1];
 8001a90:	7d7a      	ldrb	r2, [r7, #21]
 8001a92:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <Log_Time+0x2b0>)
 8001a94:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
		  presence[296]=minutes[0];
 8001a98:	7d3a      	ldrb	r2, [r7, #20]
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <Log_Time+0x2b0>)
 8001a9c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001aa0:	e007      	b.n	8001ab2 <Log_Time+0x192>
		  }
		  else{
			  presence[295]=minutes[0];
 8001aa2:	7d3a      	ldrb	r2, [r7, #20]
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <Log_Time+0x2b0>)
 8001aa6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
			  presence[296]=minutes[1];
 8001aaa:	7d7a      	ldrb	r2, [r7, #21]
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <Log_Time+0x2b0>)
 8001aae:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
		  }

		  if (sTime.Hours < 10){
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <Log_Time+0x2a0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b09      	cmp	r3, #9
 8001ab8:	d808      	bhi.n	8001acc <Log_Time+0x1ac>
		  presence[292]=hours[1];
 8001aba:	7c7a      	ldrb	r2, [r7, #17]
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <Log_Time+0x2b0>)
 8001abe:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		  presence[293]=hours[0];
 8001ac2:	7c3a      	ldrb	r2, [r7, #16]
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <Log_Time+0x2b0>)
 8001ac6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8001aca:	e007      	b.n	8001adc <Log_Time+0x1bc>
		  }
		  else{
			  presence[292]=hours[0];
 8001acc:	7c3a      	ldrb	r2, [r7, #16]
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <Log_Time+0x2b0>)
 8001ad0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
			  presence[293]=hours[1];
 8001ad4:	7c7a      	ldrb	r2, [r7, #17]
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <Log_Time+0x2b0>)
 8001ad8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		  }

	///////// year:month:day ////////////////////////

		  if(sDate.Date < 10){
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <Log_Time+0x2a8>)
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d808      	bhi.n	8001af6 <Log_Time+0x1d6>
		  presence[287]=date[1];
 8001ae4:	7b7a      	ldrb	r2, [r7, #13]
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <Log_Time+0x2b0>)
 8001ae8:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
		  presence[288]=date[0];
 8001aec:	7b3a      	ldrb	r2, [r7, #12]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <Log_Time+0x2b0>)
 8001af0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8001af4:	e007      	b.n	8001b06 <Log_Time+0x1e6>
		  }
		  else{
			  presence[287]=date[0];
 8001af6:	7b3a      	ldrb	r2, [r7, #12]
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <Log_Time+0x2b0>)
 8001afa:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
			  presence[288]=date[1];
 8001afe:	7b7a      	ldrb	r2, [r7, #13]
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <Log_Time+0x2b0>)
 8001b02:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		  }

		  if (sDate.Month < 10){
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <Log_Time+0x2a8>)
 8001b08:	785b      	ldrb	r3, [r3, #1]
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d808      	bhi.n	8001b20 <Log_Time+0x200>
		  presence[284]=month[1];
 8001b0e:	7a7a      	ldrb	r2, [r7, #9]
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <Log_Time+0x2b0>)
 8001b12:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
		  presence[285]=month[0];
 8001b16:	7a3a      	ldrb	r2, [r7, #8]
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <Log_Time+0x2b0>)
 8001b1a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8001b1e:	e007      	b.n	8001b30 <Log_Time+0x210>
		  }
		  else{
			  presence[284]=month[0];
 8001b20:	7a3a      	ldrb	r2, [r7, #8]
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <Log_Time+0x2b0>)
 8001b24:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
			  presence[285]=month[1];
 8001b28:	7a7a      	ldrb	r2, [r7, #9]
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <Log_Time+0x2b0>)
 8001b2c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
		  }

		  if (sDate.Year < 10){
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <Log_Time+0x2a8>)
 8001b32:	78db      	ldrb	r3, [r3, #3]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d808      	bhi.n	8001b4a <Log_Time+0x22a>
		  presence[281]=year[1];
 8001b38:	797a      	ldrb	r2, [r7, #5]
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <Log_Time+0x2b0>)
 8001b3c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
		  presence[282]=year[0];
 8001b40:	793a      	ldrb	r2, [r7, #4]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <Log_Time+0x2b0>)
 8001b44:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8001b48:	e014      	b.n	8001b74 <Log_Time+0x254>
		  }
		  else{
			  presence[281]=year[0];
 8001b4a:	793a      	ldrb	r2, [r7, #4]
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <Log_Time+0x2b0>)
 8001b4e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			  presence[282]=year[1];
 8001b52:	797a      	ldrb	r2, [r7, #5]
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <Log_Time+0x2b0>)
 8001b56:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
		  }

	////// shift of logs //////////////////////// 311
		  while(i>311){
 8001b5a:	e00b      	b.n	8001b74 <Log_Time+0x254>
			  presence[i]=presence[i-37];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3b25      	subs	r3, #37	; 0x25
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <Log_Time+0x2b0>)
 8001b62:	5cd1      	ldrb	r1, [r2, r3]
 8001b64:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <Log_Time+0x2b0>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	460a      	mov	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
			  i--;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
		  while(i>311){
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b7a:	daef      	bge.n	8001b5c <Log_Time+0x23c>
		  }
		  strcat((char*)presence[281],(char*)("YY:MM:DD , HH:MM:SS"));
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <Log_Time+0x2b0>)
 8001b7e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001b82:	461c      	mov	r4, r3
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7fe fb35 	bl	80001f4 <strlen>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4423      	add	r3, r4
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <Log_Time+0x2b4>)
 8001b90:	461d      	mov	r5, r3
 8001b92:	4614      	mov	r4, r2
 8001b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b96:	6028      	str	r0, [r5, #0]
 8001b98:	6069      	str	r1, [r5, #4]
 8001b9a:	60aa      	str	r2, [r5, #8]
 8001b9c:	60eb      	str	r3, [r5, #12]
 8001b9e:	6820      	ldr	r0, [r4, #0]
 8001ba0:	6128      	str	r0, [r5, #16]
		  presence[281]='Y';//(char)("YY:MM:DD , HH:MM:SS"); //{"YY:MM:DD , HH:MM:SS"} // (char)"Y"; //;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <Log_Time+0x2b0>)
 8001ba4:	2259      	movs	r2, #89	; 0x59
 8001ba6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

		  second_prev = sTime.Seconds;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <Log_Time+0x2a0>)
 8001bac:	789a      	ldrb	r2, [r3, #2]
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <Log_Time+0x2ac>)
 8001bb0:	701a      	strb	r2, [r3, #0]
	  //presence_page(UART_HandleTypeDef * uart ,*web_state);
	  //esp_send_data_and_close(&huart1, esp_recv_mux, presence);

	  //interrupt_flag=0;

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800ad58 	.word	0x0800ad58
 8001bc0:	20000a24 	.word	0x20000a24
 8001bc4:	20002cc8 	.word	0x20002cc8
 8001bc8:	20002cc0 	.word	0x20002cc0
 8001bcc:	20000208 	.word	0x20000208
 8001bd0:	20000d58 	.word	0x20000d58
 8001bd4:	0800ad44 	.word	0x0800ad44

08001bd8 <set_color>:

void set_color(uint8_t red, uint8_t green, uint8_t blue)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	460b      	mov	r3, r1
 8001be4:	71bb      	strb	r3, [r7, #6]
 8001be6:	4613      	mov	r3, r2
 8001be8:	717b      	strb	r3, [r7, #5]
	set_led_brightness(&htim1, TIM_CHANNEL_2, red);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <set_color+0x40>)
 8001bf2:	f7ff fcf9 	bl	80015e8 <set_led_brightness>
	set_led_brightness(&htim1, TIM_CHANNEL_3, green);
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <set_color+0x40>)
 8001bfe:	f7ff fcf3 	bl	80015e8 <set_led_brightness>
	set_led_brightness(&htim1, TIM_CHANNEL_1, blue);
 8001c02:	797b      	ldrb	r3, [r7, #5]
 8001c04:	461a      	mov	r2, r3
 8001c06:	2100      	movs	r1, #0
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <set_color+0x40>)
 8001c0a:	f7ff fced 	bl	80015e8 <set_led_brightness>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20003adc 	.word	0x20003adc

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <Error_Handler+0x8>
	...

08001c28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <MX_RTC_Init+0xb0>)
 8001c44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c4e:	227f      	movs	r2, #127	; 0x7f
 8001c50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c6a:	481a      	ldr	r0, [pc, #104]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c6c:	f003 f842 	bl	8004cf4 <HAL_RTC_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c76:	f7ff ffd1 	bl	8001c1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2201      	movs	r2, #1
 8001c92:	4619      	mov	r1, r3
 8001c94:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001c96:	f003 f8be 	bl	8004e16 <HAL_RTC_SetTime>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ca0:	f7ff ffbc 	bl	8001c1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <MX_RTC_Init+0xac>)
 8001cbc:	f003 f9c6 	bl	800504c <HAL_RTC_SetDate>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001cc6:	f7ff ffa9 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20002cc8 	.word	0x20002cc8
 8001cd8:	40002800 	.word	0x40002800

08001cdc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_RTC_MspInit+0x50>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d111      	bne.n	8001d24 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d00:	2302      	movs	r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 ff00 	bl	8004b14 <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d1a:	f7ff ff7f 	bl	8001c1c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <HAL_RTC_MspInit+0x54>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40002800 	.word	0x40002800
 8001d30:	42470e3c 	.word	0x42470e3c

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler+0x4>

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f001 fe76 	bl	8003ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM2_IRQHandler+0x10>)
 8001dde:	f003 fbcc 	bl	800557a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20003b24 	.word	0x20003b24

08001dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <USART1_IRQHandler+0x10>)
 8001df2:	f004 fc83 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20003b6c 	.word	0x20003b6c

08001e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e08:	f002 f9f8 	bl	80041fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_kill>:

int _kill(int pid, int sig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e2a:	f005 ff67 	bl	8007cfc <__errno>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2216      	movs	r2, #22
 8001e32:	601a      	str	r2, [r3, #0]
	return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_exit>:

void _exit (int status)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffe7 	bl	8001e20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e52:	e7fe      	b.n	8001e52 <_exit+0x12>

08001e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e66:	f3af 8000 	nop.w
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf0      	blt.n	8001e66 <_read+0x12>
	}

return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e009      	b.n	8001eb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf1      	blt.n	8001ea0 <_write+0x12>
	}
	return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_close>:

int _close(int file)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <_isatty>:

int _isatty(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <_sbrk+0x5c>)
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <_sbrk+0x60>)
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_sbrk+0x64>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <_sbrk+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d207      	bcs.n	8001f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f60:	f005 fecc 	bl	8007cfc <__errno>
 8001f64:	4603      	mov	r3, r0
 8001f66:	220c      	movs	r2, #12
 8001f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e009      	b.n	8001f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <_sbrk+0x64>)
 8001f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20020000 	.word	0x20020000
 8001f90:	00000400 	.word	0x00000400
 8001f94:	2000020c 	.word	0x2000020c
 8001f98:	20003bc8 	.word	0x20003bc8

08001f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <SystemInit+0x20>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <SystemInit+0x20>)
 8001fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b092      	sub	sp, #72	; 0x48
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 fed8 	bl	8007da0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <MX_TIM1_Init+0x130>)
 8001ff2:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <MX_TIM1_Init+0x134>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <MX_TIM1_Init+0x130>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <MX_TIM1_Init+0x130>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <MX_TIM1_Init+0x130>)
 8002004:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002008:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <MX_TIM1_Init+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002010:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <MX_TIM1_Init+0x130>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <MX_TIM1_Init+0x130>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800201c:	4834      	ldr	r0, [pc, #208]	; (80020f0 <MX_TIM1_Init+0x130>)
 800201e:	f003 fa5d 	bl	80054dc <HAL_TIM_PWM_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002028:	f7ff fdf8 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002038:	4619      	mov	r1, r3
 800203a:	482d      	ldr	r0, [pc, #180]	; (80020f0 <MX_TIM1_Init+0x130>)
 800203c:	f004 f8b4 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002046:	f7ff fde9 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204a:	2360      	movs	r3, #96	; 0x60
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002056:	2308      	movs	r3, #8
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <MX_TIM1_Init+0x130>)
 8002070:	f003 fb8c 	bl	800578c <HAL_TIM_PWM_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800207a:	f7ff fdcf 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	2204      	movs	r2, #4
 8002084:	4619      	mov	r1, r3
 8002086:	481a      	ldr	r0, [pc, #104]	; (80020f0 <MX_TIM1_Init+0x130>)
 8002088:	f003 fb80 	bl	800578c <HAL_TIM_PWM_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002092:	f7ff fdc3 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	2208      	movs	r2, #8
 800209c:	4619      	mov	r1, r3
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <MX_TIM1_Init+0x130>)
 80020a0:	f003 fb74 	bl	800578c <HAL_TIM_PWM_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80020aa:	f7ff fdb7 	bl	8001c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <MX_TIM1_Init+0x130>)
 80020d2:	f004 f8d7 	bl	8006284 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80020dc:	f7ff fd9e 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <MX_TIM1_Init+0x130>)
 80020e2:	f000 f89d 	bl	8002220 <HAL_TIM_MspPostInit>

}
 80020e6:	bf00      	nop
 80020e8:	3748      	adds	r7, #72	; 0x48
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20003adc 	.word	0x20003adc
 80020f4:	40010000 	.word	0x40010000

080020f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	463b      	mov	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_TIM2_Init+0x94>)
 8002116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_TIM2_Init+0x94>)
 800211e:	224f      	movs	r2, #79	; 0x4f
 8002120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_TIM2_Init+0x94>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_TIM2_Init+0x94>)
 800212a:	f04f 32ff 	mov.w	r2, #4294967295
 800212e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_TIM2_Init+0x94>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_TIM2_Init+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800213c:	4813      	ldr	r0, [pc, #76]	; (800218c <MX_TIM2_Init+0x94>)
 800213e:	f003 f923 	bl	8005388 <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002148:	f7ff fd68 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_TIM2_Init+0x94>)
 800215a:	f003 fbd9 	bl	8005910 <HAL_TIM_ConfigClockSource>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002164:	f7ff fd5a 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM2_Init+0x94>)
 8002176:	f004 f817 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002180:	f7ff fd4c 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20003b24 	.word	0x20003b24

08002190 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_TIM_PWM_MspInit+0x3c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_TIM_PWM_MspInit+0x40>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_TIM_PWM_MspInit+0x40>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_TIM_PWM_MspInit+0x40>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d115      	bne.n	8002212 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_Base_MspInit+0x48>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_TIM_Base_MspInit+0x48>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_TIM_Base_MspInit+0x48>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	201c      	movs	r0, #28
 8002208:	f001 fd79 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800220c:	201c      	movs	r0, #28
 800220e:	f001 fd92 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_TIM_MspPostInit+0x68>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11e      	bne.n	8002280 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_TIM_MspPostInit+0x6c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_TIM_MspPostInit+0x6c>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_TIM_MspPostInit+0x6c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 800225e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002262:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002270:	2301      	movs	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_TIM_MspPostInit+0x70>)
 800227c:	f001 fe08 	bl	8003e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010000 	.word	0x40010000
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400

08002294 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_USART1_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x4c>)
 80022cc:	f004 f865 	bl	800639a <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f7ff fca1 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20003b6c 	.word	0x20003b6c
 80022e4:	40011000 	.word	0x40011000

080022e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_UART_MspInit+0x94>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d134      	bne.n	8002374 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_UART_MspInit+0x98>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_UART_MspInit+0x98>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_UART_MspInit+0x98>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_UART_MspInit+0x98>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_UART_MspInit+0x98>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_UART_MspInit+0x98>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002354:	2307      	movs	r3, #7
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_UART_MspInit+0x9c>)
 8002360:	f001 fd96 	bl	8003e90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2025      	movs	r0, #37	; 0x25
 800236a:	f001 fcc8 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800236e:	2025      	movs	r0, #37	; 0x25
 8002370:	f001 fce1 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40011000 	.word	0x40011000
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <select_web>:
#include <gpio.h>
#include <tim.h>



void select_web(UART_HandleTypeDef *huart, int *web_state) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	/* Parse first 6 chars of HTTP request */
	char request_begining[7];

	for (uint8_t i = 0; i < 6; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e00c      	b.n	80023b2 <select_web+0x2a>
		 request_begining[i] = esp_recv_buffer[i];
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4938      	ldr	r1, [pc, #224]	; (8002480 <select_web+0xf8>)
 800239e:	5c8a      	ldrb	r2, [r1, r2]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f107 0110 	add.w	r1, r7, #16
 80023a6:	440b      	add	r3, r1
 80023a8:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 6; i++)
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3301      	adds	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d9ef      	bls.n	8002398 <select_web+0x10>

	request_begining[6] = '\0';
 80023b8:	2300      	movs	r3, #0
 80023ba:	73bb      	strb	r3, [r7, #14]

	if (strcmp(request_begining, "GET /?") == 0)
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	4930      	ldr	r1, [pc, #192]	; (8002484 <select_web+0xfc>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fd ff0c 	bl	80001e0 <strcmp>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d12f      	bne.n	800242e <select_web+0xa6>
	{
		set_color(0, 0, 80);
 80023ce:	2250      	movs	r2, #80	; 0x50
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fc00 	bl	8001bd8 <set_color>
		switch (*web_state)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d846      	bhi.n	800246e <select_web+0xe6>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <select_web+0x60>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023fd 	.word	0x080023fd
 80023ec:	08002407 	.word	0x08002407
 80023f0:	08002411 	.word	0x08002411
 80023f4:	0800241b 	.word	0x0800241b
 80023f8:	08002425 	.word	0x08002425
		{
		case NOT_LOGGED:
			login(&huart1, web_state);
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	4822      	ldr	r0, [pc, #136]	; (8002488 <select_web+0x100>)
 8002400:	f000 f84c 	bl	800249c <login>
			break;
 8002404:	e034      	b.n	8002470 <select_web+0xe8>
		case LOGGED:
			handle_request_strona(&huart1, web_state);
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	481f      	ldr	r0, [pc, #124]	; (8002488 <select_web+0x100>)
 800240a:	f000 f8c3 	bl	8002594 <handle_request_strona>
			break;
 800240e:	e02f      	b.n	8002470 <select_web+0xe8>
		case LIGHTS:
			lights_page(&huart1, web_state);
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	481d      	ldr	r0, [pc, #116]	; (8002488 <select_web+0x100>)
 8002414:	f000 f9c0 	bl	8002798 <lights_page>
			break;
 8002418:	e02a      	b.n	8002470 <select_web+0xe8>
		case HEIZUNG:
			heizung_seite(&huart1, web_state);
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	481a      	ldr	r0, [pc, #104]	; (8002488 <select_web+0x100>)
 800241e:	f000 fa05 	bl	800282c <heizung_seite>
			break;
 8002422:	e025      	b.n	8002470 <select_web+0xe8>
		case PRESENCE:
			presence_page(&huart1, web_state);
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	4818      	ldr	r0, [pc, #96]	; (8002488 <select_web+0x100>)
 8002428:	f000 fa4a 	bl	80028c0 <presence_page>
			break;
 800242c:	e020      	b.n	8002470 <select_web+0xe8>
			break;
		}

    /* Sprawdzenie loginu */
	}
	else if (strcmp(request_begining, "GET / ") == 0)
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4916      	ldr	r1, [pc, #88]	; (800248c <select_web+0x104>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd fed3 	bl	80001e0 <strcmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <select_web+0xd4>
	{
		set_color(200, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	20c8      	movs	r0, #200	; 0xc8
 8002446:	f7ff fbc7 	bl	8001bd8 <set_color>
		esp_send_data_and_close(huart, esp_recv_mux, frontpage);
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <select_web+0x108>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4a10      	ldr	r2, [pc, #64]	; (8002494 <select_web+0x10c>)
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fe feff 	bl	8001258 <esp_send_data_and_close>
 800245a:	e009      	b.n	8002470 <select_web+0xe8>
	}
	else esp_send_data_and_close(huart, esp_recv_mux, error);
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <select_web+0x108>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <select_web+0x110>)
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fef6 	bl	8001258 <esp_send_data_and_close>
 800246c:	e000      	b.n	8002470 <select_web+0xe8>
			break;
 800246e:	bf00      	nop

	esp_restart_int_recv(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe ff47 	bl	8001304 <esp_restart_int_recv>

}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000614 	.word	0x20000614
 8002484:	0800ad5c 	.word	0x0800ad5c
 8002488:	20003b6c 	.word	0x20003b6c
 800248c:	0800ad64 	.word	0x0800ad64
 8002490:	2000060c 	.word	0x2000060c
 8002494:	200038e8 	.word	0x200038e8
 8002498:	200034d4 	.word	0x200034d4

0800249c <login>:

void login(UART_HandleTypeDef * uart, int *web_state)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	int l=0; //litera logowania
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]


	for(int i=12 ; i<=17 ; i++)
 80024aa:	230c      	movs	r3, #12
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e00f      	b.n	80024d0 <login+0x34>
	{
		check_login[l]=esp_recv_buffer[i];
 80024b0:	4a31      	ldr	r2, [pc, #196]	; (8002578 <login+0xdc>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	4a30      	ldr	r2, [pc, #192]	; (800257c <login+0xe0>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4413      	add	r3, r2
 80024c0:	460a      	mov	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
		l++;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
	for(int i=12 ; i<=17 ; i++)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3301      	adds	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b11      	cmp	r3, #17
 80024d4:	ddec      	ble.n	80024b0 <login+0x14>
	}
	l=0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]

	//////Sprawdzenie hasła
	for(int i=25 ; i<=30 ; i++)
 80024da:	2319      	movs	r3, #25
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e00f      	b.n	8002500 <login+0x64>
	{
		check_password[l]=esp_recv_buffer[i];
 80024e0:	4a25      	ldr	r2, [pc, #148]	; (8002578 <login+0xdc>)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <login+0xe4>)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4413      	add	r3, r2
 80024f0:	460a      	mov	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
		l++;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
	for(int i=25 ; i<=30 ; i++)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b1e      	cmp	r3, #30
 8002504:	ddec      	ble.n	80024e0 <login+0x44>
	}
	l=0;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

///////////////////////Sprawdzenie poprawności logowania
    if((strcmp(check_login,"kwas97")==0)  &&  (strcmp(check_password,"kwas97")==0))
 800250a:	491e      	ldr	r1, [pc, #120]	; (8002584 <login+0xe8>)
 800250c:	481b      	ldr	r0, [pc, #108]	; (800257c <login+0xe0>)
 800250e:	f7fd fe67 	bl	80001e0 <strcmp>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d117      	bne.n	8002548 <login+0xac>
 8002518:	491a      	ldr	r1, [pc, #104]	; (8002584 <login+0xe8>)
 800251a:	4819      	ldr	r0, [pc, #100]	; (8002580 <login+0xe4>)
 800251c:	f7fd fe60 	bl	80001e0 <strcmp>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d110      	bne.n	8002548 <login+0xac>
	{
		set_color(250,250,250);
 8002526:	22fa      	movs	r2, #250	; 0xfa
 8002528:	21fa      	movs	r1, #250	; 0xfa
 800252a:	20fa      	movs	r0, #250	; 0xfa
 800252c:	f7ff fb54 	bl	8001bd8 <set_color>
		*web_state=LOGGED;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <login+0xec>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <login+0xf0>)
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fe fe89 	bl	8001258 <esp_send_data_and_close>
	{
 8002546:	e00f      	b.n	8002568 <login+0xcc>

	}
    else //((strcmp(check_login,"kwas97")!=0)||(strcmp(check_password,"kwas97")!=0))
	{
		set_color(30,30,30);
 8002548:	221e      	movs	r2, #30
 800254a:	211e      	movs	r1, #30
 800254c:	201e      	movs	r0, #30
 800254e:	f7ff fb43 	bl	8001bd8 <set_color>
		*web_state=NOT_LOGGED;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, frontpage);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <login+0xec>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <login+0xf4>)
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fe78 	bl	8001258 <esp_send_data_and_close>
		//select_web(uart,web_state);
	}

    	esp_restart_int_recv(uart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe fecb 	bl	8001304 <esp_restart_int_recv>
    		//return web_state;
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000614 	.word	0x20000614
 800257c:	200036c8 	.word	0x200036c8
 8002580:	20002ca0 	.word	0x20002ca0
 8002584:	0800ad6c 	.word	0x0800ad6c
 8002588:	2000060c 	.word	0x2000060c
 800258c:	200036e8 	.word	0x200036e8
 8002590:	200038e8 	.word	0x200038e8

08002594 <handle_request_strona>:



// Funkcja wywoływana w momencie otrzymania danych przez połączenie TCP
void handle_request_strona(UART_HandleTypeDef * uart, int *web_state)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	// Odczytujemy pierwsze 6 znaków odebranego żądania HTTP

	// Odczytujemy pierwsze 3 liczby, jakie pojawią się w adresie
	// - są to wartości poszczególnych kolorów składowych (RGB)
	int nums[3] = { 0, 0, 0 };
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
	int num_counter = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
	int l=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
	uint8_t last_char_was_digit = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	77fb      	strb	r3, [r7, #31]
	for (int i = 6; i < 41; i++)
 80025b6:	2306      	movs	r3, #6
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e047      	b.n	800264c <handle_request_strona+0xb8>
	if (esp_recv_buffer[i] >= '0' && esp_recv_buffer[i] <= '9') {
 80025bc:	4a69      	ldr	r2, [pc, #420]	; (8002764 <handle_request_strona+0x1d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b2f      	cmp	r3, #47	; 0x2f
 80025c8:	d932      	bls.n	8002630 <handle_request_strona+0x9c>
 80025ca:	4a66      	ldr	r2, [pc, #408]	; (8002764 <handle_request_strona+0x1d0>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b39      	cmp	r3, #57	; 0x39
 80025d6:	d82b      	bhi.n	8002630 <handle_request_strona+0x9c>
	last_char_was_digit = 1;
 80025d8:	2301      	movs	r3, #1
 80025da:	77fb      	strb	r3, [r7, #31]
	nums[num_counter] *= 10;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025e4:	4413      	add	r3, r2
 80025e6:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	461a      	mov	r2, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025fc:	440b      	add	r3, r1
 80025fe:	f843 2c20 	str.w	r2, [r3, #-32]
	nums[num_counter] += esp_recv_buffer[i] - '0';
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <handle_request_strona+0x1d0>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002618:	440b      	add	r3, r1
 800261a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800261e:	441a      	add	r2, r3
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002628:	440b      	add	r3, r1
 800262a:	f843 2c20 	str.w	r2, [r3, #-32]
 800262e:	e00a      	b.n	8002646 <handle_request_strona+0xb2>
	} else if (last_char_was_digit == 1) {
 8002630:	7ffb      	ldrb	r3, [r7, #31]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <handle_request_strona+0xb2>
	last_char_was_digit = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	77fb      	strb	r3, [r7, #31]
	num_counter++;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	3301      	adds	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
	if (num_counter == 4)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	2b04      	cmp	r3, #4
 8002644:	d006      	beq.n	8002654 <handle_request_strona+0xc0>
	for (int i = 6; i < 41; i++)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3301      	adds	r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b28      	cmp	r3, #40	; 0x28
 8002650:	ddb4      	ble.n	80025bc <handle_request_strona+0x28>
 8002652:	e000      	b.n	8002656 <handle_request_strona+0xc2>
	break;
 8002654:	bf00      	nop
	}

	for (int i=6 ; i<=7; i++)
 8002656:	2306      	movs	r3, #6
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00f      	b.n	800267c <handle_request_strona+0xe8>
	{
		button_check[l]=esp_recv_buffer[i];
 800265c:	4a41      	ldr	r2, [pc, #260]	; (8002764 <handle_request_strona+0x1d0>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2d9      	uxtb	r1, r3
 8002666:	4a40      	ldr	r2, [pc, #256]	; (8002768 <handle_request_strona+0x1d4>)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	4413      	add	r3, r2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
		l++;
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	3301      	adds	r3, #1
 8002674:	623b      	str	r3, [r7, #32]
	for (int i=6 ; i<=7; i++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b07      	cmp	r3, #7
 8002680:	ddec      	ble.n	800265c <handle_request_strona+0xc8>
	}
	l=0;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]

	if(strcmp(button_check,"wl")==0){
 8002686:	4939      	ldr	r1, [pc, #228]	; (800276c <handle_request_strona+0x1d8>)
 8002688:	4837      	ldr	r0, [pc, #220]	; (8002768 <handle_request_strona+0x1d4>)
 800268a:	f7fd fda9 	bl	80001e0 <strcmp>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <handle_request_strona+0x118>
		*web_state=NOT_LOGGED;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, frontpage);
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <handle_request_strona+0x1dc>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4a34      	ldr	r2, [pc, #208]	; (8002774 <handle_request_strona+0x1e0>)
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fe fdd7 	bl	8001258 <esp_send_data_and_close>
 80026aa:	e053      	b.n	8002754 <handle_request_strona+0x1c0>
	}
	else if(strcmp(button_check,"os")==0){
 80026ac:	4932      	ldr	r1, [pc, #200]	; (8002778 <handle_request_strona+0x1e4>)
 80026ae:	482e      	ldr	r0, [pc, #184]	; (8002768 <handle_request_strona+0x1d4>)
 80026b0:	f7fd fd96 	bl	80001e0 <strcmp>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10b      	bne.n	80026d2 <handle_request_strona+0x13e>
		*web_state=LIGHTS;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, lights);
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <handle_request_strona+0x1dc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <handle_request_strona+0x1e8>)
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fdc4 	bl	8001258 <esp_send_data_and_close>
 80026d0:	e040      	b.n	8002754 <handle_request_strona+0x1c0>
	}
	else if(strcmp(button_check,"og")==0){
 80026d2:	492b      	ldr	r1, [pc, #172]	; (8002780 <handle_request_strona+0x1ec>)
 80026d4:	4824      	ldr	r0, [pc, #144]	; (8002768 <handle_request_strona+0x1d4>)
 80026d6:	f7fd fd83 	bl	80001e0 <strcmp>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <handle_request_strona+0x164>
		*web_state=HEIZUNG;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2203      	movs	r2, #3
 80026e4:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, heizung );
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <handle_request_strona+0x1dc>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4a25      	ldr	r2, [pc, #148]	; (8002784 <handle_request_strona+0x1f0>)
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fdb1 	bl	8001258 <esp_send_data_and_close>
 80026f6:	e02d      	b.n	8002754 <handle_request_strona+0x1c0>
	}

	else if(strcmp(button_check,"ob")==0){
 80026f8:	4923      	ldr	r1, [pc, #140]	; (8002788 <handle_request_strona+0x1f4>)
 80026fa:	481b      	ldr	r0, [pc, #108]	; (8002768 <handle_request_strona+0x1d4>)
 80026fc:	f7fd fd70 	bl	80001e0 <strcmp>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <handle_request_strona+0x18a>
		*web_state=PRESENCE;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2204      	movs	r2, #4
 800270a:	601a      	str	r2, [r3, #0]
		//select_web(uart,web_state);
		esp_send_data_and_close(uart, esp_recv_mux, presence);
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <handle_request_strona+0x1dc>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <handle_request_strona+0x1f8>)
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fd9e 	bl	8001258 <esp_send_data_and_close>
 800271c:	e01a      	b.n	8002754 <handle_request_strona+0x1c0>
	}



	else if(strcmp(button_check,"pw")==0){
 800271e:	491c      	ldr	r1, [pc, #112]	; (8002790 <handle_request_strona+0x1fc>)
 8002720:	4811      	ldr	r0, [pc, #68]	; (8002768 <handle_request_strona+0x1d4>)
 8002722:	f7fd fd5d 	bl	80001e0 <strcmp>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <handle_request_strona+0x1b0>
		*web_state=LOGGED;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <handle_request_strona+0x1dc>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <handle_request_strona+0x200>)
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe fd8b 	bl	8001258 <esp_send_data_and_close>
 8002742:	e007      	b.n	8002754 <handle_request_strona+0x1c0>
	}

	else esp_send_data_and_close(uart, esp_recv_mux, webpage);
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <handle_request_strona+0x1dc>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <handle_request_strona+0x200>)
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fd82 	bl	8001258 <esp_send_data_and_close>
	//set_color(nums[0], nums[1], nums[2]);
	// Zwracamy stronę WWW z formularzem wyboru kolorów
	//esp_send_data_and_close(uart, esp_recv_mux, webpage);
	// Jeśli żądanie dotyczy strony głównej - "GET / HTTP/1.1"

	esp_restart_int_recv(uart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fdd5 	bl	8001304 <esp_restart_int_recv>
}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000614 	.word	0x20000614
 8002768:	20002cc4 	.word	0x20002cc4
 800276c:	0800ad74 	.word	0x0800ad74
 8002770:	2000060c 	.word	0x2000060c
 8002774:	200038e8 	.word	0x200038e8
 8002778:	0800ad78 	.word	0x0800ad78
 800277c:	20002ce8 	.word	0x20002ce8
 8002780:	0800ad7c 	.word	0x0800ad7c
 8002784:	20000a38 	.word	0x20000a38
 8002788:	0800ad80 	.word	0x0800ad80
 800278c:	20000d58 	.word	0x20000d58
 8002790:	0800ad84 	.word	0x0800ad84
 8002794:	200036e8 	.word	0x200036e8

08002798 <lights_page>:

void lights_page(UART_HandleTypeDef * uart, int *web_state)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]

	int l=0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

	for (int i=6 ; i<=7; i++)
 80027a6:	2306      	movs	r3, #6
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	e00f      	b.n	80027cc <lights_page+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <lights_page+0x7c>)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2d9      	uxtb	r1, r3
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <lights_page+0x80>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	460a      	mov	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
		l++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
	for (int i=6 ; i<=7; i++)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b07      	cmp	r3, #7
 80027d0:	ddec      	ble.n	80027ac <lights_page+0x14>
	}
	l=0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]

	if(strcmp(button_check,"pw")==0)
 80027d6:	4911      	ldr	r1, [pc, #68]	; (800281c <lights_page+0x84>)
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <lights_page+0x80>)
 80027da:	f7fd fd01 	bl	80001e0 <strcmp>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <lights_page+0x64>
	{
		*web_state=LOGGED;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <lights_page+0x88>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <lights_page+0x8c>)
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe fd2f 	bl	8001258 <esp_send_data_and_close>
	{
	esp_send_data_and_close(uart, esp_recv_mux, lights);
	//esp_restart_int_recv(uart);
	}

}
 80027fa:	e007      	b.n	800280c <lights_page+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, lights);
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <lights_page+0x88>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <lights_page+0x90>)
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fd26 	bl	8001258 <esp_send_data_and_close>
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000614 	.word	0x20000614
 8002818:	20002cc4 	.word	0x20002cc4
 800281c:	0800ad84 	.word	0x0800ad84
 8002820:	2000060c 	.word	0x2000060c
 8002824:	200036e8 	.word	0x200036e8
 8002828:	20002ce8 	.word	0x20002ce8

0800282c <heizung_seite>:



void heizung_seite(UART_HandleTypeDef * uart ,int *web_state) //uint8_t
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

	int l=0;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]

	for (int i=21 ; i<=22; i++)
 800283a:	2315      	movs	r3, #21
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	e00f      	b.n	8002860 <heizung_seite+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <heizung_seite+0x7c>)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2d9      	uxtb	r1, r3
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <heizung_seite+0x80>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	460a      	mov	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
		l++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
	for (int i=21 ; i<=22; i++)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3301      	adds	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b16      	cmp	r3, #22
 8002864:	ddec      	ble.n	8002840 <heizung_seite+0x14>
	}
	l=0;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]


	if(strcmp(button_check,"pw")==0) // zmień na pw
 800286a:	4911      	ldr	r1, [pc, #68]	; (80028b0 <heizung_seite+0x84>)
 800286c:	480f      	ldr	r0, [pc, #60]	; (80028ac <heizung_seite+0x80>)
 800286e:	f7fd fcb7 	bl	80001e0 <strcmp>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <heizung_seite+0x64>
	{
		*web_state=LOGGED;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <heizung_seite+0x88>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <heizung_seite+0x8c>)
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7fe fce5 	bl	8001258 <esp_send_data_and_close>
	else
	{
	esp_send_data_and_close(uart, esp_recv_mux, heizung);
	}

}
 800288e:	e007      	b.n	80028a0 <heizung_seite+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, heizung);
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <heizung_seite+0x88>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <heizung_seite+0x90>)
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fcdc 	bl	8001258 <esp_send_data_and_close>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000614 	.word	0x20000614
 80028ac:	20002cc4 	.word	0x20002cc4
 80028b0:	0800ad84 	.word	0x0800ad84
 80028b4:	2000060c 	.word	0x2000060c
 80028b8:	200036e8 	.word	0x200036e8
 80028bc:	20000a38 	.word	0x20000a38

080028c0 <presence_page>:

void presence_page(UART_HandleTypeDef * uart ,int *web_state) //uint8_t
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

	int l=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]

	for (int i=6 ; i<=7; i++)
 80028ce:	2306      	movs	r3, #6
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	e00f      	b.n	80028f4 <presence_page+0x34>
	{
		button_check[l]=esp_recv_buffer[i];
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <presence_page+0x7c>)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2d9      	uxtb	r1, r3
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <presence_page+0x80>)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	460a      	mov	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
		l++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
	for (int i=6 ; i<=7; i++)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b07      	cmp	r3, #7
 80028f8:	ddec      	ble.n	80028d4 <presence_page+0x14>
	}
	l=0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]


	if(strcmp(button_check,"pw")==0) // zmień na pw
 80028fe:	4911      	ldr	r1, [pc, #68]	; (8002944 <presence_page+0x84>)
 8002900:	480f      	ldr	r0, [pc, #60]	; (8002940 <presence_page+0x80>)
 8002902:	f7fd fc6d 	bl	80001e0 <strcmp>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <presence_page+0x64>
	{
		*web_state=LOGGED;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
		esp_send_data_and_close(uart, esp_recv_mux, webpage);
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <presence_page+0x88>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <presence_page+0x8c>)
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fc9b 	bl	8001258 <esp_send_data_and_close>
	else
	{
	esp_send_data_and_close(uart, esp_recv_mux, presence);
	}

}
 8002922:	e007      	b.n	8002934 <presence_page+0x74>
	esp_send_data_and_close(uart, esp_recv_mux, presence);
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <presence_page+0x88>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <presence_page+0x90>)
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fc92 	bl	8001258 <esp_send_data_and_close>
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000614 	.word	0x20000614
 8002940:	20002cc4 	.word	0x20002cc4
 8002944:	0800ad84 	.word	0x0800ad84
 8002948:	2000060c 	.word	0x2000060c
 800294c:	200036e8 	.word	0x200036e8
 8002950:	20000d58 	.word	0x20000d58

08002954 <web_def>:



void web_def (void)
{
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	af00      	add	r7, sp, #0
//////////////OBECNOŚĆ/////////////////////////////////////////////
	  strcpy(presence, "HTTP/1.1 200 OK\r\n");
 8002958:	4ad2      	ldr	r2, [pc, #840]	; (8002ca4 <web_def+0x350>)
 800295a:	4bd3      	ldr	r3, [pc, #844]	; (8002ca8 <web_def+0x354>)
 800295c:	4615      	mov	r5, r2
 800295e:	461c      	mov	r4, r3
 8002960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002962:	6028      	str	r0, [r5, #0]
 8002964:	6069      	str	r1, [r5, #4]
 8002966:	60aa      	str	r2, [r5, #8]
 8002968:	60eb      	str	r3, [r5, #12]
 800296a:	8823      	ldrh	r3, [r4, #0]
 800296c:	822b      	strh	r3, [r5, #16]
	  strcat(presence, "Content-Type: text/html\r\n");
 800296e:	48cd      	ldr	r0, [pc, #820]	; (8002ca4 <web_def+0x350>)
 8002970:	f7fd fc40 	bl	80001f4 <strlen>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	4bca      	ldr	r3, [pc, #808]	; (8002ca4 <web_def+0x350>)
 800297a:	4413      	add	r3, r2
 800297c:	4acb      	ldr	r2, [pc, #812]	; (8002cac <web_def+0x358>)
 800297e:	461d      	mov	r5, r3
 8002980:	4614      	mov	r4, r2
 8002982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002984:	6028      	str	r0, [r5, #0]
 8002986:	6069      	str	r1, [r5, #4]
 8002988:	60aa      	str	r2, [r5, #8]
 800298a:	60eb      	str	r3, [r5, #12]
 800298c:	cc03      	ldmia	r4!, {r0, r1}
 800298e:	6128      	str	r0, [r5, #16]
 8002990:	6169      	str	r1, [r5, #20]
 8002992:	8823      	ldrh	r3, [r4, #0]
 8002994:	832b      	strh	r3, [r5, #24]
	  strcat(presence, "Content-Lenght: 398\r\n");
 8002996:	48c3      	ldr	r0, [pc, #780]	; (8002ca4 <web_def+0x350>)
 8002998:	f7fd fc2c 	bl	80001f4 <strlen>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	4bc0      	ldr	r3, [pc, #768]	; (8002ca4 <web_def+0x350>)
 80029a2:	4413      	add	r3, r2
 80029a4:	4ac2      	ldr	r2, [pc, #776]	; (8002cb0 <web_def+0x35c>)
 80029a6:	461d      	mov	r5, r3
 80029a8:	4614      	mov	r4, r2
 80029aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ac:	6028      	str	r0, [r5, #0]
 80029ae:	6069      	str	r1, [r5, #4]
 80029b0:	60aa      	str	r2, [r5, #8]
 80029b2:	60eb      	str	r3, [r5, #12]
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	6128      	str	r0, [r5, #16]
 80029b8:	88a3      	ldrh	r3, [r4, #4]
 80029ba:	82ab      	strh	r3, [r5, #20]
	  strcat(presence, "Connection: close\r\n\r\n");
 80029bc:	48b9      	ldr	r0, [pc, #740]	; (8002ca4 <web_def+0x350>)
 80029be:	f7fd fc19 	bl	80001f4 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	4bb7      	ldr	r3, [pc, #732]	; (8002ca4 <web_def+0x350>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4aba      	ldr	r2, [pc, #744]	; (8002cb4 <web_def+0x360>)
 80029cc:	461d      	mov	r5, r3
 80029ce:	4614      	mov	r4, r2
 80029d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d2:	6028      	str	r0, [r5, #0]
 80029d4:	6069      	str	r1, [r5, #4]
 80029d6:	60aa      	str	r2, [r5, #8]
 80029d8:	60eb      	str	r3, [r5, #12]
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	6128      	str	r0, [r5, #16]
 80029de:	88a3      	ldrh	r3, [r4, #4]
 80029e0:	82ab      	strh	r3, [r5, #20]
	  strcat(presence, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 80029e2:	48b0      	ldr	r0, [pc, #704]	; (8002ca4 <web_def+0x350>)
 80029e4:	f7fd fc06 	bl	80001f4 <strlen>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4bad      	ldr	r3, [pc, #692]	; (8002ca4 <web_def+0x350>)
 80029ee:	4413      	add	r3, r2
 80029f0:	4ab1      	ldr	r2, [pc, #708]	; (8002cb8 <web_def+0x364>)
 80029f2:	4614      	mov	r4, r2
 80029f4:	469c      	mov	ip, r3
 80029f6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80029fa:	4665      	mov	r5, ip
 80029fc:	4626      	mov	r6, r4
 80029fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a00:	6028      	str	r0, [r5, #0]
 8002a02:	6069      	str	r1, [r5, #4]
 8002a04:	60aa      	str	r2, [r5, #8]
 8002a06:	60eb      	str	r3, [r5, #12]
 8002a08:	3410      	adds	r4, #16
 8002a0a:	f10c 0c10 	add.w	ip, ip, #16
 8002a0e:	4574      	cmp	r4, lr
 8002a10:	d1f3      	bne.n	80029fa <web_def+0xa6>
 8002a12:	4662      	mov	r2, ip
 8002a14:	4623      	mov	r3, r4
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	8013      	strh	r3, [r2, #0]
	  strcat(presence, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8002a1a:	48a2      	ldr	r0, [pc, #648]	; (8002ca4 <web_def+0x350>)
 8002a1c:	f7fd fbea 	bl	80001f4 <strlen>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b9f      	ldr	r3, [pc, #636]	; (8002ca4 <web_def+0x350>)
 8002a26:	4413      	add	r3, r2
 8002a28:	4aa4      	ldr	r2, [pc, #656]	; (8002cbc <web_def+0x368>)
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	469c      	mov	ip, r3
 8002a2e:	f104 0e20 	add.w	lr, r4, #32
 8002a32:	4665      	mov	r5, ip
 8002a34:	4626      	mov	r6, r4
 8002a36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a38:	6028      	str	r0, [r5, #0]
 8002a3a:	6069      	str	r1, [r5, #4]
 8002a3c:	60aa      	str	r2, [r5, #8]
 8002a3e:	60eb      	str	r3, [r5, #12]
 8002a40:	3410      	adds	r4, #16
 8002a42:	f10c 0c10 	add.w	ip, ip, #16
 8002a46:	4574      	cmp	r4, lr
 8002a48:	d1f3      	bne.n	8002a32 <web_def+0xde>
 8002a4a:	4663      	mov	r3, ip
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	6810      	ldr	r0, [r2, #0]
 8002a50:	6018      	str	r0, [r3, #0]
	  strcat(presence, "<body>\r\n<form method=\"get\">\r\n");
 8002a52:	4894      	ldr	r0, [pc, #592]	; (8002ca4 <web_def+0x350>)
 8002a54:	f7fd fbce 	bl	80001f4 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b91      	ldr	r3, [pc, #580]	; (8002ca4 <web_def+0x350>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a97      	ldr	r2, [pc, #604]	; (8002cc0 <web_def+0x36c>)
 8002a62:	461d      	mov	r5, r3
 8002a64:	4614      	mov	r4, r2
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	6028      	str	r0, [r5, #0]
 8002a6a:	6069      	str	r1, [r5, #4]
 8002a6c:	60aa      	str	r2, [r5, #8]
 8002a6e:	60eb      	str	r3, [r5, #12]
 8002a70:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002a72:	6128      	str	r0, [r5, #16]
 8002a74:	6169      	str	r1, [r5, #20]
 8002a76:	61aa      	str	r2, [r5, #24]
 8002a78:	8823      	ldrh	r3, [r4, #0]
 8002a7a:	83ab      	strh	r3, [r5, #28]
	  // stąd wyciągnąłem napis obecnosc
	  //strcat(presence, "<p><b>Temperatura wody w zasobniku:    °C</b> </p></p>\r\n"); //°C
	  //strcat(presence, "<p><b>Zadana temperatura (10-33):</b><input type=\"text\"name=\"tm\" value=\"22\" /></p>\r\n");
	  //strcat(presence, "<p><b>  <input type=\"range\" id=\"volume\" name=\"volume\"min=\"0\" max=\"9\"><label for=\"volume\">Volume</label>\r\n");
	  strcat(presence, "<p><b>Obecnosc w pomieszczeniu  </b> </p>\r\n"); //°C
 8002a7c:	4889      	ldr	r0, [pc, #548]	; (8002ca4 <web_def+0x350>)
 8002a7e:	f7fd fbb9 	bl	80001f4 <strlen>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b87      	ldr	r3, [pc, #540]	; (8002ca4 <web_def+0x350>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a8e      	ldr	r2, [pc, #568]	; (8002cc4 <web_def+0x370>)
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	469c      	mov	ip, r3
 8002a90:	f104 0e20 	add.w	lr, r4, #32
 8002a94:	4665      	mov	r5, ip
 8002a96:	4626      	mov	r6, r4
 8002a98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a9a:	6028      	str	r0, [r5, #0]
 8002a9c:	6069      	str	r1, [r5, #4]
 8002a9e:	60aa      	str	r2, [r5, #8]
 8002aa0:	60eb      	str	r3, [r5, #12]
 8002aa2:	3410      	adds	r4, #16
 8002aa4:	f10c 0c10 	add.w	ip, ip, #16
 8002aa8:	4574      	cmp	r4, lr
 8002aaa:	d1f3      	bne.n	8002a94 <web_def+0x140>
 8002aac:	4665      	mov	r5, ip
 8002aae:	4623      	mov	r3, r4
 8002ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ab2:	6028      	str	r0, [r5, #0]
 8002ab4:	6069      	str	r1, [r5, #4]
 8002ab6:	60aa      	str	r2, [r5, #8]
	  strcat(presence, "<p><b>Data:  Godzina:  </b> </p>\r\n");
 8002ab8:	487a      	ldr	r0, [pc, #488]	; (8002ca4 <web_def+0x350>)
 8002aba:	f7fd fb9b 	bl	80001f4 <strlen>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <web_def+0x350>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a80      	ldr	r2, [pc, #512]	; (8002cc8 <web_def+0x374>)
 8002ac8:	4614      	mov	r4, r2
 8002aca:	469c      	mov	ip, r3
 8002acc:	f104 0e20 	add.w	lr, r4, #32
 8002ad0:	4665      	mov	r5, ip
 8002ad2:	4626      	mov	r6, r4
 8002ad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ad6:	6028      	str	r0, [r5, #0]
 8002ad8:	6069      	str	r1, [r5, #4]
 8002ada:	60aa      	str	r2, [r5, #8]
 8002adc:	60eb      	str	r3, [r5, #12]
 8002ade:	3410      	adds	r4, #16
 8002ae0:	f10c 0c10 	add.w	ip, ip, #16
 8002ae4:	4574      	cmp	r4, lr
 8002ae6:	d1f3      	bne.n	8002ad0 <web_def+0x17c>
 8002ae8:	4663      	mov	r3, ip
 8002aea:	4622      	mov	r2, r4
 8002aec:	8811      	ldrh	r1, [r2, #0]
 8002aee:	7892      	ldrb	r2, [r2, #2]
 8002af0:	8019      	strh	r1, [r3, #0]
 8002af2:	709a      	strb	r2, [r3, #2]
	  strcat(presence, "<p><b> --:--:-- , --:--:50</b> </p>\r\n");
 8002af4:	486b      	ldr	r0, [pc, #428]	; (8002ca4 <web_def+0x350>)
 8002af6:	f7fd fb7d 	bl	80001f4 <strlen>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b69      	ldr	r3, [pc, #420]	; (8002ca4 <web_def+0x350>)
 8002b00:	4413      	add	r3, r2
 8002b02:	4a72      	ldr	r2, [pc, #456]	; (8002ccc <web_def+0x378>)
 8002b04:	4614      	mov	r4, r2
 8002b06:	469c      	mov	ip, r3
 8002b08:	f104 0e20 	add.w	lr, r4, #32
 8002b0c:	4665      	mov	r5, ip
 8002b0e:	4626      	mov	r6, r4
 8002b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b12:	6028      	str	r0, [r5, #0]
 8002b14:	6069      	str	r1, [r5, #4]
 8002b16:	60aa      	str	r2, [r5, #8]
 8002b18:	60eb      	str	r3, [r5, #12]
 8002b1a:	3410      	adds	r4, #16
 8002b1c:	f10c 0c10 	add.w	ip, ip, #16
 8002b20:	4574      	cmp	r4, lr
 8002b22:	d1f3      	bne.n	8002b0c <web_def+0x1b8>
 8002b24:	4663      	mov	r3, ip
 8002b26:	4622      	mov	r2, r4
 8002b28:	6810      	ldr	r0, [r2, #0]
 8002b2a:	6018      	str	r0, [r3, #0]
 8002b2c:	8892      	ldrh	r2, [r2, #4]
 8002b2e:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:40</b> </p>\r\n");
 8002b30:	485c      	ldr	r0, [pc, #368]	; (8002ca4 <web_def+0x350>)
 8002b32:	f7fd fb5f 	bl	80001f4 <strlen>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <web_def+0x350>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <web_def+0x37c>)
 8002b40:	4614      	mov	r4, r2
 8002b42:	469c      	mov	ip, r3
 8002b44:	f104 0e20 	add.w	lr, r4, #32
 8002b48:	4665      	mov	r5, ip
 8002b4a:	4626      	mov	r6, r4
 8002b4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b4e:	6028      	str	r0, [r5, #0]
 8002b50:	6069      	str	r1, [r5, #4]
 8002b52:	60aa      	str	r2, [r5, #8]
 8002b54:	60eb      	str	r3, [r5, #12]
 8002b56:	3410      	adds	r4, #16
 8002b58:	f10c 0c10 	add.w	ip, ip, #16
 8002b5c:	4574      	cmp	r4, lr
 8002b5e:	d1f3      	bne.n	8002b48 <web_def+0x1f4>
 8002b60:	4663      	mov	r3, ip
 8002b62:	4622      	mov	r2, r4
 8002b64:	6810      	ldr	r0, [r2, #0]
 8002b66:	6018      	str	r0, [r3, #0]
 8002b68:	8892      	ldrh	r2, [r2, #4]
 8002b6a:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:30</b> </p>\r\n");
 8002b6c:	484d      	ldr	r0, [pc, #308]	; (8002ca4 <web_def+0x350>)
 8002b6e:	f7fd fb41 	bl	80001f4 <strlen>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <web_def+0x350>)
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <web_def+0x380>)
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	469c      	mov	ip, r3
 8002b80:	f104 0e20 	add.w	lr, r4, #32
 8002b84:	4665      	mov	r5, ip
 8002b86:	4626      	mov	r6, r4
 8002b88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b8a:	6028      	str	r0, [r5, #0]
 8002b8c:	6069      	str	r1, [r5, #4]
 8002b8e:	60aa      	str	r2, [r5, #8]
 8002b90:	60eb      	str	r3, [r5, #12]
 8002b92:	3410      	adds	r4, #16
 8002b94:	f10c 0c10 	add.w	ip, ip, #16
 8002b98:	4574      	cmp	r4, lr
 8002b9a:	d1f3      	bne.n	8002b84 <web_def+0x230>
 8002b9c:	4663      	mov	r3, ip
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	6810      	ldr	r0, [r2, #0]
 8002ba2:	6018      	str	r0, [r3, #0]
 8002ba4:	8892      	ldrh	r2, [r2, #4]
 8002ba6:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:20</b> </p>\r\n");
 8002ba8:	483e      	ldr	r0, [pc, #248]	; (8002ca4 <web_def+0x350>)
 8002baa:	f7fd fb23 	bl	80001f4 <strlen>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	; (8002ca4 <web_def+0x350>)
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <web_def+0x384>)
 8002bb8:	4614      	mov	r4, r2
 8002bba:	469c      	mov	ip, r3
 8002bbc:	f104 0e20 	add.w	lr, r4, #32
 8002bc0:	4665      	mov	r5, ip
 8002bc2:	4626      	mov	r6, r4
 8002bc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bc6:	6028      	str	r0, [r5, #0]
 8002bc8:	6069      	str	r1, [r5, #4]
 8002bca:	60aa      	str	r2, [r5, #8]
 8002bcc:	60eb      	str	r3, [r5, #12]
 8002bce:	3410      	adds	r4, #16
 8002bd0:	f10c 0c10 	add.w	ip, ip, #16
 8002bd4:	4574      	cmp	r4, lr
 8002bd6:	d1f3      	bne.n	8002bc0 <web_def+0x26c>
 8002bd8:	4663      	mov	r3, ip
 8002bda:	4622      	mov	r2, r4
 8002bdc:	6810      	ldr	r0, [r2, #0]
 8002bde:	6018      	str	r0, [r3, #0]
 8002be0:	8892      	ldrh	r2, [r2, #4]
 8002be2:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:10</b> </p>\r\n");
 8002be4:	482f      	ldr	r0, [pc, #188]	; (8002ca4 <web_def+0x350>)
 8002be6:	f7fd fb05 	bl	80001f4 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <web_def+0x350>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <web_def+0x388>)
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	469c      	mov	ip, r3
 8002bf8:	f104 0e20 	add.w	lr, r4, #32
 8002bfc:	4665      	mov	r5, ip
 8002bfe:	4626      	mov	r6, r4
 8002c00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c02:	6028      	str	r0, [r5, #0]
 8002c04:	6069      	str	r1, [r5, #4]
 8002c06:	60aa      	str	r2, [r5, #8]
 8002c08:	60eb      	str	r3, [r5, #12]
 8002c0a:	3410      	adds	r4, #16
 8002c0c:	f10c 0c10 	add.w	ip, ip, #16
 8002c10:	4574      	cmp	r4, lr
 8002c12:	d1f3      	bne.n	8002bfc <web_def+0x2a8>
 8002c14:	4663      	mov	r3, ip
 8002c16:	4622      	mov	r2, r4
 8002c18:	6810      	ldr	r0, [r2, #0]
 8002c1a:	6018      	str	r0, [r3, #0]
 8002c1c:	8892      	ldrh	r2, [r2, #4]
 8002c1e:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:00</b> </p>\r\n");
 8002c20:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <web_def+0x350>)
 8002c22:	f7fd fae7 	bl	80001f4 <strlen>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <web_def+0x350>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <web_def+0x38c>)
 8002c30:	4614      	mov	r4, r2
 8002c32:	469c      	mov	ip, r3
 8002c34:	f104 0e20 	add.w	lr, r4, #32
 8002c38:	4665      	mov	r5, ip
 8002c3a:	4626      	mov	r6, r4
 8002c3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c3e:	6028      	str	r0, [r5, #0]
 8002c40:	6069      	str	r1, [r5, #4]
 8002c42:	60aa      	str	r2, [r5, #8]
 8002c44:	60eb      	str	r3, [r5, #12]
 8002c46:	3410      	adds	r4, #16
 8002c48:	f10c 0c10 	add.w	ip, ip, #16
 8002c4c:	4574      	cmp	r4, lr
 8002c4e:	d1f3      	bne.n	8002c38 <web_def+0x2e4>
 8002c50:	4663      	mov	r3, ip
 8002c52:	4622      	mov	r2, r4
 8002c54:	6810      	ldr	r0, [r2, #0]
 8002c56:	6018      	str	r0, [r3, #0]
 8002c58:	8892      	ldrh	r2, [r2, #4]
 8002c5a:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:50</b> </p>\r\n");
 8002c5c:	4811      	ldr	r0, [pc, #68]	; (8002ca4 <web_def+0x350>)
 8002c5e:	f7fd fac9 	bl	80001f4 <strlen>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <web_def+0x350>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <web_def+0x378>)
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	469c      	mov	ip, r3
 8002c70:	f104 0e20 	add.w	lr, r4, #32
 8002c74:	4665      	mov	r5, ip
 8002c76:	4626      	mov	r6, r4
 8002c78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c7a:	6028      	str	r0, [r5, #0]
 8002c7c:	6069      	str	r1, [r5, #4]
 8002c7e:	60aa      	str	r2, [r5, #8]
 8002c80:	60eb      	str	r3, [r5, #12]
 8002c82:	3410      	adds	r4, #16
 8002c84:	f10c 0c10 	add.w	ip, ip, #16
 8002c88:	4574      	cmp	r4, lr
 8002c8a:	d1f3      	bne.n	8002c74 <web_def+0x320>
 8002c8c:	4663      	mov	r3, ip
 8002c8e:	4622      	mov	r2, r4
 8002c90:	6810      	ldr	r0, [r2, #0]
 8002c92:	6018      	str	r0, [r3, #0]
 8002c94:	8892      	ldrh	r2, [r2, #4]
 8002c96:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:40</b> </p>\r\n");
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <web_def+0x350>)
 8002c9a:	f7fd faab 	bl	80001f4 <strlen>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	e020      	b.n	8002ce4 <web_def+0x390>
 8002ca2:	bf00      	nop
 8002ca4:	20000d58 	.word	0x20000d58
 8002ca8:	0800ad88 	.word	0x0800ad88
 8002cac:	0800ad9c 	.word	0x0800ad9c
 8002cb0:	0800adb8 	.word	0x0800adb8
 8002cb4:	0800add0 	.word	0x0800add0
 8002cb8:	0800ade8 	.word	0x0800ade8
 8002cbc:	0800ae1c 	.word	0x0800ae1c
 8002cc0:	0800ae40 	.word	0x0800ae40
 8002cc4:	0800ae60 	.word	0x0800ae60
 8002cc8:	0800ae8c 	.word	0x0800ae8c
 8002ccc:	0800aeb0 	.word	0x0800aeb0
 8002cd0:	0800aed8 	.word	0x0800aed8
 8002cd4:	0800af00 	.word	0x0800af00
 8002cd8:	0800af28 	.word	0x0800af28
 8002cdc:	0800af50 	.word	0x0800af50
 8002ce0:	0800af78 	.word	0x0800af78
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4bd1      	ldr	r3, [pc, #836]	; (800302c <web_def+0x6d8>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	4ad1      	ldr	r2, [pc, #836]	; (8003030 <web_def+0x6dc>)
 8002cec:	4614      	mov	r4, r2
 8002cee:	469c      	mov	ip, r3
 8002cf0:	f104 0e20 	add.w	lr, r4, #32
 8002cf4:	4665      	mov	r5, ip
 8002cf6:	4626      	mov	r6, r4
 8002cf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002cfa:	6028      	str	r0, [r5, #0]
 8002cfc:	6069      	str	r1, [r5, #4]
 8002cfe:	60aa      	str	r2, [r5, #8]
 8002d00:	60eb      	str	r3, [r5, #12]
 8002d02:	3410      	adds	r4, #16
 8002d04:	f10c 0c10 	add.w	ip, ip, #16
 8002d08:	4574      	cmp	r4, lr
 8002d0a:	d1f3      	bne.n	8002cf4 <web_def+0x3a0>
 8002d0c:	4663      	mov	r3, ip
 8002d0e:	4622      	mov	r2, r4
 8002d10:	6810      	ldr	r0, [r2, #0]
 8002d12:	6018      	str	r0, [r3, #0]
 8002d14:	8892      	ldrh	r2, [r2, #4]
 8002d16:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:30</b> </p>\r\n");
 8002d18:	48c4      	ldr	r0, [pc, #784]	; (800302c <web_def+0x6d8>)
 8002d1a:	f7fd fa6b 	bl	80001f4 <strlen>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	4bc2      	ldr	r3, [pc, #776]	; (800302c <web_def+0x6d8>)
 8002d24:	4413      	add	r3, r2
 8002d26:	4ac3      	ldr	r2, [pc, #780]	; (8003034 <web_def+0x6e0>)
 8002d28:	4614      	mov	r4, r2
 8002d2a:	469c      	mov	ip, r3
 8002d2c:	f104 0e20 	add.w	lr, r4, #32
 8002d30:	4665      	mov	r5, ip
 8002d32:	4626      	mov	r6, r4
 8002d34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d36:	6028      	str	r0, [r5, #0]
 8002d38:	6069      	str	r1, [r5, #4]
 8002d3a:	60aa      	str	r2, [r5, #8]
 8002d3c:	60eb      	str	r3, [r5, #12]
 8002d3e:	3410      	adds	r4, #16
 8002d40:	f10c 0c10 	add.w	ip, ip, #16
 8002d44:	4574      	cmp	r4, lr
 8002d46:	d1f3      	bne.n	8002d30 <web_def+0x3dc>
 8002d48:	4663      	mov	r3, ip
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	6810      	ldr	r0, [r2, #0]
 8002d4e:	6018      	str	r0, [r3, #0]
 8002d50:	8892      	ldrh	r2, [r2, #4]
 8002d52:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b> --:--:-- , --:--:20</b> </p>\r\n");
 8002d54:	48b5      	ldr	r0, [pc, #724]	; (800302c <web_def+0x6d8>)
 8002d56:	f7fd fa4d 	bl	80001f4 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4bb3      	ldr	r3, [pc, #716]	; (800302c <web_def+0x6d8>)
 8002d60:	4413      	add	r3, r2
 8002d62:	4ab5      	ldr	r2, [pc, #724]	; (8003038 <web_def+0x6e4>)
 8002d64:	4614      	mov	r4, r2
 8002d66:	469c      	mov	ip, r3
 8002d68:	f104 0e20 	add.w	lr, r4, #32
 8002d6c:	4665      	mov	r5, ip
 8002d6e:	4626      	mov	r6, r4
 8002d70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d72:	6028      	str	r0, [r5, #0]
 8002d74:	6069      	str	r1, [r5, #4]
 8002d76:	60aa      	str	r2, [r5, #8]
 8002d78:	60eb      	str	r3, [r5, #12]
 8002d7a:	3410      	adds	r4, #16
 8002d7c:	f10c 0c10 	add.w	ip, ip, #16
 8002d80:	4574      	cmp	r4, lr
 8002d82:	d1f3      	bne.n	8002d6c <web_def+0x418>
 8002d84:	4663      	mov	r3, ip
 8002d86:	4622      	mov	r2, r4
 8002d88:	6810      	ldr	r0, [r2, #0]
 8002d8a:	6018      	str	r0, [r3, #0]
 8002d8c:	8892      	ldrh	r2, [r2, #4]
 8002d8e:	809a      	strh	r2, [r3, #4]
	  strcat(presence, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8002d90:	48a6      	ldr	r0, [pc, #664]	; (800302c <web_def+0x6d8>)
 8002d92:	f7fd fa2f 	bl	80001f4 <strlen>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4ba4      	ldr	r3, [pc, #656]	; (800302c <web_def+0x6d8>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4aa7      	ldr	r2, [pc, #668]	; (800303c <web_def+0x6e8>)
 8002da0:	4614      	mov	r4, r2
 8002da2:	469c      	mov	ip, r3
 8002da4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002da8:	4665      	mov	r5, ip
 8002daa:	4626      	mov	r6, r4
 8002dac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dae:	6028      	str	r0, [r5, #0]
 8002db0:	6069      	str	r1, [r5, #4]
 8002db2:	60aa      	str	r2, [r5, #8]
 8002db4:	60eb      	str	r3, [r5, #12]
 8002db6:	3410      	adds	r4, #16
 8002db8:	f10c 0c10 	add.w	ip, ip, #16
 8002dbc:	4574      	cmp	r4, lr
 8002dbe:	d1f3      	bne.n	8002da8 <web_def+0x454>
 8002dc0:	4662      	mov	r2, ip
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	cb03      	ldmia	r3!, {r0, r1}
 8002dc6:	6010      	str	r0, [r2, #0]
 8002dc8:	6051      	str	r1, [r2, #4]
 8002dca:	8819      	ldrh	r1, [r3, #0]
 8002dcc:	789b      	ldrb	r3, [r3, #2]
 8002dce:	8111      	strh	r1, [r2, #8]
 8002dd0:	7293      	strb	r3, [r2, #10]
///////////////////////////////////////////////////////////////


///////////// OGRZEWANIE ///////////////////////////////////////////////

  strcpy(heizung, "HTTP/1.1 200 OK\r\n");
 8002dd2:	4a9b      	ldr	r2, [pc, #620]	; (8003040 <web_def+0x6ec>)
 8002dd4:	4b9b      	ldr	r3, [pc, #620]	; (8003044 <web_def+0x6f0>)
 8002dd6:	4615      	mov	r5, r2
 8002dd8:	461c      	mov	r4, r3
 8002dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ddc:	6028      	str	r0, [r5, #0]
 8002dde:	6069      	str	r1, [r5, #4]
 8002de0:	60aa      	str	r2, [r5, #8]
 8002de2:	60eb      	str	r3, [r5, #12]
 8002de4:	8823      	ldrh	r3, [r4, #0]
 8002de6:	822b      	strh	r3, [r5, #16]
  strcat(heizung, "Content-Type: text/html\r\n");
 8002de8:	4895      	ldr	r0, [pc, #596]	; (8003040 <web_def+0x6ec>)
 8002dea:	f7fd fa03 	bl	80001f4 <strlen>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b93      	ldr	r3, [pc, #588]	; (8003040 <web_def+0x6ec>)
 8002df4:	4413      	add	r3, r2
 8002df6:	4a94      	ldr	r2, [pc, #592]	; (8003048 <web_def+0x6f4>)
 8002df8:	461d      	mov	r5, r3
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfe:	6028      	str	r0, [r5, #0]
 8002e00:	6069      	str	r1, [r5, #4]
 8002e02:	60aa      	str	r2, [r5, #8]
 8002e04:	60eb      	str	r3, [r5, #12]
 8002e06:	cc03      	ldmia	r4!, {r0, r1}
 8002e08:	6128      	str	r0, [r5, #16]
 8002e0a:	6169      	str	r1, [r5, #20]
 8002e0c:	8823      	ldrh	r3, [r4, #0]
 8002e0e:	832b      	strh	r3, [r5, #24]
  strcat(heizung, "Content-Lenght: 398\r\n");
 8002e10:	488b      	ldr	r0, [pc, #556]	; (8003040 <web_def+0x6ec>)
 8002e12:	f7fd f9ef 	bl	80001f4 <strlen>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <web_def+0x6ec>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a8b      	ldr	r2, [pc, #556]	; (800304c <web_def+0x6f8>)
 8002e20:	461d      	mov	r5, r3
 8002e22:	4614      	mov	r4, r2
 8002e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e26:	6028      	str	r0, [r5, #0]
 8002e28:	6069      	str	r1, [r5, #4]
 8002e2a:	60aa      	str	r2, [r5, #8]
 8002e2c:	60eb      	str	r3, [r5, #12]
 8002e2e:	6820      	ldr	r0, [r4, #0]
 8002e30:	6128      	str	r0, [r5, #16]
 8002e32:	88a3      	ldrh	r3, [r4, #4]
 8002e34:	82ab      	strh	r3, [r5, #20]
  strcat(heizung, "Connection: close\r\n\r\n");
 8002e36:	4882      	ldr	r0, [pc, #520]	; (8003040 <web_def+0x6ec>)
 8002e38:	f7fd f9dc 	bl	80001f4 <strlen>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <web_def+0x6ec>)
 8002e42:	4413      	add	r3, r2
 8002e44:	4a82      	ldr	r2, [pc, #520]	; (8003050 <web_def+0x6fc>)
 8002e46:	461d      	mov	r5, r3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4c:	6028      	str	r0, [r5, #0]
 8002e4e:	6069      	str	r1, [r5, #4]
 8002e50:	60aa      	str	r2, [r5, #8]
 8002e52:	60eb      	str	r3, [r5, #12]
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	6128      	str	r0, [r5, #16]
 8002e58:	88a3      	ldrh	r3, [r4, #4]
 8002e5a:	82ab      	strh	r3, [r5, #20]
  strcat(heizung, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 8002e5c:	4878      	ldr	r0, [pc, #480]	; (8003040 <web_def+0x6ec>)
 8002e5e:	f7fd f9c9 	bl	80001f4 <strlen>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <web_def+0x6ec>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <web_def+0x700>)
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	469c      	mov	ip, r3
 8002e70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002e74:	4665      	mov	r5, ip
 8002e76:	4626      	mov	r6, r4
 8002e78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e7a:	6028      	str	r0, [r5, #0]
 8002e7c:	6069      	str	r1, [r5, #4]
 8002e7e:	60aa      	str	r2, [r5, #8]
 8002e80:	60eb      	str	r3, [r5, #12]
 8002e82:	3410      	adds	r4, #16
 8002e84:	f10c 0c10 	add.w	ip, ip, #16
 8002e88:	4574      	cmp	r4, lr
 8002e8a:	d1f3      	bne.n	8002e74 <web_def+0x520>
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	4623      	mov	r3, r4
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	8013      	strh	r3, [r2, #0]
  strcat(heizung, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8002e94:	486a      	ldr	r0, [pc, #424]	; (8003040 <web_def+0x6ec>)
 8002e96:	f7fd f9ad 	bl	80001f4 <strlen>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b68      	ldr	r3, [pc, #416]	; (8003040 <web_def+0x6ec>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a6d      	ldr	r2, [pc, #436]	; (8003058 <web_def+0x704>)
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	469c      	mov	ip, r3
 8002ea8:	f104 0e20 	add.w	lr, r4, #32
 8002eac:	4665      	mov	r5, ip
 8002eae:	4626      	mov	r6, r4
 8002eb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002eb2:	6028      	str	r0, [r5, #0]
 8002eb4:	6069      	str	r1, [r5, #4]
 8002eb6:	60aa      	str	r2, [r5, #8]
 8002eb8:	60eb      	str	r3, [r5, #12]
 8002eba:	3410      	adds	r4, #16
 8002ebc:	f10c 0c10 	add.w	ip, ip, #16
 8002ec0:	4574      	cmp	r4, lr
 8002ec2:	d1f3      	bne.n	8002eac <web_def+0x558>
 8002ec4:	4663      	mov	r3, ip
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	6810      	ldr	r0, [r2, #0]
 8002eca:	6018      	str	r0, [r3, #0]
  strcat(heizung, "<body>\r\n<form method=\"get\">\r\n");
 8002ecc:	485c      	ldr	r0, [pc, #368]	; (8003040 <web_def+0x6ec>)
 8002ece:	f7fd f991 	bl	80001f4 <strlen>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <web_def+0x6ec>)
 8002ed8:	4413      	add	r3, r2
 8002eda:	4a60      	ldr	r2, [pc, #384]	; (800305c <web_def+0x708>)
 8002edc:	461d      	mov	r5, r3
 8002ede:	4614      	mov	r4, r2
 8002ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee2:	6028      	str	r0, [r5, #0]
 8002ee4:	6069      	str	r1, [r5, #4]
 8002ee6:	60aa      	str	r2, [r5, #8]
 8002ee8:	60eb      	str	r3, [r5, #12]
 8002eea:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002eec:	6128      	str	r0, [r5, #16]
 8002eee:	6169      	str	r1, [r5, #20]
 8002ef0:	61aa      	str	r2, [r5, #24]
 8002ef2:	8823      	ldrh	r3, [r4, #0]
 8002ef4:	83ab      	strh	r3, [r5, #28]
  strcat(heizung, "<p><b>Temperatura w pomieszczeniu:    °C</b> </p>\r\n"); //°C
 8002ef6:	4852      	ldr	r0, [pc, #328]	; (8003040 <web_def+0x6ec>)
 8002ef8:	f7fd f97c 	bl	80001f4 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <web_def+0x6ec>)
 8002f02:	4413      	add	r3, r2
 8002f04:	4a56      	ldr	r2, [pc, #344]	; (8003060 <web_def+0x70c>)
 8002f06:	4614      	mov	r4, r2
 8002f08:	469c      	mov	ip, r3
 8002f0a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002f0e:	4665      	mov	r5, ip
 8002f10:	4626      	mov	r6, r4
 8002f12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f14:	6028      	str	r0, [r5, #0]
 8002f16:	6069      	str	r1, [r5, #4]
 8002f18:	60aa      	str	r2, [r5, #8]
 8002f1a:	60eb      	str	r3, [r5, #12]
 8002f1c:	3410      	adds	r4, #16
 8002f1e:	f10c 0c10 	add.w	ip, ip, #16
 8002f22:	4574      	cmp	r4, lr
 8002f24:	d1f3      	bne.n	8002f0e <web_def+0x5ba>
 8002f26:	4663      	mov	r3, ip
 8002f28:	4622      	mov	r2, r4
 8002f2a:	6810      	ldr	r0, [r2, #0]
 8002f2c:	6018      	str	r0, [r3, #0]
 8002f2e:	7912      	ldrb	r2, [r2, #4]
 8002f30:	711a      	strb	r2, [r3, #4]
  strcat(heizung, "<p><b>Temperatura wody w zasobniku:    °C</b> </p></p>\r\n"); //°C
 8002f32:	4843      	ldr	r0, [pc, #268]	; (8003040 <web_def+0x6ec>)
 8002f34:	f7fd f95e 	bl	80001f4 <strlen>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <web_def+0x6ec>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a48      	ldr	r2, [pc, #288]	; (8003064 <web_def+0x710>)
 8002f42:	4614      	mov	r4, r2
 8002f44:	469c      	mov	ip, r3
 8002f46:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002f4a:	4665      	mov	r5, ip
 8002f4c:	4626      	mov	r6, r4
 8002f4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f50:	6028      	str	r0, [r5, #0]
 8002f52:	6069      	str	r1, [r5, #4]
 8002f54:	60aa      	str	r2, [r5, #8]
 8002f56:	60eb      	str	r3, [r5, #12]
 8002f58:	3410      	adds	r4, #16
 8002f5a:	f10c 0c10 	add.w	ip, ip, #16
 8002f5e:	4574      	cmp	r4, lr
 8002f60:	d1f3      	bne.n	8002f4a <web_def+0x5f6>
 8002f62:	4662      	mov	r2, ip
 8002f64:	4623      	mov	r3, r4
 8002f66:	cb03      	ldmia	r3!, {r0, r1}
 8002f68:	6010      	str	r0, [r2, #0]
 8002f6a:	6051      	str	r1, [r2, #4]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	8113      	strh	r3, [r2, #8]
  strcat(heizung, "<p><b>Zadana temperatura (10-33):</b><input type=\"text\"name=\"tm\" value=\"22\" /></p>\r\n");
 8002f70:	4833      	ldr	r0, [pc, #204]	; (8003040 <web_def+0x6ec>)
 8002f72:	f7fd f93f 	bl	80001f4 <strlen>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <web_def+0x6ec>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <web_def+0x714>)
 8002f80:	4618      	mov	r0, r3
 8002f82:	4611      	mov	r1, r2
 8002f84:	2355      	movs	r3, #85	; 0x55
 8002f86:	461a      	mov	r2, r3
 8002f88:	f004 fefc 	bl	8007d84 <memcpy>
  strcat(heizung, "<p><b>  <input type=\"range\" id=\"volume\" name=\"volume\"min=\"0\" max=\"9\"><label for=\"volume\">Volume</label>\r\n");
 8002f8c:	482c      	ldr	r0, [pc, #176]	; (8003040 <web_def+0x6ec>)
 8002f8e:	f7fd f931 	bl	80001f4 <strlen>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <web_def+0x6ec>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a34      	ldr	r2, [pc, #208]	; (800306c <web_def+0x718>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	236a      	movs	r3, #106	; 0x6a
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f004 feee 	bl	8007d84 <memcpy>
  strcat(heizung, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8002fa8:	4825      	ldr	r0, [pc, #148]	; (8003040 <web_def+0x6ec>)
 8002faa:	f7fd f923 	bl	80001f4 <strlen>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <web_def+0x6ec>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a21      	ldr	r2, [pc, #132]	; (800303c <web_def+0x6e8>)
 8002fb8:	4614      	mov	r4, r2
 8002fba:	469c      	mov	ip, r3
 8002fbc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002fc0:	4665      	mov	r5, ip
 8002fc2:	4626      	mov	r6, r4
 8002fc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fc6:	6028      	str	r0, [r5, #0]
 8002fc8:	6069      	str	r1, [r5, #4]
 8002fca:	60aa      	str	r2, [r5, #8]
 8002fcc:	60eb      	str	r3, [r5, #12]
 8002fce:	3410      	adds	r4, #16
 8002fd0:	f10c 0c10 	add.w	ip, ip, #16
 8002fd4:	4574      	cmp	r4, lr
 8002fd6:	d1f3      	bne.n	8002fc0 <web_def+0x66c>
 8002fd8:	4662      	mov	r2, ip
 8002fda:	4623      	mov	r3, r4
 8002fdc:	cb03      	ldmia	r3!, {r0, r1}
 8002fde:	6010      	str	r0, [r2, #0]
 8002fe0:	6051      	str	r1, [r2, #4]
 8002fe2:	8819      	ldrh	r1, [r3, #0]
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	8111      	strh	r1, [r2, #8]
 8002fe8:	7293      	strb	r3, [r2, #10]

/////////////////////// OSWIETLENIE//////////////////////////////////////

  strcpy(lights, "HTTP/1.1 200 OK\r\n");
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <web_def+0x71c>)
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <web_def+0x6f0>)
 8002fee:	4615      	mov	r5, r2
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff4:	6028      	str	r0, [r5, #0]
 8002ff6:	6069      	str	r1, [r5, #4]
 8002ff8:	60aa      	str	r2, [r5, #8]
 8002ffa:	60eb      	str	r3, [r5, #12]
 8002ffc:	8823      	ldrh	r3, [r4, #0]
 8002ffe:	822b      	strh	r3, [r5, #16]
  strcat(lights, "Content-Type: text/html\r\n");
 8003000:	481b      	ldr	r0, [pc, #108]	; (8003070 <web_def+0x71c>)
 8003002:	f7fd f8f7 	bl	80001f4 <strlen>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <web_def+0x71c>)
 800300c:	4413      	add	r3, r2
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <web_def+0x6f4>)
 8003010:	461d      	mov	r5, r3
 8003012:	4614      	mov	r4, r2
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	6028      	str	r0, [r5, #0]
 8003018:	6069      	str	r1, [r5, #4]
 800301a:	60aa      	str	r2, [r5, #8]
 800301c:	60eb      	str	r3, [r5, #12]
 800301e:	cc03      	ldmia	r4!, {r0, r1}
 8003020:	6128      	str	r0, [r5, #16]
 8003022:	6169      	str	r1, [r5, #20]
 8003024:	8823      	ldrh	r3, [r4, #0]
 8003026:	832b      	strh	r3, [r5, #24]
 8003028:	e024      	b.n	8003074 <web_def+0x720>
 800302a:	bf00      	nop
 800302c:	20000d58 	.word	0x20000d58
 8003030:	0800aed8 	.word	0x0800aed8
 8003034:	0800af00 	.word	0x0800af00
 8003038:	0800af28 	.word	0x0800af28
 800303c:	0800afa0 	.word	0x0800afa0
 8003040:	20000a38 	.word	0x20000a38
 8003044:	0800ad88 	.word	0x0800ad88
 8003048:	0800ad9c 	.word	0x0800ad9c
 800304c:	0800adb8 	.word	0x0800adb8
 8003050:	0800add0 	.word	0x0800add0
 8003054:	0800ade8 	.word	0x0800ade8
 8003058:	0800ae1c 	.word	0x0800ae1c
 800305c:	0800ae40 	.word	0x0800ae40
 8003060:	0800afdc 	.word	0x0800afdc
 8003064:	0800b014 	.word	0x0800b014
 8003068:	0800b050 	.word	0x0800b050
 800306c:	0800b0a8 	.word	0x0800b0a8
 8003070:	20002ce8 	.word	0x20002ce8
  strcat(lights, "Content-Lenght: 398\r\n");
 8003074:	48d0      	ldr	r0, [pc, #832]	; (80033b8 <web_def+0xa64>)
 8003076:	f7fd f8bd 	bl	80001f4 <strlen>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	4bce      	ldr	r3, [pc, #824]	; (80033b8 <web_def+0xa64>)
 8003080:	4413      	add	r3, r2
 8003082:	4ace      	ldr	r2, [pc, #824]	; (80033bc <web_def+0xa68>)
 8003084:	461d      	mov	r5, r3
 8003086:	4614      	mov	r4, r2
 8003088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308a:	6028      	str	r0, [r5, #0]
 800308c:	6069      	str	r1, [r5, #4]
 800308e:	60aa      	str	r2, [r5, #8]
 8003090:	60eb      	str	r3, [r5, #12]
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	6128      	str	r0, [r5, #16]
 8003096:	88a3      	ldrh	r3, [r4, #4]
 8003098:	82ab      	strh	r3, [r5, #20]
  strcat(lights, "Connection: close\r\n\r\n");
 800309a:	48c7      	ldr	r0, [pc, #796]	; (80033b8 <web_def+0xa64>)
 800309c:	f7fd f8aa 	bl	80001f4 <strlen>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4bc4      	ldr	r3, [pc, #784]	; (80033b8 <web_def+0xa64>)
 80030a6:	4413      	add	r3, r2
 80030a8:	4ac5      	ldr	r2, [pc, #788]	; (80033c0 <web_def+0xa6c>)
 80030aa:	461d      	mov	r5, r3
 80030ac:	4614      	mov	r4, r2
 80030ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b0:	6028      	str	r0, [r5, #0]
 80030b2:	6069      	str	r1, [r5, #4]
 80030b4:	60aa      	str	r2, [r5, #8]
 80030b6:	60eb      	str	r3, [r5, #12]
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	6128      	str	r0, [r5, #16]
 80030bc:	88a3      	ldrh	r3, [r4, #4]
 80030be:	82ab      	strh	r3, [r5, #20]
  strcat(lights, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 80030c0:	48bd      	ldr	r0, [pc, #756]	; (80033b8 <web_def+0xa64>)
 80030c2:	f7fd f897 	bl	80001f4 <strlen>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	4bbb      	ldr	r3, [pc, #748]	; (80033b8 <web_def+0xa64>)
 80030cc:	4413      	add	r3, r2
 80030ce:	4abd      	ldr	r2, [pc, #756]	; (80033c4 <web_def+0xa70>)
 80030d0:	4614      	mov	r4, r2
 80030d2:	469c      	mov	ip, r3
 80030d4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80030d8:	4665      	mov	r5, ip
 80030da:	4626      	mov	r6, r4
 80030dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030de:	6028      	str	r0, [r5, #0]
 80030e0:	6069      	str	r1, [r5, #4]
 80030e2:	60aa      	str	r2, [r5, #8]
 80030e4:	60eb      	str	r3, [r5, #12]
 80030e6:	3410      	adds	r4, #16
 80030e8:	f10c 0c10 	add.w	ip, ip, #16
 80030ec:	4574      	cmp	r4, lr
 80030ee:	d1f3      	bne.n	80030d8 <web_def+0x784>
 80030f0:	4662      	mov	r2, ip
 80030f2:	4623      	mov	r3, r4
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	8013      	strh	r3, [r2, #0]
  strcat(lights, "<title>Dioda RGB</title>\r\n</head>\r\n");
 80030f8:	48af      	ldr	r0, [pc, #700]	; (80033b8 <web_def+0xa64>)
 80030fa:	f7fd f87b 	bl	80001f4 <strlen>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4bad      	ldr	r3, [pc, #692]	; (80033b8 <web_def+0xa64>)
 8003104:	4413      	add	r3, r2
 8003106:	4ab0      	ldr	r2, [pc, #704]	; (80033c8 <web_def+0xa74>)
 8003108:	4614      	mov	r4, r2
 800310a:	469c      	mov	ip, r3
 800310c:	f104 0e20 	add.w	lr, r4, #32
 8003110:	4665      	mov	r5, ip
 8003112:	4626      	mov	r6, r4
 8003114:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003116:	6028      	str	r0, [r5, #0]
 8003118:	6069      	str	r1, [r5, #4]
 800311a:	60aa      	str	r2, [r5, #8]
 800311c:	60eb      	str	r3, [r5, #12]
 800311e:	3410      	adds	r4, #16
 8003120:	f10c 0c10 	add.w	ip, ip, #16
 8003124:	4574      	cmp	r4, lr
 8003126:	d1f3      	bne.n	8003110 <web_def+0x7bc>
 8003128:	4663      	mov	r3, ip
 800312a:	4622      	mov	r2, r4
 800312c:	6810      	ldr	r0, [r2, #0]
 800312e:	6018      	str	r0, [r3, #0]
  strcat(lights, "<body>\r\n<form method=\"get\">\r\n");
 8003130:	48a1      	ldr	r0, [pc, #644]	; (80033b8 <web_def+0xa64>)
 8003132:	f7fd f85f 	bl	80001f4 <strlen>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b9f      	ldr	r3, [pc, #636]	; (80033b8 <web_def+0xa64>)
 800313c:	4413      	add	r3, r2
 800313e:	4aa3      	ldr	r2, [pc, #652]	; (80033cc <web_def+0xa78>)
 8003140:	461d      	mov	r5, r3
 8003142:	4614      	mov	r4, r2
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	6028      	str	r0, [r5, #0]
 8003148:	6069      	str	r1, [r5, #4]
 800314a:	60aa      	str	r2, [r5, #8]
 800314c:	60eb      	str	r3, [r5, #12]
 800314e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003150:	6128      	str	r0, [r5, #16]
 8003152:	6169      	str	r1, [r5, #20]
 8003154:	61aa      	str	r2, [r5, #24]
 8003156:	8823      	ldrh	r3, [r4, #0]
 8003158:	83ab      	strh	r3, [r5, #28]

  strcat(lights, "<p><b><select><option value=\"auto\">automatyczne</option><option value=\"man\">Reczne</option></select>\r\n");
 800315a:	4897      	ldr	r0, [pc, #604]	; (80033b8 <web_def+0xa64>)
 800315c:	f7fd f84a 	bl	80001f4 <strlen>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <web_def+0xa64>)
 8003166:	4413      	add	r3, r2
 8003168:	4a99      	ldr	r2, [pc, #612]	; (80033d0 <web_def+0xa7c>)
 800316a:	4618      	mov	r0, r3
 800316c:	4611      	mov	r1, r2
 800316e:	2367      	movs	r3, #103	; 0x67
 8003170:	461a      	mov	r2, r3
 8003172:	f004 fe07 	bl	8007d84 <memcpy>
  strcat(lights, "<p><b><b><input type=\"submit\" name=\"pw\" value=\"POWROT\"/>\r\n");
 8003176:	4890      	ldr	r0, [pc, #576]	; (80033b8 <web_def+0xa64>)
 8003178:	f7fd f83c 	bl	80001f4 <strlen>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <web_def+0xa64>)
 8003182:	4413      	add	r3, r2
 8003184:	4a93      	ldr	r2, [pc, #588]	; (80033d4 <web_def+0xa80>)
 8003186:	4614      	mov	r4, r2
 8003188:	469c      	mov	ip, r3
 800318a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800318e:	4665      	mov	r5, ip
 8003190:	4626      	mov	r6, r4
 8003192:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003194:	6028      	str	r0, [r5, #0]
 8003196:	6069      	str	r1, [r5, #4]
 8003198:	60aa      	str	r2, [r5, #8]
 800319a:	60eb      	str	r3, [r5, #12]
 800319c:	3410      	adds	r4, #16
 800319e:	f10c 0c10 	add.w	ip, ip, #16
 80031a2:	4574      	cmp	r4, lr
 80031a4:	d1f3      	bne.n	800318e <web_def+0x83a>
 80031a6:	4662      	mov	r2, ip
 80031a8:	4623      	mov	r3, r4
 80031aa:	cb03      	ldmia	r3!, {r0, r1}
 80031ac:	6010      	str	r0, [r2, #0]
 80031ae:	6051      	str	r1, [r2, #4]
 80031b0:	8819      	ldrh	r1, [r3, #0]
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	8111      	strh	r1, [r2, #8]
 80031b6:	7293      	strb	r3, [r2, #10]
  ////////////////////////////////////////////////////////////////////////////


////////////////////// STRONA GŁÓWNA ////////////////////////////////////

  strcpy(webpage, "HTTP/1.1 200 OK\r\n");
 80031b8:	4a87      	ldr	r2, [pc, #540]	; (80033d8 <web_def+0xa84>)
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <web_def+0xa88>)
 80031bc:	4615      	mov	r5, r2
 80031be:	461c      	mov	r4, r3
 80031c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c2:	6028      	str	r0, [r5, #0]
 80031c4:	6069      	str	r1, [r5, #4]
 80031c6:	60aa      	str	r2, [r5, #8]
 80031c8:	60eb      	str	r3, [r5, #12]
 80031ca:	8823      	ldrh	r3, [r4, #0]
 80031cc:	822b      	strh	r3, [r5, #16]
  strcat(webpage, "Content-Type: text/html\r\n");
 80031ce:	4882      	ldr	r0, [pc, #520]	; (80033d8 <web_def+0xa84>)
 80031d0:	f7fd f810 	bl	80001f4 <strlen>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <web_def+0xa84>)
 80031da:	4413      	add	r3, r2
 80031dc:	4a80      	ldr	r2, [pc, #512]	; (80033e0 <web_def+0xa8c>)
 80031de:	461d      	mov	r5, r3
 80031e0:	4614      	mov	r4, r2
 80031e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e4:	6028      	str	r0, [r5, #0]
 80031e6:	6069      	str	r1, [r5, #4]
 80031e8:	60aa      	str	r2, [r5, #8]
 80031ea:	60eb      	str	r3, [r5, #12]
 80031ec:	cc03      	ldmia	r4!, {r0, r1}
 80031ee:	6128      	str	r0, [r5, #16]
 80031f0:	6169      	str	r1, [r5, #20]
 80031f2:	8823      	ldrh	r3, [r4, #0]
 80031f4:	832b      	strh	r3, [r5, #24]
  strcat(webpage, "Content-Lenght: 398\r\n");
 80031f6:	4878      	ldr	r0, [pc, #480]	; (80033d8 <web_def+0xa84>)
 80031f8:	f7fc fffc 	bl	80001f4 <strlen>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <web_def+0xa84>)
 8003202:	4413      	add	r3, r2
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <web_def+0xa68>)
 8003206:	461d      	mov	r5, r3
 8003208:	4614      	mov	r4, r2
 800320a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320c:	6028      	str	r0, [r5, #0]
 800320e:	6069      	str	r1, [r5, #4]
 8003210:	60aa      	str	r2, [r5, #8]
 8003212:	60eb      	str	r3, [r5, #12]
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	6128      	str	r0, [r5, #16]
 8003218:	88a3      	ldrh	r3, [r4, #4]
 800321a:	82ab      	strh	r3, [r5, #20]
  strcat(webpage, "Connection: close\r\n\r\n");
 800321c:	486e      	ldr	r0, [pc, #440]	; (80033d8 <web_def+0xa84>)
 800321e:	f7fc ffe9 	bl	80001f4 <strlen>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <web_def+0xa84>)
 8003228:	4413      	add	r3, r2
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <web_def+0xa6c>)
 800322c:	461d      	mov	r5, r3
 800322e:	4614      	mov	r4, r2
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	6028      	str	r0, [r5, #0]
 8003234:	6069      	str	r1, [r5, #4]
 8003236:	60aa      	str	r2, [r5, #8]
 8003238:	60eb      	str	r3, [r5, #12]
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	6128      	str	r0, [r5, #16]
 800323e:	88a3      	ldrh	r3, [r4, #4]
 8003240:	82ab      	strh	r3, [r5, #20]
  strcat(webpage, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 8003242:	4865      	ldr	r0, [pc, #404]	; (80033d8 <web_def+0xa84>)
 8003244:	f7fc ffd6 	bl	80001f4 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <web_def+0xa84>)
 800324e:	4413      	add	r3, r2
 8003250:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <web_def+0xa70>)
 8003252:	4614      	mov	r4, r2
 8003254:	469c      	mov	ip, r3
 8003256:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800325a:	4665      	mov	r5, ip
 800325c:	4626      	mov	r6, r4
 800325e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003260:	6028      	str	r0, [r5, #0]
 8003262:	6069      	str	r1, [r5, #4]
 8003264:	60aa      	str	r2, [r5, #8]
 8003266:	60eb      	str	r3, [r5, #12]
 8003268:	3410      	adds	r4, #16
 800326a:	f10c 0c10 	add.w	ip, ip, #16
 800326e:	4574      	cmp	r4, lr
 8003270:	d1f3      	bne.n	800325a <web_def+0x906>
 8003272:	4662      	mov	r2, ip
 8003274:	4623      	mov	r3, r4
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	8013      	strh	r3, [r2, #0]
  strcat(webpage, "<title>Dioda RGB</title>\r\n</head>\r\n");
 800327a:	4857      	ldr	r0, [pc, #348]	; (80033d8 <web_def+0xa84>)
 800327c:	f7fc ffba 	bl	80001f4 <strlen>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <web_def+0xa84>)
 8003286:	4413      	add	r3, r2
 8003288:	4a4f      	ldr	r2, [pc, #316]	; (80033c8 <web_def+0xa74>)
 800328a:	4614      	mov	r4, r2
 800328c:	469c      	mov	ip, r3
 800328e:	f104 0e20 	add.w	lr, r4, #32
 8003292:	4665      	mov	r5, ip
 8003294:	4626      	mov	r6, r4
 8003296:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003298:	6028      	str	r0, [r5, #0]
 800329a:	6069      	str	r1, [r5, #4]
 800329c:	60aa      	str	r2, [r5, #8]
 800329e:	60eb      	str	r3, [r5, #12]
 80032a0:	3410      	adds	r4, #16
 80032a2:	f10c 0c10 	add.w	ip, ip, #16
 80032a6:	4574      	cmp	r4, lr
 80032a8:	d1f3      	bne.n	8003292 <web_def+0x93e>
 80032aa:	4663      	mov	r3, ip
 80032ac:	4622      	mov	r2, r4
 80032ae:	6810      	ldr	r0, [r2, #0]
 80032b0:	6018      	str	r0, [r3, #0]
  strcat(webpage, "<body>\r\n<form method=\"get\">\r\n");
 80032b2:	4849      	ldr	r0, [pc, #292]	; (80033d8 <web_def+0xa84>)
 80032b4:	f7fc ff9e 	bl	80001f4 <strlen>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <web_def+0xa84>)
 80032be:	4413      	add	r3, r2
 80032c0:	4a42      	ldr	r2, [pc, #264]	; (80033cc <web_def+0xa78>)
 80032c2:	461d      	mov	r5, r3
 80032c4:	4614      	mov	r4, r2
 80032c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c8:	6028      	str	r0, [r5, #0]
 80032ca:	6069      	str	r1, [r5, #4]
 80032cc:	60aa      	str	r2, [r5, #8]
 80032ce:	60eb      	str	r3, [r5, #12]
 80032d0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80032d2:	6128      	str	r0, [r5, #16]
 80032d4:	6169      	str	r1, [r5, #20]
 80032d6:	61aa      	str	r2, [r5, #24]
 80032d8:	8823      	ldrh	r3, [r4, #0]
 80032da:	83ab      	strh	r3, [r5, #28]
//  strcat(webpage, " name=\"green\" value=\"0\" /></p>\r\n");
//  strcat(webpage, "<p><b>Niebieski (0-255):</b> <input type=\"text\"");
//  strcat(webpage, " name=\"blue\" value=\"0\" /></p>\r\n");
//strcat(webpage, "<input type=\"submit\" value=\"Ustaw kolor\" />\r\n");
//strcat(webpage, "</form>\r\n</body>\r\n</html>");
  strcat(webpage, "<p><b><input type=\"submit\" name=\"os\" value=\"OSWIETLENIE\"/>\r\n");
 80032dc:	483e      	ldr	r0, [pc, #248]	; (80033d8 <web_def+0xa84>)
 80032de:	f7fc ff89 	bl	80001f4 <strlen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <web_def+0xa84>)
 80032e8:	4413      	add	r3, r2
 80032ea:	4a3e      	ldr	r2, [pc, #248]	; (80033e4 <web_def+0xa90>)
 80032ec:	4614      	mov	r4, r2
 80032ee:	469c      	mov	ip, r3
 80032f0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80032f4:	4665      	mov	r5, ip
 80032f6:	4626      	mov	r6, r4
 80032f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032fa:	6028      	str	r0, [r5, #0]
 80032fc:	6069      	str	r1, [r5, #4]
 80032fe:	60aa      	str	r2, [r5, #8]
 8003300:	60eb      	str	r3, [r5, #12]
 8003302:	3410      	adds	r4, #16
 8003304:	f10c 0c10 	add.w	ip, ip, #16
 8003308:	4574      	cmp	r4, lr
 800330a:	d1f3      	bne.n	80032f4 <web_def+0x9a0>
 800330c:	4665      	mov	r5, ip
 800330e:	4623      	mov	r3, r4
 8003310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003312:	6028      	str	r0, [r5, #0]
 8003314:	6069      	str	r1, [r5, #4]
 8003316:	60aa      	str	r2, [r5, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	732b      	strb	r3, [r5, #12]
  strcat(webpage, "<p><b><input type=\"submit\" name=\"og\" value=\"OGRZEWANIE\"/>\r\n");
 800331c:	482e      	ldr	r0, [pc, #184]	; (80033d8 <web_def+0xa84>)
 800331e:	f7fc ff69 	bl	80001f4 <strlen>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <web_def+0xa84>)
 8003328:	4413      	add	r3, r2
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <web_def+0xa94>)
 800332c:	4614      	mov	r4, r2
 800332e:	469c      	mov	ip, r3
 8003330:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003334:	4665      	mov	r5, ip
 8003336:	4626      	mov	r6, r4
 8003338:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800333a:	6028      	str	r0, [r5, #0]
 800333c:	6069      	str	r1, [r5, #4]
 800333e:	60aa      	str	r2, [r5, #8]
 8003340:	60eb      	str	r3, [r5, #12]
 8003342:	3410      	adds	r4, #16
 8003344:	f10c 0c10 	add.w	ip, ip, #16
 8003348:	4574      	cmp	r4, lr
 800334a:	d1f3      	bne.n	8003334 <web_def+0x9e0>
 800334c:	4665      	mov	r5, ip
 800334e:	4623      	mov	r3, r4
 8003350:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003352:	6028      	str	r0, [r5, #0]
 8003354:	6069      	str	r1, [r5, #4]
 8003356:	60aa      	str	r2, [r5, #8]
  strcat(webpage, "<p><b><input type=\"submit\" name=\"ob\" value=\"KONTROLA OBECNOSCI\"/>\r\n");
 8003358:	481f      	ldr	r0, [pc, #124]	; (80033d8 <web_def+0xa84>)
 800335a:	f7fc ff4b 	bl	80001f4 <strlen>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <web_def+0xa84>)
 8003364:	4413      	add	r3, r2
 8003366:	4a21      	ldr	r2, [pc, #132]	; (80033ec <web_def+0xa98>)
 8003368:	4618      	mov	r0, r3
 800336a:	4611      	mov	r1, r2
 800336c:	2344      	movs	r3, #68	; 0x44
 800336e:	461a      	mov	r2, r3
 8003370:	f004 fd08 	bl	8007d84 <memcpy>
  strcat(webpage, "<p><b><b><input type=\"submit\" name=\"wl\" value=\"WYLOGUJ\"/>\r\n");
 8003374:	4818      	ldr	r0, [pc, #96]	; (80033d8 <web_def+0xa84>)
 8003376:	f7fc ff3d 	bl	80001f4 <strlen>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <web_def+0xa84>)
 8003380:	4413      	add	r3, r2
 8003382:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <web_def+0xa9c>)
 8003384:	4614      	mov	r4, r2
 8003386:	469c      	mov	ip, r3
 8003388:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800338c:	4665      	mov	r5, ip
 800338e:	4626      	mov	r6, r4
 8003390:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003392:	6028      	str	r0, [r5, #0]
 8003394:	6069      	str	r1, [r5, #4]
 8003396:	60aa      	str	r2, [r5, #8]
 8003398:	60eb      	str	r3, [r5, #12]
 800339a:	3410      	adds	r4, #16
 800339c:	f10c 0c10 	add.w	ip, ip, #16
 80033a0:	4574      	cmp	r4, lr
 80033a2:	d1f3      	bne.n	800338c <web_def+0xa38>
 80033a4:	4665      	mov	r5, ip
 80033a6:	4623      	mov	r3, r4
 80033a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033aa:	6028      	str	r0, [r5, #0]
 80033ac:	6069      	str	r1, [r5, #4]
 80033ae:	60aa      	str	r2, [r5, #8]
 // strcat(webpage, "<p><b><select><option value=\"auto\">automatyczne</option><option value=\"man\">Reczne</option></select\>\r\n");

//strcat(webpage, "<button onclick=\"getElementById('demo').innerHTML = Date()\">What is the time?</button>");   //niby czas
// strcat(webpage, "<p><input type=\"radio\" value=\"temperatura\" />\r\n"); // kropki wyboru
  strcat(webpage, "</form>\r\n</body>\r\n</html>");
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <web_def+0xa84>)
 80033b2:	f7fc ff1f 	bl	80001f4 <strlen>
 80033b6:	e01d      	b.n	80033f4 <web_def+0xaa0>
 80033b8:	20002ce8 	.word	0x20002ce8
 80033bc:	0800adb8 	.word	0x0800adb8
 80033c0:	0800add0 	.word	0x0800add0
 80033c4:	0800ade8 	.word	0x0800ade8
 80033c8:	0800ae1c 	.word	0x0800ae1c
 80033cc:	0800ae40 	.word	0x0800ae40
 80033d0:	0800b114 	.word	0x0800b114
 80033d4:	0800afa0 	.word	0x0800afa0
 80033d8:	200036e8 	.word	0x200036e8
 80033dc:	0800ad88 	.word	0x0800ad88
 80033e0:	0800ad9c 	.word	0x0800ad9c
 80033e4:	0800b17c 	.word	0x0800b17c
 80033e8:	0800b1bc 	.word	0x0800b1bc
 80033ec:	0800b1f8 	.word	0x0800b1f8
 80033f0:	0800b23c 	.word	0x0800b23c
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4bcc      	ldr	r3, [pc, #816]	; (800372c <web_def+0xdd8>)
 80033fa:	4413      	add	r3, r2
 80033fc:	4acc      	ldr	r2, [pc, #816]	; (8003730 <web_def+0xddc>)
 80033fe:	461d      	mov	r5, r3
 8003400:	4614      	mov	r4, r2
 8003402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003404:	6028      	str	r0, [r5, #0]
 8003406:	6069      	str	r1, [r5, #4]
 8003408:	60aa      	str	r2, [r5, #8]
 800340a:	60eb      	str	r3, [r5, #12]
 800340c:	cc03      	ldmia	r4!, {r0, r1}
 800340e:	6128      	str	r0, [r5, #16]
 8003410:	6169      	str	r1, [r5, #20]
 8003412:	8823      	ldrh	r3, [r4, #0]
 8003414:	832b      	strh	r3, [r5, #24]



 /////////////////////// //strona logowania

  strcpy(frontpage, "HTTP/1.2 200 OK\r\n");
 8003416:	4ac7      	ldr	r2, [pc, #796]	; (8003734 <web_def+0xde0>)
 8003418:	4bc7      	ldr	r3, [pc, #796]	; (8003738 <web_def+0xde4>)
 800341a:	4615      	mov	r5, r2
 800341c:	461c      	mov	r4, r3
 800341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003420:	6028      	str	r0, [r5, #0]
 8003422:	6069      	str	r1, [r5, #4]
 8003424:	60aa      	str	r2, [r5, #8]
 8003426:	60eb      	str	r3, [r5, #12]
 8003428:	8823      	ldrh	r3, [r4, #0]
 800342a:	822b      	strh	r3, [r5, #16]
  strcat(frontpage, "Content-Type: text/html\r\n");
 800342c:	48c1      	ldr	r0, [pc, #772]	; (8003734 <web_def+0xde0>)
 800342e:	f7fc fee1 	bl	80001f4 <strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	4bbf      	ldr	r3, [pc, #764]	; (8003734 <web_def+0xde0>)
 8003438:	4413      	add	r3, r2
 800343a:	4ac0      	ldr	r2, [pc, #768]	; (800373c <web_def+0xde8>)
 800343c:	461d      	mov	r5, r3
 800343e:	4614      	mov	r4, r2
 8003440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003442:	6028      	str	r0, [r5, #0]
 8003444:	6069      	str	r1, [r5, #4]
 8003446:	60aa      	str	r2, [r5, #8]
 8003448:	60eb      	str	r3, [r5, #12]
 800344a:	cc03      	ldmia	r4!, {r0, r1}
 800344c:	6128      	str	r0, [r5, #16]
 800344e:	6169      	str	r1, [r5, #20]
 8003450:	8823      	ldrh	r3, [r4, #0]
 8003452:	832b      	strh	r3, [r5, #24]
  strcat(frontpage, "Content-Lenght: 398\r\n");
 8003454:	48b7      	ldr	r0, [pc, #732]	; (8003734 <web_def+0xde0>)
 8003456:	f7fc fecd 	bl	80001f4 <strlen>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	4bb5      	ldr	r3, [pc, #724]	; (8003734 <web_def+0xde0>)
 8003460:	4413      	add	r3, r2
 8003462:	4ab7      	ldr	r2, [pc, #732]	; (8003740 <web_def+0xdec>)
 8003464:	461d      	mov	r5, r3
 8003466:	4614      	mov	r4, r2
 8003468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346a:	6028      	str	r0, [r5, #0]
 800346c:	6069      	str	r1, [r5, #4]
 800346e:	60aa      	str	r2, [r5, #8]
 8003470:	60eb      	str	r3, [r5, #12]
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	6128      	str	r0, [r5, #16]
 8003476:	88a3      	ldrh	r3, [r4, #4]
 8003478:	82ab      	strh	r3, [r5, #20]
  strcat(frontpage, "Connection: close\r\n\r\n");
 800347a:	48ae      	ldr	r0, [pc, #696]	; (8003734 <web_def+0xde0>)
 800347c:	f7fc feba 	bl	80001f4 <strlen>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	4bab      	ldr	r3, [pc, #684]	; (8003734 <web_def+0xde0>)
 8003486:	4413      	add	r3, r2
 8003488:	4aae      	ldr	r2, [pc, #696]	; (8003744 <web_def+0xdf0>)
 800348a:	461d      	mov	r5, r3
 800348c:	4614      	mov	r4, r2
 800348e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003490:	6028      	str	r0, [r5, #0]
 8003492:	6069      	str	r1, [r5, #4]
 8003494:	60aa      	str	r2, [r5, #8]
 8003496:	60eb      	str	r3, [r5, #12]
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	6128      	str	r0, [r5, #16]
 800349c:	88a3      	ldrh	r3, [r4, #4]
 800349e:	82ab      	strh	r3, [r5, #20]
  strcat(frontpage, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<html lang=\"pl\">");
 80034a0:	48a4      	ldr	r0, [pc, #656]	; (8003734 <web_def+0xde0>)
 80034a2:	f7fc fea7 	bl	80001f4 <strlen>
 80034a6:	4603      	mov	r3, r0
 80034a8:	461a      	mov	r2, r3
 80034aa:	4ba2      	ldr	r3, [pc, #648]	; (8003734 <web_def+0xde0>)
 80034ac:	4413      	add	r3, r2
 80034ae:	4aa6      	ldr	r2, [pc, #664]	; (8003748 <web_def+0xdf4>)
 80034b0:	4614      	mov	r4, r2
 80034b2:	469c      	mov	ip, r3
 80034b4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80034b8:	4665      	mov	r5, ip
 80034ba:	4626      	mov	r6, r4
 80034bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034be:	6028      	str	r0, [r5, #0]
 80034c0:	6069      	str	r1, [r5, #4]
 80034c2:	60aa      	str	r2, [r5, #8]
 80034c4:	60eb      	str	r3, [r5, #12]
 80034c6:	3410      	adds	r4, #16
 80034c8:	f10c 0c10 	add.w	ip, ip, #16
 80034cc:	4574      	cmp	r4, lr
 80034ce:	d1f3      	bne.n	80034b8 <web_def+0xb64>
 80034d0:	4662      	mov	r2, ip
 80034d2:	4623      	mov	r3, r4
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	8013      	strh	r3, [r2, #0]
  strcat(frontpage, "<title>Dioda RGB</title>\r\n</head>\r\n");
 80034d8:	4896      	ldr	r0, [pc, #600]	; (8003734 <web_def+0xde0>)
 80034da:	f7fc fe8b 	bl	80001f4 <strlen>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b94      	ldr	r3, [pc, #592]	; (8003734 <web_def+0xde0>)
 80034e4:	4413      	add	r3, r2
 80034e6:	4a99      	ldr	r2, [pc, #612]	; (800374c <web_def+0xdf8>)
 80034e8:	4614      	mov	r4, r2
 80034ea:	469c      	mov	ip, r3
 80034ec:	f104 0e20 	add.w	lr, r4, #32
 80034f0:	4665      	mov	r5, ip
 80034f2:	4626      	mov	r6, r4
 80034f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034f6:	6028      	str	r0, [r5, #0]
 80034f8:	6069      	str	r1, [r5, #4]
 80034fa:	60aa      	str	r2, [r5, #8]
 80034fc:	60eb      	str	r3, [r5, #12]
 80034fe:	3410      	adds	r4, #16
 8003500:	f10c 0c10 	add.w	ip, ip, #16
 8003504:	4574      	cmp	r4, lr
 8003506:	d1f3      	bne.n	80034f0 <web_def+0xb9c>
 8003508:	4663      	mov	r3, ip
 800350a:	4622      	mov	r2, r4
 800350c:	6810      	ldr	r0, [r2, #0]
 800350e:	6018      	str	r0, [r3, #0]
  strcat(frontpage, "<body>\r\n<form method=\"get\">\r\n");
 8003510:	4888      	ldr	r0, [pc, #544]	; (8003734 <web_def+0xde0>)
 8003512:	f7fc fe6f 	bl	80001f4 <strlen>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	4b86      	ldr	r3, [pc, #536]	; (8003734 <web_def+0xde0>)
 800351c:	4413      	add	r3, r2
 800351e:	4a8c      	ldr	r2, [pc, #560]	; (8003750 <web_def+0xdfc>)
 8003520:	461d      	mov	r5, r3
 8003522:	4614      	mov	r4, r2
 8003524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003526:	6028      	str	r0, [r5, #0]
 8003528:	6069      	str	r1, [r5, #4]
 800352a:	60aa      	str	r2, [r5, #8]
 800352c:	60eb      	str	r3, [r5, #12]
 800352e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003530:	6128      	str	r0, [r5, #16]
 8003532:	6169      	str	r1, [r5, #20]
 8003534:	61aa      	str	r2, [r5, #24]
 8003536:	8823      	ldrh	r3, [r4, #0]
 8003538:	83ab      	strh	r3, [r5, #28]
  //strcat(frontpage,"<form><label for=\"username\">Username:</label><br><input type=\"text\" id=\"username\" name=\"username\"><br><label for=\"pwd\">Password:</label><br><input type=\"password\" id=\"pwd\" name=\"pwd\"><br><br><input type=\"submit\" value=\"loguj\"> </form>");
  strcat(frontpage, "<p><b>Login: </b><input type=\"text\"");
 800353a:	487e      	ldr	r0, [pc, #504]	; (8003734 <web_def+0xde0>)
 800353c:	f7fc fe5a 	bl	80001f4 <strlen>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <web_def+0xde0>)
 8003546:	4413      	add	r3, r2
 8003548:	4a82      	ldr	r2, [pc, #520]	; (8003754 <web_def+0xe00>)
 800354a:	4614      	mov	r4, r2
 800354c:	469c      	mov	ip, r3
 800354e:	f104 0e20 	add.w	lr, r4, #32
 8003552:	4665      	mov	r5, ip
 8003554:	4626      	mov	r6, r4
 8003556:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003558:	6028      	str	r0, [r5, #0]
 800355a:	6069      	str	r1, [r5, #4]
 800355c:	60aa      	str	r2, [r5, #8]
 800355e:	60eb      	str	r3, [r5, #12]
 8003560:	3410      	adds	r4, #16
 8003562:	f10c 0c10 	add.w	ip, ip, #16
 8003566:	4574      	cmp	r4, lr
 8003568:	d1f3      	bne.n	8003552 <web_def+0xbfe>
 800356a:	4663      	mov	r3, ip
 800356c:	4622      	mov	r2, r4
 800356e:	6810      	ldr	r0, [r2, #0]
 8003570:	6018      	str	r0, [r3, #0]
  strcat(frontpage, " name=\"login\" value=\"\" /></p>\r\n");
 8003572:	4870      	ldr	r0, [pc, #448]	; (8003734 <web_def+0xde0>)
 8003574:	f7fc fe3e 	bl	80001f4 <strlen>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <web_def+0xde0>)
 800357e:	4413      	add	r3, r2
 8003580:	4a75      	ldr	r2, [pc, #468]	; (8003758 <web_def+0xe04>)
 8003582:	461c      	mov	r4, r3
 8003584:	4615      	mov	r5, r2
 8003586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003588:	6020      	str	r0, [r4, #0]
 800358a:	6061      	str	r1, [r4, #4]
 800358c:	60a2      	str	r2, [r4, #8]
 800358e:	60e3      	str	r3, [r4, #12]
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	6120      	str	r0, [r4, #16]
 8003594:	6161      	str	r1, [r4, #20]
 8003596:	61a2      	str	r2, [r4, #24]
 8003598:	61e3      	str	r3, [r4, #28]
  strcat(frontpage, "<p><b>Haslo:</b> <input type=\"password\"");
 800359a:	4866      	ldr	r0, [pc, #408]	; (8003734 <web_def+0xde0>)
 800359c:	f7fc fe2a 	bl	80001f4 <strlen>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b63      	ldr	r3, [pc, #396]	; (8003734 <web_def+0xde0>)
 80035a6:	4413      	add	r3, r2
 80035a8:	4a6c      	ldr	r2, [pc, #432]	; (800375c <web_def+0xe08>)
 80035aa:	4614      	mov	r4, r2
 80035ac:	469c      	mov	ip, r3
 80035ae:	f104 0e20 	add.w	lr, r4, #32
 80035b2:	4665      	mov	r5, ip
 80035b4:	4626      	mov	r6, r4
 80035b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035b8:	6028      	str	r0, [r5, #0]
 80035ba:	6069      	str	r1, [r5, #4]
 80035bc:	60aa      	str	r2, [r5, #8]
 80035be:	60eb      	str	r3, [r5, #12]
 80035c0:	3410      	adds	r4, #16
 80035c2:	f10c 0c10 	add.w	ip, ip, #16
 80035c6:	4574      	cmp	r4, lr
 80035c8:	d1f3      	bne.n	80035b2 <web_def+0xc5e>
 80035ca:	4662      	mov	r2, ip
 80035cc:	4623      	mov	r3, r4
 80035ce:	cb03      	ldmia	r3!, {r0, r1}
 80035d0:	6010      	str	r0, [r2, #0]
 80035d2:	6051      	str	r1, [r2, #4]
  strcat(frontpage, " name=\"haslo\" value=\"\" /></p>\r\n");
 80035d4:	4857      	ldr	r0, [pc, #348]	; (8003734 <web_def+0xde0>)
 80035d6:	f7fc fe0d 	bl	80001f4 <strlen>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <web_def+0xde0>)
 80035e0:	4413      	add	r3, r2
 80035e2:	4a5f      	ldr	r2, [pc, #380]	; (8003760 <web_def+0xe0c>)
 80035e4:	461c      	mov	r4, r3
 80035e6:	4615      	mov	r5, r2
 80035e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ea:	6020      	str	r0, [r4, #0]
 80035ec:	6061      	str	r1, [r4, #4]
 80035ee:	60a2      	str	r2, [r4, #8]
 80035f0:	60e3      	str	r3, [r4, #12]
 80035f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f4:	6120      	str	r0, [r4, #16]
 80035f6:	6161      	str	r1, [r4, #20]
 80035f8:	61a2      	str	r2, [r4, #24]
 80035fa:	61e3      	str	r3, [r4, #28]
  strcat(frontpage, "<input type=\"submit\" value=\"LOGUJ\" />\r\n");
 80035fc:	484d      	ldr	r0, [pc, #308]	; (8003734 <web_def+0xde0>)
 80035fe:	f7fc fdf9 	bl	80001f4 <strlen>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <web_def+0xde0>)
 8003608:	4413      	add	r3, r2
 800360a:	4a56      	ldr	r2, [pc, #344]	; (8003764 <web_def+0xe10>)
 800360c:	4614      	mov	r4, r2
 800360e:	469c      	mov	ip, r3
 8003610:	f104 0e20 	add.w	lr, r4, #32
 8003614:	4665      	mov	r5, ip
 8003616:	4626      	mov	r6, r4
 8003618:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800361a:	6028      	str	r0, [r5, #0]
 800361c:	6069      	str	r1, [r5, #4]
 800361e:	60aa      	str	r2, [r5, #8]
 8003620:	60eb      	str	r3, [r5, #12]
 8003622:	3410      	adds	r4, #16
 8003624:	f10c 0c10 	add.w	ip, ip, #16
 8003628:	4574      	cmp	r4, lr
 800362a:	d1f3      	bne.n	8003614 <web_def+0xcc0>
 800362c:	4662      	mov	r2, ip
 800362e:	4623      	mov	r3, r4
 8003630:	cb03      	ldmia	r3!, {r0, r1}
 8003632:	6010      	str	r0, [r2, #0]
 8003634:	6051      	str	r1, [r2, #4]
  strcat(frontpage, "</form>\r\n</body>\r\n</html>");
 8003636:	483f      	ldr	r0, [pc, #252]	; (8003734 <web_def+0xde0>)
 8003638:	f7fc fddc 	bl	80001f4 <strlen>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <web_def+0xde0>)
 8003642:	4413      	add	r3, r2
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <web_def+0xddc>)
 8003646:	461d      	mov	r5, r3
 8003648:	4614      	mov	r4, r2
 800364a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364c:	6028      	str	r0, [r5, #0]
 800364e:	6069      	str	r1, [r5, #4]
 8003650:	60aa      	str	r2, [r5, #8]
 8003652:	60eb      	str	r3, [r5, #12]
 8003654:	cc03      	ldmia	r4!, {r0, r1}
 8003656:	6128      	str	r0, [r5, #16]
 8003658:	6169      	str	r1, [r5, #20]
 800365a:	8823      	ldrh	r3, [r4, #0]
 800365c:	832b      	strh	r3, [r5, #24]

////// error

  strcpy(error, "HTTP/1.1 404 Not Found\r\n");
 800365e:	4a42      	ldr	r2, [pc, #264]	; (8003768 <web_def+0xe14>)
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <web_def+0xe18>)
 8003662:	4615      	mov	r5, r2
 8003664:	461c      	mov	r4, r3
 8003666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003668:	6028      	str	r0, [r5, #0]
 800366a:	6069      	str	r1, [r5, #4]
 800366c:	60aa      	str	r2, [r5, #8]
 800366e:	60eb      	str	r3, [r5, #12]
 8003670:	cc03      	ldmia	r4!, {r0, r1}
 8003672:	6128      	str	r0, [r5, #16]
 8003674:	6169      	str	r1, [r5, #20]
 8003676:	7823      	ldrb	r3, [r4, #0]
 8003678:	762b      	strb	r3, [r5, #24]
  strcat(error, "Content-Type: text/html\r\n");
 800367a:	483b      	ldr	r0, [pc, #236]	; (8003768 <web_def+0xe14>)
 800367c:	f7fc fdba 	bl	80001f4 <strlen>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b38      	ldr	r3, [pc, #224]	; (8003768 <web_def+0xe14>)
 8003686:	4413      	add	r3, r2
 8003688:	4a2c      	ldr	r2, [pc, #176]	; (800373c <web_def+0xde8>)
 800368a:	461d      	mov	r5, r3
 800368c:	4614      	mov	r4, r2
 800368e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003690:	6028      	str	r0, [r5, #0]
 8003692:	6069      	str	r1, [r5, #4]
 8003694:	60aa      	str	r2, [r5, #8]
 8003696:	60eb      	str	r3, [r5, #12]
 8003698:	cc03      	ldmia	r4!, {r0, r1}
 800369a:	6128      	str	r0, [r5, #16]
 800369c:	6169      	str	r1, [r5, #20]
 800369e:	8823      	ldrh	r3, [r4, #0]
 80036a0:	832b      	strh	r3, [r5, #24]
  strcat(error, "Content-Lenght: 48\r\n");
 80036a2:	4831      	ldr	r0, [pc, #196]	; (8003768 <web_def+0xe14>)
 80036a4:	f7fc fda6 	bl	80001f4 <strlen>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <web_def+0xe14>)
 80036ae:	4413      	add	r3, r2
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <web_def+0xe1c>)
 80036b2:	461d      	mov	r5, r3
 80036b4:	4614      	mov	r4, r2
 80036b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b8:	6028      	str	r0, [r5, #0]
 80036ba:	6069      	str	r1, [r5, #4]
 80036bc:	60aa      	str	r2, [r5, #8]
 80036be:	60eb      	str	r3, [r5, #12]
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	6128      	str	r0, [r5, #16]
 80036c4:	7923      	ldrb	r3, [r4, #4]
 80036c6:	752b      	strb	r3, [r5, #20]
  strcat(error, "Connection: close\r\n\r\n");
 80036c8:	4827      	ldr	r0, [pc, #156]	; (8003768 <web_def+0xe14>)
 80036ca:	f7fc fd93 	bl	80001f4 <strlen>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <web_def+0xe14>)
 80036d4:	4413      	add	r3, r2
 80036d6:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <web_def+0xdf0>)
 80036d8:	461d      	mov	r5, r3
 80036da:	4614      	mov	r4, r2
 80036dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036de:	6028      	str	r0, [r5, #0]
 80036e0:	6069      	str	r1, [r5, #4]
 80036e2:	60aa      	str	r2, [r5, #8]
 80036e4:	60eb      	str	r3, [r5, #12]
 80036e6:	6820      	ldr	r0, [r4, #0]
 80036e8:	6128      	str	r0, [r5, #16]
 80036ea:	88a3      	ldrh	r3, [r4, #4]
 80036ec:	82ab      	strh	r3, [r5, #20]
  strcat(error, "<html><body><h1>404 Not Foundxdd</h1></body></html>");
 80036ee:	481e      	ldr	r0, [pc, #120]	; (8003768 <web_def+0xe14>)
 80036f0:	f7fc fd80 	bl	80001f4 <strlen>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <web_def+0xe14>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <web_def+0xe20>)
 80036fe:	4614      	mov	r4, r2
 8003700:	469c      	mov	ip, r3
 8003702:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003706:	4665      	mov	r5, ip
 8003708:	4626      	mov	r6, r4
 800370a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800370c:	6028      	str	r0, [r5, #0]
 800370e:	6069      	str	r1, [r5, #4]
 8003710:	60aa      	str	r2, [r5, #8]
 8003712:	60eb      	str	r3, [r5, #12]
 8003714:	3410      	adds	r4, #16
 8003716:	f10c 0c10 	add.w	ip, ip, #16
 800371a:	4574      	cmp	r4, lr
 800371c:	d1f3      	bne.n	8003706 <web_def+0xdb2>
 800371e:	4663      	mov	r3, ip
 8003720:	4622      	mov	r2, r4
 8003722:	6810      	ldr	r0, [r2, #0]
 8003724:	6018      	str	r0, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372a:	bf00      	nop
 800372c:	200036e8 	.word	0x200036e8
 8003730:	0800b278 	.word	0x0800b278
 8003734:	200038e8 	.word	0x200038e8
 8003738:	0800b294 	.word	0x0800b294
 800373c:	0800ad9c 	.word	0x0800ad9c
 8003740:	0800adb8 	.word	0x0800adb8
 8003744:	0800add0 	.word	0x0800add0
 8003748:	0800ade8 	.word	0x0800ade8
 800374c:	0800ae1c 	.word	0x0800ae1c
 8003750:	0800ae40 	.word	0x0800ae40
 8003754:	0800b2a8 	.word	0x0800b2a8
 8003758:	0800b2cc 	.word	0x0800b2cc
 800375c:	0800b2ec 	.word	0x0800b2ec
 8003760:	0800b314 	.word	0x0800b314
 8003764:	0800b334 	.word	0x0800b334
 8003768:	200034d4 	.word	0x200034d4
 800376c:	0800b35c 	.word	0x0800b35c
 8003770:	0800b378 	.word	0x0800b378
 8003774:	0800b390 	.word	0x0800b390

08003778 <wire_init>:
#include <ds18b20.h>



HAL_StatusTypeDef wire_init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(TIMER);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <wire_init+0x10>)
 800377e:	f001 fe53 	bl	8005428 <HAL_TIM_Base_Start>
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20003b24 	.word	0x20003b24

0800378c <delay_us>:

static void delay_us(uint32_t us)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(TIMER, 0);
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <delay_us+0x2c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(TIMER) < us) {}
 800379c:	bf00      	nop
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <delay_us+0x2c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d8f9      	bhi.n	800379e <delay_us+0x12>
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	20003b24 	.word	0x20003b24

080037bc <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2120      	movs	r1, #32
 80037c6:	4811      	ldr	r0, [pc, #68]	; (800380c <wire_reset+0x50>)
 80037c8:	f000 fcfe 	bl	80041c8 <HAL_GPIO_WritePin>
  delay_us(480);
 80037cc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80037d0:	f7ff ffdc 	bl	800378c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80037d4:	2201      	movs	r2, #1
 80037d6:	2120      	movs	r1, #32
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <wire_reset+0x50>)
 80037da:	f000 fcf5 	bl	80041c8 <HAL_GPIO_WritePin>
  delay_us(70);
 80037de:	2046      	movs	r0, #70	; 0x46
 80037e0:	f7ff ffd4 	bl	800378c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80037e4:	2120      	movs	r1, #32
 80037e6:	4809      	ldr	r0, [pc, #36]	; (800380c <wire_reset+0x50>)
 80037e8:	f000 fcd6 	bl	8004198 <HAL_GPIO_ReadPin>
 80037ec:	4603      	mov	r3, r0
 80037ee:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80037f0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80037f4:	f7ff ffca 	bl	800378c <delay_us>

  if (rc == 0)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <wire_reset+0x46>
    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40020400 	.word	0x40020400

08003810 <read_bit>:

static int read_bit(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8003816:	2200      	movs	r2, #0
 8003818:	2120      	movs	r1, #32
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <read_bit+0x44>)
 800381c:	f000 fcd4 	bl	80041c8 <HAL_GPIO_WritePin>
  delay_us(6);
 8003820:	2006      	movs	r0, #6
 8003822:	f7ff ffb3 	bl	800378c <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8003826:	2201      	movs	r2, #1
 8003828:	2120      	movs	r1, #32
 800382a:	480a      	ldr	r0, [pc, #40]	; (8003854 <read_bit+0x44>)
 800382c:	f000 fccc 	bl	80041c8 <HAL_GPIO_WritePin>
  delay_us(9);
 8003830:	2009      	movs	r0, #9
 8003832:	f7ff ffab 	bl	800378c <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8003836:	2120      	movs	r1, #32
 8003838:	4806      	ldr	r0, [pc, #24]	; (8003854 <read_bit+0x44>)
 800383a:	f000 fcad 	bl	8004198 <HAL_GPIO_ReadPin>
 800383e:	4603      	mov	r3, r0
 8003840:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8003842:	2037      	movs	r0, #55	; 0x37
 8003844:	f7ff ffa2 	bl	800378c <delay_us>
  return rc;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40020400 	.word	0x40020400

08003858 <wire_read>:

uint8_t wire_read(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	e00e      	b.n	8003886 <wire_read+0x2e>
    value >>= 1;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800386e:	f7ff ffcf 	bl	8003810 <read_bit>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <wire_read+0x28>
      value |= 0x80;
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800387e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b07      	cmp	r3, #7
 800388a:	dded      	ble.n	8003868 <wire_read+0x10>
  }
  return value;
 800388c:	79fb      	ldrb	r3, [r7, #7]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <write_bit>:

static void write_bit(int value)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (value) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d010      	beq.n	80038c8 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2120      	movs	r1, #32
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <write_bit+0x58>)
 80038ac:	f000 fc8c 	bl	80041c8 <HAL_GPIO_WritePin>
    delay_us(6);
 80038b0:	2006      	movs	r0, #6
 80038b2:	f7ff ff6b 	bl	800378c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80038b6:	2201      	movs	r2, #1
 80038b8:	2120      	movs	r1, #32
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <write_bit+0x58>)
 80038bc:	f000 fc84 	bl	80041c8 <HAL_GPIO_WritePin>
    delay_us(64);
 80038c0:	2040      	movs	r0, #64	; 0x40
 80038c2:	f7ff ff63 	bl	800378c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80038c6:	e00f      	b.n	80038e8 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2120      	movs	r1, #32
 80038cc:	4808      	ldr	r0, [pc, #32]	; (80038f0 <write_bit+0x58>)
 80038ce:	f000 fc7b 	bl	80041c8 <HAL_GPIO_WritePin>
    delay_us(60);
 80038d2:	203c      	movs	r0, #60	; 0x3c
 80038d4:	f7ff ff5a 	bl	800378c <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80038d8:	2201      	movs	r2, #1
 80038da:	2120      	movs	r1, #32
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <write_bit+0x58>)
 80038de:	f000 fc73 	bl	80041c8 <HAL_GPIO_WritePin>
    delay_us(10);
 80038e2:	200a      	movs	r0, #10
 80038e4:	f7ff ff52 	bl	800378c <delay_us>
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40020400 	.word	0x40020400

080038f4 <wire_write>:

void wire_write(uint8_t byte)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e00b      	b.n	800391c <wire_write+0x28>
    write_bit(byte & 0x01);
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ffc4 	bl	8003898 <write_bit>
    byte >>= 1;
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3301      	adds	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b07      	cmp	r3, #7
 8003920:	ddf0      	ble.n	8003904 <wire_write+0x10>
  }
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	460a      	mov	r2, r1
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	4613      	mov	r3, r2
 800393a:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e016      	b.n	8003970 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8003942:	79fa      	ldrb	r2, [r7, #7]
 8003944:	79bb      	ldrb	r3, [r7, #6]
 8003946:	4053      	eors	r3, r2
 8003948:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <byte_crc+0x38>
      crc ^= 0x8c;
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003960:	43db      	mvns	r3, r3
 8003962:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8003964:	79bb      	ldrb	r3, [r7, #6]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b07      	cmp	r3, #7
 8003974:	dde5      	ble.n	8003942 <byte_crc+0x16>
  }
  return crc;
 8003976:	79fb      	ldrb	r3, [r7, #7]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	e00d      	b.n	80039b4 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	7afb      	ldrb	r3, [r7, #11]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ffc1 	bl	800392c <byte_crc>
 80039aa:	4603      	mov	r3, r0
 80039ac:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dbed      	blt.n	8003998 <wire_crc+0x14>

    return crc;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039cc:	480d      	ldr	r0, [pc, #52]	; (8003a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039ce:	490e      	ldr	r1, [pc, #56]	; (8003a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039d0:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d4:	e002      	b.n	80039dc <LoopCopyDataInit>

080039d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039da:	3304      	adds	r3, #4

080039dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e0:	d3f9      	bcc.n	80039d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e2:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039e4:	4c0b      	ldr	r4, [pc, #44]	; (8003a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e8:	e001      	b.n	80039ee <LoopFillZerobss>

080039ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039ec:	3204      	adds	r2, #4

080039ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f0:	d3fb      	bcc.n	80039ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039f2:	f7fe fad3 	bl	8001f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039f6:	f004 f987 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039fa:	f7fd fe45 	bl	8001688 <main>
  bx  lr    
 80039fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a08:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003a0c:	0800b814 	.word	0x0800b814
  ldr r2, =_sbss
 8003a10:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003a14:	20003bc4 	.word	0x20003bc4

08003a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a18:	e7fe      	b.n	8003a18 <ADC_IRQHandler>
	...

08003a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_Init+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <HAL_Init+0x40>)
 8003a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_Init+0x40>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_Init+0x40>)
 8003a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_Init+0x40>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <HAL_Init+0x40>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a44:	2003      	movs	r0, #3
 8003a46:	f000 f94f 	bl	8003ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a4a:	200f      	movs	r0, #15
 8003a4c:	f000 f808 	bl	8003a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a50:	f7fe f970 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00

08003a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a68:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_InitTick+0x54>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_InitTick+0x58>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f967 	bl	8003d52 <HAL_SYSTICK_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00e      	b.n	8003aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d80a      	bhi.n	8003aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a94:	2200      	movs	r2, #0
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	f000 f92f 	bl	8003cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa0:	4a06      	ldr	r2, [pc, #24]	; (8003abc <HAL_InitTick+0x5c>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000010 	.word	0x20000010
 8003ab8:	20000018 	.word	0x20000018
 8003abc:	20000014 	.word	0x20000014

08003ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_IncTick+0x20>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_IncTick+0x24>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HAL_IncTick+0x24>)
 8003ad2:	6013      	str	r3, [r2, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000018 	.word	0x20000018
 8003ae4:	20003bb0 	.word	0x20003bb0

08003ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return uwTick;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_GetTick+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20003bb0 	.word	0x20003bb0

08003b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff ffee 	bl	8003ae8 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d005      	beq.n	8003b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_Delay+0x44>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b26:	bf00      	nop
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d8f7      	bhi.n	8003b28 <HAL_Delay+0x28>
  {
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000018 	.word	0x20000018

08003b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	60d3      	str	r3, [r2, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0307 	and.w	r3, r3, #7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db0b      	blt.n	8003bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4907      	ldr	r1, [pc, #28]	; (8003be4 <__NVIC_EnableIRQ+0x38>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43d9      	mvns	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	4313      	orrs	r3, r2
         );
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	; 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb4:	d301      	bcc.n	8003cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <SysTick_Config+0x40>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f7ff ff8e 	bl	8003be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <SysTick_Config+0x40>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SysTick_Config+0x40>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff29 	bl	8003b48 <__NVIC_SetPriorityGrouping>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d10:	f7ff ff3e 	bl	8003b90 <__NVIC_GetPriorityGrouping>
 8003d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff8e 	bl	8003c3c <NVIC_EncodePriority>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff5d 	bl	8003be8 <__NVIC_SetPriority>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff31 	bl	8003bac <__NVIC_EnableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffa2 	bl	8003ca4 <SysTick_Config>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7ff feb6 	bl	8003ae8 <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d008      	beq.n	8003d9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e052      	b.n	8003e42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0216 	bic.w	r2, r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <HAL_DMA_Abort+0x62>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0208 	bic.w	r2, r2, #8
 8003dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dec:	e013      	b.n	8003e16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dee:	f7ff fe7b 	bl	8003ae8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d90c      	bls.n	8003e16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e015      	b.n	8003e42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e4      	bne.n	8003dee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	223f      	movs	r2, #63	; 0x3f
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e00c      	b.n	8003e82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2205      	movs	r2, #5
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e159      	b.n	8004160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eac:	2201      	movs	r2, #1
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	f040 8148 	bne.w	800415a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d005      	beq.n	8003ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d130      	bne.n	8003f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	2203      	movs	r2, #3
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 0201 	and.w	r2, r3, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d017      	beq.n	8003f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d123      	bne.n	8003fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	08da      	lsrs	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3208      	adds	r2, #8
 8003f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	69b9      	ldr	r1, [r7, #24]
 8003fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0203 	and.w	r2, r3, #3
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a2 	beq.w	800415a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_GPIO_Init+0x2e8>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	4a56      	ldr	r2, [pc, #344]	; (8004178 <HAL_GPIO_Init+0x2e8>)
 8004020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004024:	6453      	str	r3, [r2, #68]	; 0x44
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_GPIO_Init+0x2e8>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004032:	4a52      	ldr	r2, [pc, #328]	; (800417c <HAL_GPIO_Init+0x2ec>)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3302      	adds	r3, #2
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a49      	ldr	r2, [pc, #292]	; (8004180 <HAL_GPIO_Init+0x2f0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x202>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a48      	ldr	r2, [pc, #288]	; (8004184 <HAL_GPIO_Init+0x2f4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x1fe>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a47      	ldr	r2, [pc, #284]	; (8004188 <HAL_GPIO_Init+0x2f8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x1fa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a46      	ldr	r2, [pc, #280]	; (800418c <HAL_GPIO_Init+0x2fc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x1f6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a45      	ldr	r2, [pc, #276]	; (8004190 <HAL_GPIO_Init+0x300>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x1f2>
 800407e:	2304      	movs	r3, #4
 8004080:	e008      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004082:	2307      	movs	r3, #7
 8004084:	e006      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004086:	2303      	movs	r3, #3
 8004088:	e004      	b.n	8004094 <HAL_GPIO_Init+0x204>
 800408a:	2302      	movs	r3, #2
 800408c:	e002      	b.n	8004094 <HAL_GPIO_Init+0x204>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004092:	2300      	movs	r3, #0
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f002 0203 	and.w	r2, r2, #3
 800409a:	0092      	lsls	r2, r2, #2
 800409c:	4093      	lsls	r3, r2
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a4:	4935      	ldr	r1, [pc, #212]	; (800417c <HAL_GPIO_Init+0x2ec>)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b2:	4b38      	ldr	r3, [pc, #224]	; (8004194 <HAL_GPIO_Init+0x304>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d6:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <HAL_GPIO_Init+0x304>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_GPIO_Init+0x304>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004100:	4a24      	ldr	r2, [pc, #144]	; (8004194 <HAL_GPIO_Init+0x304>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_GPIO_Init+0x304>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_GPIO_Init+0x304>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_GPIO_Init+0x304>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004154:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <HAL_GPIO_Init+0x304>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	f67f aea2 	bls.w	8003eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	40013800 	.word	0x40013800
 8004180:	40020000 	.word	0x40020000
 8004184:	40020400 	.word	0x40020400
 8004188:	40020800 	.word	0x40020800
 800418c:	40020c00 	.word	0x40020c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40013c00 	.word	0x40013c00

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f9d8 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40013c00 	.word	0x40013c00

0800422c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e264      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d075      	beq.n	8004336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424a:	4ba3      	ldr	r3, [pc, #652]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00c      	beq.n	8004270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004256:	4ba0      	ldr	r3, [pc, #640]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800425e:	2b08      	cmp	r3, #8
 8004260:	d112      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004262:	4b9d      	ldr	r3, [pc, #628]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426e:	d10b      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	4b99      	ldr	r3, [pc, #612]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d05b      	beq.n	8004334 <HAL_RCC_OscConfig+0x108>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d157      	bne.n	8004334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e23f      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_OscConfig+0x74>
 8004292:	4b91      	ldr	r3, [pc, #580]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a90      	ldr	r2, [pc, #576]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e01d      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b8b      	ldr	r3, [pc, #556]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a8a      	ldr	r2, [pc, #552]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a87      	ldr	r2, [pc, #540]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042c4:	4b84      	ldr	r3, [pc, #528]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7ff fc00 	bl	8003ae8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7ff fbfc 	bl	8003ae8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e204      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b76      	ldr	r3, [pc, #472]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0xc0>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff fbec 	bl	8003ae8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004314:	f7ff fbe8 	bl	8003ae8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e1f0      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	4b6c      	ldr	r3, [pc, #432]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0xe8>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004356:	2b08      	cmp	r3, #8
 8004358:	d11c      	bne.n	8004394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435a:	4b5f      	ldr	r3, [pc, #380]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	4b5c      	ldr	r3, [pc, #368]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_RCC_OscConfig+0x152>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e1c4      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437e:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4952      	ldr	r1, [pc, #328]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	e03a      	b.n	800440a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <HAL_RCC_OscConfig+0x2b0>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7ff fba1 	bl	8003ae8 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043aa:	f7ff fb9d 	bl	8003ae8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e1a5      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c8:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4940      	ldr	r1, [pc, #256]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
 80043dc:	e015      	b.n	800440a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <HAL_RCC_OscConfig+0x2b0>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7ff fb80 	bl	8003ae8 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ec:	f7ff fb7c 	bl	8003ae8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e184      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d030      	beq.n	8004478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <HAL_RCC_OscConfig+0x2b4>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7ff fb60 	bl	8003ae8 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442c:	f7ff fb5c 	bl	8003ae8 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e164      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x200>
 800444a:	e015      	b.n	8004478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444c:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <HAL_RCC_OscConfig+0x2b4>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004452:	f7ff fb49 	bl	8003ae8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445a:	f7ff fb45 	bl	8003ae8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e14d      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800446e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a0 	beq.w	80045c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_OscConfig+0x2b8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d121      	bne.n	8004506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCC_OscConfig+0x2b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <HAL_RCC_OscConfig+0x2b8>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7ff fb0b 	bl	8003ae8 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	e011      	b.n	80044fa <HAL_RCC_OscConfig+0x2ce>
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	42470000 	.word	0x42470000
 80044e0:	42470e80 	.word	0x42470e80
 80044e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7ff fafe 	bl	8003ae8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e106      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b85      	ldr	r3, [pc, #532]	; (8004710 <HAL_RCC_OscConfig+0x4e4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x2f0>
 800450e:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a80      	ldr	r2, [pc, #512]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	e01c      	b.n	8004556 <HAL_RCC_OscConfig+0x32a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b05      	cmp	r3, #5
 8004522:	d10c      	bne.n	800453e <HAL_RCC_OscConfig+0x312>
 8004524:	4b7b      	ldr	r3, [pc, #492]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a7a      	ldr	r2, [pc, #488]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	f043 0304 	orr.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	4b78      	ldr	r3, [pc, #480]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a77      	ldr	r2, [pc, #476]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
 800453c:	e00b      	b.n	8004556 <HAL_RCC_OscConfig+0x32a>
 800453e:	4b75      	ldr	r3, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a74      	ldr	r2, [pc, #464]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
 800454a:	4b72      	ldr	r3, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a71      	ldr	r2, [pc, #452]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	f023 0304 	bic.w	r3, r3, #4
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d015      	beq.n	800458a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7ff fac3 	bl	8003ae8 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7ff fabf 	bl	8003ae8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	; 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0c5      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ee      	beq.n	8004566 <HAL_RCC_OscConfig+0x33a>
 8004588:	e014      	b.n	80045b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7ff faad 	bl	8003ae8 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7ff faa9 	bl	8003ae8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0af      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ee      	bne.n	8004592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ba:	4b56      	ldr	r3, [pc, #344]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a55      	ldr	r2, [pc, #340]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 809b 	beq.w	8004706 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d05c      	beq.n	8004696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d141      	bne.n	8004668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <HAL_RCC_OscConfig+0x4ec>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7ff fa7d 	bl	8003ae8 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f2:	f7ff fa79 	bl	8003ae8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e081      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004604:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	019b      	lsls	r3, r3, #6
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x4ec>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7ff fa52 	bl	8003ae8 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004648:	f7ff fa4e 	bl	8003ae8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e056      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x41c>
 8004666:	e04e      	b.n	8004706 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_OscConfig+0x4ec>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7ff fa3b 	bl	8003ae8 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004676:	f7ff fa37 	bl	8003ae8 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e03f      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x44a>
 8004694:	e037      	b.n	8004706 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e032      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <HAL_RCC_OscConfig+0x4e8>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d028      	beq.n	8004702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d121      	bne.n	8004702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d11a      	bne.n	8004702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40007000 	.word	0x40007000
 8004714:	40023800 	.word	0x40023800
 8004718:	42470060 	.word	0x42470060

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0cc      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d90c      	bls.n	8004758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0b8      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004770:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a58      	ldr	r2, [pc, #352]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004788:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a52      	ldr	r2, [pc, #328]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	4b50      	ldr	r3, [pc, #320]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	494d      	ldr	r1, [pc, #308]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d044      	beq.n	800483c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d119      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d003      	beq.n	80047da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e06f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e067      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4934      	ldr	r1, [pc, #208]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7ff f96c 	bl	8003ae8 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7ff f968 	bl	8003ae8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e04f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d20c      	bcs.n	8004864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e032      	b.n	80048ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4916      	ldr	r1, [pc, #88]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	490e      	ldr	r1, [pc, #56]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a2:	f000 f821 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 80048a6:	4602      	mov	r2, r0
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	490a      	ldr	r1, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	5ccb      	ldrb	r3, [r1, r3]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f8cc 	bl	8003a60 <HAL_InitTick>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023c00 	.word	0x40023c00
 80048d8:	40023800 	.word	0x40023800
 80048dc:	0800b3c4 	.word	0x0800b3c4
 80048e0:	20000010 	.word	0x20000010
 80048e4:	20000014 	.word	0x20000014

080048e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	2300      	movs	r3, #0
 80048fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004900:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b08      	cmp	r3, #8
 800490a:	d00d      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x40>
 800490c:	2b08      	cmp	r3, #8
 800490e:	f200 80bd 	bhi.w	8004a8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x34>
 8004916:	2b04      	cmp	r3, #4
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x3a>
 800491a:	e0b7      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800491e:	60bb      	str	r3, [r7, #8]
       break;
 8004920:	e0b7      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004922:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004924:	60bb      	str	r3, [r7, #8]
      break;
 8004926:	e0b4      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004928:	4b5d      	ldr	r3, [pc, #372]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004930:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004932:	4b5b      	ldr	r3, [pc, #364]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d04d      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	ea02 0800 	and.w	r8, r2, r0
 8004956:	ea03 0901 	and.w	r9, r3, r1
 800495a:	4640      	mov	r0, r8
 800495c:	4649      	mov	r1, r9
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	014b      	lsls	r3, r1, #5
 8004968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800496c:	0142      	lsls	r2, r0, #5
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	ebb0 0008 	subs.w	r0, r0, r8
 8004976:	eb61 0109 	sbc.w	r1, r1, r9
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	018b      	lsls	r3, r1, #6
 8004984:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004988:	0182      	lsls	r2, r0, #6
 800498a:	1a12      	subs	r2, r2, r0
 800498c:	eb63 0301 	sbc.w	r3, r3, r1
 8004990:	f04f 0000 	mov.w	r0, #0
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	00d9      	lsls	r1, r3, #3
 800499a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499e:	00d0      	lsls	r0, r2, #3
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	eb12 0208 	adds.w	r2, r2, r8
 80049a8:	eb43 0309 	adc.w	r3, r3, r9
 80049ac:	f04f 0000 	mov.w	r0, #0
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	0259      	lsls	r1, r3, #9
 80049b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049ba:	0250      	lsls	r0, r2, #9
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f7fc f954 	bl	8000c78 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4613      	mov	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e04a      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049da:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	ea02 0400 	and.w	r4, r2, r0
 80049f2:	ea03 0501 	and.w	r5, r3, r1
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	014b      	lsls	r3, r1, #5
 8004a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a08:	0142      	lsls	r2, r0, #5
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	1b00      	subs	r0, r0, r4
 8004a10:	eb61 0105 	sbc.w	r1, r1, r5
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	018b      	lsls	r3, r1, #6
 8004a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a22:	0182      	lsls	r2, r0, #6
 8004a24:	1a12      	subs	r2, r2, r0
 8004a26:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2a:	f04f 0000 	mov.w	r0, #0
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	00d9      	lsls	r1, r3, #3
 8004a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a38:	00d0      	lsls	r0, r2, #3
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	1912      	adds	r2, r2, r4
 8004a40:	eb45 0303 	adc.w	r3, r5, r3
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	0299      	lsls	r1, r3, #10
 8004a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a52:	0290      	lsls	r0, r2, #10
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	f7fc f908 	bl	8000c78 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	60bb      	str	r3, [r7, #8]
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a8e:	60bb      	str	r3, [r7, #8]
      break;
 8004a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a92:	68bb      	ldr	r3, [r7, #8]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000010 	.word	0x20000010

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	0800b3d4 	.word	0x0800b3d4

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af0:	f7ff ffdc 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0b5b      	lsrs	r3, r3, #13
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4903      	ldr	r1, [pc, #12]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	0800b3d4 	.word	0x0800b3d4

08004b14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d038      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b42:	f7fe ffd1 	bl	8003ae8 <HAL_GetTick>
 8004b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b4a:	f7fe ffcd 	bl	8003ae8 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0bd      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b5c:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	495a      	ldr	r1, [pc, #360]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b82:	4b57      	ldr	r3, [pc, #348]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b88:	f7fe ffae 	bl	8003ae8 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b90:	f7fe ffaa 	bl	8003ae8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e09a      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba2:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8083 	beq.w	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	4a47      	ldr	r2, [pc, #284]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bca:	6413      	str	r3, [r2, #64]	; 0x40
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a42      	ldr	r2, [pc, #264]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fe ff80 	bl	8003ae8 <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fe ff7c 	bl	8003ae8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e06c      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02f      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d028      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c30:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c38:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c3e:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d114      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe ff4a 	bl	8003ae8 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fe ff46 	bl	8003ae8 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e034      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c86:	d10d      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9c:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cae:	6093      	str	r3, [r2, #8]
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cbc:	4909      	ldr	r1, [pc, #36]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7d1a      	ldrb	r2, [r3, #20]
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004cd4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	42470068 	.word	0x42470068
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	42470e40 	.word	0x42470e40
 8004cf0:	424711e0 	.word	0x424711e0

08004cf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e083      	b.n	8004e0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7f5b      	ldrb	r3, [r3, #29]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc ffe0 	bl	8001cdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	22ca      	movs	r2, #202	; 0xca
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2253      	movs	r2, #83	; 0x53
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 faa8 	bl	8005288 <RTC_EnterInitMode>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	22ff      	movs	r2, #255	; 0xff
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e05e      	b.n	8004e0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6899      	ldr	r1, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6919      	ldr	r1, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	041a      	lsls	r2, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10e      	bne.n	8004ddc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa3a 	bl	8005238 <HAL_RTC_WaitForSynchro>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e018      	b.n	8004e0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e16:	b590      	push	{r4, r7, lr}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	7f1b      	ldrb	r3, [r3, #28]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_RTC_SetTime+0x1c>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0aa      	b.n	8004f88 <HAL_RTC_SetTime+0x172>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d126      	bne.n	8004e92 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2200      	movs	r2, #0
 8004e56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fa3f 	bl	80052e0 <RTC_ByteToBcd2>
 8004e62:	4603      	mov	r3, r0
 8004e64:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fa38 	bl	80052e0 <RTC_ByteToBcd2>
 8004e70:	4603      	mov	r3, r0
 8004e72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e74:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	789b      	ldrb	r3, [r3, #2]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fa30 	bl	80052e0 <RTC_ByteToBcd2>
 8004e80:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e018      	b.n	8004ec4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004eb2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004eb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	78db      	ldrb	r3, [r3, #3]
 8004ebe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	22ca      	movs	r2, #202	; 0xca
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2253      	movs	r2, #83	; 0x53
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f9d7 	bl	8005288 <RTC_EnterInitMode>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e047      	b.n	8004f88 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f06:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f16:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d111      	bne.n	8004f72 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f972 	bl	8005238 <HAL_RTC_WaitForSynchro>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2204      	movs	r2, #4
 8004f66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e00a      	b.n	8004f88 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	22ff      	movs	r2, #255	; 0xff
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004f86:	2300      	movs	r3, #0
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}

08004f90 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11a      	bne.n	8005042 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 f983 	bl	800531c <RTC_Bcd2ToByte>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f97a 	bl	800531c <RTC_Bcd2ToByte>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f971 	bl	800531c <RTC_Bcd2ToByte>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	7f1b      	ldrb	r3, [r3, #28]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_RTC_SetDate+0x1c>
 8005064:	2302      	movs	r3, #2
 8005066:	e094      	b.n	8005192 <HAL_RTC_SetDate+0x146>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2202      	movs	r2, #2
 8005072:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10e      	bne.n	8005098 <HAL_RTC_SetDate+0x4c>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	f023 0310 	bic.w	r3, r3, #16
 800508e:	b2db      	uxtb	r3, r3
 8005090:	330a      	adds	r3, #10
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11c      	bne.n	80050d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	78db      	ldrb	r3, [r3, #3]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f91c 	bl	80052e0 <RTC_ByteToBcd2>
 80050a8:	4603      	mov	r3, r0
 80050aa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f915 	bl	80052e0 <RTC_ByteToBcd2>
 80050b6:	4603      	mov	r3, r0
 80050b8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050ba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f90d 	bl	80052e0 <RTC_ByteToBcd2>
 80050c6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80050c8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e00e      	b.n	80050f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050e4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80050ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	22ca      	movs	r2, #202	; 0xca
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2253      	movs	r2, #83	; 0x53
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f8be 	bl	8005288 <RTC_EnterInitMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	22ff      	movs	r2, #255	; 0xff
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2204      	movs	r2, #4
 800511e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e033      	b.n	8005192 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005138:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005148:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d111      	bne.n	800517c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f86d 	bl	8005238 <HAL_RTC_WaitForSynchro>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2204      	movs	r2, #4
 8005170:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e00a      	b.n	8005192 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005190:	2300      	movs	r3, #0
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}

0800519a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	0b5b      	lsrs	r3, r3, #13
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11a      	bne.n	800522e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 f88d 	bl	800531c <RTC_Bcd2ToByte>
 8005202:	4603      	mov	r3, r0
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f884 	bl	800531c <RTC_Bcd2ToByte>
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	789b      	ldrb	r3, [r3, #2]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f87b 	bl	800531c <RTC_Bcd2ToByte>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005252:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005254:	f7fe fc48 	bl	8003ae8 <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800525a:	e009      	b.n	8005270 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800525c:	f7fe fc44 	bl	8003ae8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526a:	d901      	bls.n	8005270 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e007      	b.n	8005280 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ee      	beq.n	800525c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d119      	bne.n	80052d6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fe fc1c 	bl	8003ae8 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052b2:	e009      	b.n	80052c8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052b4:	f7fe fc18 	bl	8003ae8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c2:	d901      	bls.n	80052c8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e007      	b.n	80052d8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ee      	beq.n	80052b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80052ee:	e005      	b.n	80052fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	3b0a      	subs	r3, #10
 80052fa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d8f6      	bhi.n	80052f0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	b2da      	uxtb	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4313      	orrs	r3, r2
 800530e:	b2db      	uxtb	r3, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	4413      	add	r3, r2
 800534a:	b2db      	uxtb	r3, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3350      	adds	r3, #80	; 0x50
 800536c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e041      	b.n	800541e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc ff10 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f000 fb9c 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e03c      	b.n	80054ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_TIM_Base_Start+0xa0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIM_Base_Start+0x5c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d013      	beq.n	8005484 <HAL_TIM_Base_Start+0x5c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <HAL_TIM_Base_Start+0xa4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_Base_Start+0x5c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <HAL_TIM_Base_Start+0xa8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIM_Base_Start+0x5c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <HAL_TIM_Base_Start+0xac>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_Base_Start+0x5c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <HAL_TIM_Base_Start+0xb0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d010      	beq.n	80054b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e007      	b.n	80054b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40014000 	.word	0x40014000

080054dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fe44 	bl	8002190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 faf2 	bl	8005b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0202 	mvn.w	r2, #2
 80055a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa82 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fa74 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa85 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0204 	mvn.w	r2, #4
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa58 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa4a 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa5b 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d122      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11b      	bne.n	800567e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0208 	mvn.w	r2, #8
 800564e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa2e 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 800566a:	e005      	b.n	8005678 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa20 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa31 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d122      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0210 	mvn.w	r2, #16
 80056a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2208      	movs	r2, #8
 80056a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fa04 	bl	8005ac6 <HAL_TIM_IC_CaptureCallback>
 80056be:	e005      	b.n	80056cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9f6 	bl	8005ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa07 	bl	8005ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10e      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0201 	mvn.w	r2, #1
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f9d0 	bl	8005a9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d10e      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d107      	bne.n	800572a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fe09 	bl	800633c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f9cc 	bl	8005aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b20      	cmp	r3, #32
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0220 	mvn.w	r2, #32
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fdd3 	bl	8006328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0ae      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	f200 809f 	bhi.w	80058f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	080058f9 	.word	0x080058f9
 80057c8:	080058f9 	.word	0x080058f9
 80057cc:	080058f9 	.word	0x080058f9
 80057d0:	08005835 	.word	0x08005835
 80057d4:	080058f9 	.word	0x080058f9
 80057d8:	080058f9 	.word	0x080058f9
 80057dc:	080058f9 	.word	0x080058f9
 80057e0:	08005877 	.word	0x08005877
 80057e4:	080058f9 	.word	0x080058f9
 80057e8:	080058f9 	.word	0x080058f9
 80057ec:	080058f9 	.word	0x080058f9
 80057f0:	080058b7 	.word	0x080058b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fa02 	bl	8005c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6999      	ldr	r1, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	619a      	str	r2, [r3, #24]
      break;
 8005832:	e064      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fa48 	bl	8005cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	619a      	str	r2, [r3, #24]
      break;
 8005874:	e043      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fa93 	bl	8005da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0208 	orr.w	r2, r2, #8
 8005890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0204 	bic.w	r2, r2, #4
 80058a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69d9      	ldr	r1, [r3, #28]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	61da      	str	r2, [r3, #28]
      break;
 80058b4:	e023      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fadd 	bl	8005e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	021a      	lsls	r2, r3, #8
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	61da      	str	r2, [r3, #28]
      break;
 80058f6:	e002      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
      break;
 80058fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIM_ConfigClockSource+0x1c>
 8005928:	2302      	movs	r3, #2
 800592a:	e0b4      	b.n	8005a96 <HAL_TIM_ConfigClockSource+0x186>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d03e      	beq.n	80059e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596a:	f200 8087 	bhi.w	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	f000 8086 	beq.w	8005a82 <HAL_TIM_ConfigClockSource+0x172>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597a:	d87f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d01a      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005980:	2b70      	cmp	r3, #112	; 0x70
 8005982:	d87b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b60      	cmp	r3, #96	; 0x60
 8005986:	d050      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x11a>
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d877      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d03c      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0xfa>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d873      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d058      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x13a>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d86f      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d064      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d86b      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d060      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d867      	bhi.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05c      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d05a      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	e062      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f000 fb23 	bl	8006010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
      break;
 80059e2:	e04f      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f000 fb0c 	bl	8006010 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a06:	609a      	str	r2, [r3, #8]
      break;
 8005a08:	e03c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 fa80 	bl	8005f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2150      	movs	r1, #80	; 0x50
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fad9 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005a28:	e02c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 fa9f 	bl	8005f7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2160      	movs	r1, #96	; 0x60
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fac9 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005a48:	e01c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fa60 	bl	8005f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fab9 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005a68:	e00c      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f000 fab0 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005a7a:	e003      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <TIM_Base_SetConfig+0xe4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0x38>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x38>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a31      	ldr	r2, [pc, #196]	; (8005bec <TIM_Base_SetConfig+0xe8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x38>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <TIM_Base_SetConfig+0xec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x38>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	; (8005bf4 <TIM_Base_SetConfig+0xf0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <TIM_Base_SetConfig+0xe4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d017      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a22      	ldr	r2, [pc, #136]	; (8005bec <TIM_Base_SetConfig+0xe8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <TIM_Base_SetConfig+0xec>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <TIM_Base_SetConfig+0xf0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <TIM_Base_SetConfig+0xf4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <TIM_Base_SetConfig+0xf8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_Base_SetConfig+0x8a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_Base_SetConfig+0xfc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d108      	bne.n	8005ba0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <TIM_Base_SetConfig+0xe4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d103      	bne.n	8005bd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	615a      	str	r2, [r3, #20]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0302 	bic.w	r3, r3, #2
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <TIM_OC1_SetConfig+0xc8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10c      	bne.n	8005c7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0308 	bic.w	r3, r3, #8
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 0304 	bic.w	r3, r3, #4
 8005c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <TIM_OC1_SetConfig+0xc8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d111      	bne.n	8005ca6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40010000 	.word	0x40010000

08005cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0210 	bic.w	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0320 	bic.w	r3, r3, #32
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <TIM_OC2_SetConfig+0xd4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10d      	bne.n	8005d4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <TIM_OC2_SetConfig+0xd4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d113      	bne.n	8005d7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000

08005da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1d      	ldr	r2, [pc, #116]	; (8005e78 <TIM_OC3_SetConfig+0xd0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10d      	bne.n	8005e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC3_SetConfig+0xd0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d113      	bne.n	8005e52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40010000 	.word	0x40010000

08005e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <TIM_OC4_SetConfig+0x9c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d109      	bne.n	8005ef0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	019b      	lsls	r3, r3, #6
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000

08005f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0201 	bic.w	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 030a 	bic.w	r3, r3, #10
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b087      	sub	sp, #28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0210 	bic.w	r2, r3, #16
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	031b      	lsls	r3, r3, #12
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f043 0307 	orr.w	r3, r3, #7
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	609a      	str	r2, [r3, #8]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800602a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	431a      	orrs	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4313      	orrs	r3, r2
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_TIMEx_PWMN_Start+0x24>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e022      	b.n	80060ba <HAL_TIMEx_PWMN_Start+0x6a>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d109      	bne.n	800608e <HAL_TIMEx_PWMN_Start+0x3e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	bf14      	ite	ne
 8006086:	2301      	movne	r3, #1
 8006088:	2300      	moveq	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	e015      	b.n	80060ba <HAL_TIMEx_PWMN_Start+0x6a>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d109      	bne.n	80060a8 <HAL_TIMEx_PWMN_Start+0x58>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e008      	b.n	80060ba <HAL_TIMEx_PWMN_Start+0x6a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e063      	b.n	800618a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_TIMEx_PWMN_Start+0x82>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d0:	e013      	b.n	80060fa <HAL_TIMEx_PWMN_Start+0xaa>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d104      	bne.n	80060e2 <HAL_TIMEx_PWMN_Start+0x92>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060e0:	e00b      	b.n	80060fa <HAL_TIMEx_PWMN_Start+0xaa>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d104      	bne.n	80060f2 <HAL_TIMEx_PWMN_Start+0xa2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f0:	e003      	b.n	80060fa <HAL_TIMEx_PWMN_Start+0xaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2204      	movs	r2, #4
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f924 	bl	8006350 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006116:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_TIMEx_PWMN_Start+0x144>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d018      	beq.n	8006154 <HAL_TIMEx_PWMN_Start+0x104>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d013      	beq.n	8006154 <HAL_TIMEx_PWMN_Start+0x104>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_TIMEx_PWMN_Start+0x148>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00e      	beq.n	8006154 <HAL_TIMEx_PWMN_Start+0x104>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_TIMEx_PWMN_Start+0x14c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_TIMEx_PWMN_Start+0x104>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_TIMEx_PWMN_Start+0x150>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIMEx_PWMN_Start+0x104>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <HAL_TIMEx_PWMN_Start+0x154>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d111      	bne.n	8006178 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d010      	beq.n	8006188 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	e007      	b.n	8006188 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000

080061a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e050      	b.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d013      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a15      	ldr	r2, [pc, #84]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10c      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40010000 	.word	0x40010000
 8006274:	40000400 	.word	0x40000400
 8006278:	40000800 	.word	0x40000800
 800627c:	40000c00 	.word	0x40000c00
 8006280:	40014000 	.word	0x40014000

08006284 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800629c:	2302      	movs	r3, #2
 800629e:	e03d      	b.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2204      	movs	r2, #4
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	fa01 f303 	lsl.w	r3, r1, r3
 8006388:	431a      	orrs	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e03f      	b.n	800642c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fb ff91 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fe7c 	bl	80070dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006412:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b20      	cmp	r3, #32
 8006452:	d17c      	bne.n	800654e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_UART_Transmit+0x2c>
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e075      	b.n	8006550 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_UART_Transmit+0x3e>
 800646e:	2302      	movs	r3, #2
 8006470:	e06e      	b.n	8006550 <HAL_UART_Transmit+0x11c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2221      	movs	r2, #33	; 0x21
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006488:	f7fd fb2e 	bl	8003ae8 <HAL_GetTick>
 800648c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d108      	bne.n	80064b6 <HAL_UART_Transmit+0x82>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e003      	b.n	80064be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064c6:	e02a      	b.n	800651e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fbc0 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e036      	b.n	8006550 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3302      	adds	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e007      	b.n	8006510 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1cf      	bne.n	80064c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fb90 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b20      	cmp	r3, #32
 8006576:	f040 808c 	bne.w	8006692 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_UART_Receive+0x2e>
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e084      	b.n	8006694 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_UART_Receive+0x40>
 8006594:	2302      	movs	r3, #2
 8006596:	e07d      	b.n	8006694 <HAL_UART_Receive+0x13c>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2222      	movs	r2, #34	; 0x22
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065b4:	f7fd fa98 	bl	8003ae8 <HAL_GetTick>
 80065b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d108      	bne.n	80065e2 <HAL_UART_Receive+0x8a>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	e003      	b.n	80065ea <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80065f2:	e043      	b.n	800667c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2120      	movs	r1, #32
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fb2a 	bl	8006c58 <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e042      	b.n	8006694 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10c      	bne.n	800662e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006620:	b29a      	uxth	r2, r3
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	3302      	adds	r3, #2
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	e01f      	b.n	800666e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d007      	beq.n	8006648 <HAL_UART_Receive+0xf0>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <HAL_UART_Receive+0xfe>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e008      	b.n	8006668 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006662:	b2da      	uxtb	r2, r3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	3301      	adds	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1b6      	bne.n	80065f4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d11d      	bne.n	80066f2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <HAL_UART_Receive_IT+0x26>
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e016      	b.n	80066f4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_UART_Receive_IT+0x38>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e00f      	b.n	80066f4 <HAL_UART_Receive_IT+0x58>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	461a      	mov	r2, r3
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fb23 	bl	8006d34 <UART_Start_Receive_IT>
 80066ee:	4603      	mov	r3, r0
 80066f0:	e000      	b.n	80066f4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
  }
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b0ba      	sub	sp, #232	; 0xe8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800673a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_UART_IRQHandler+0x66>
 800674e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fc03 	bl	8006f66 <UART_Receive_IT>
      return;
 8006760:	e256      	b.n	8006c10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80de 	beq.w	8006928 <HAL_UART_IRQHandler+0x22c>
 800676c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80d1 	beq.w	8006928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <HAL_UART_IRQHandler+0xae>
 8006792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <HAL_UART_IRQHandler+0xd2>
 80067b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_UART_IRQHandler+0xf6>
 80067da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <HAL_UART_IRQHandler+0x126>
 80067fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800680a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 81ed 	beq.w	8006c06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_UART_IRQHandler+0x14e>
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fb8e 	bl	8006f66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <HAL_UART_IRQHandler+0x17a>
 800686e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d04f      	beq.n	8006916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa96 	bl	8006da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d141      	bne.n	800690e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d9      	bne.n	800688a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d013      	beq.n	8006906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	4a7d      	ldr	r2, [pc, #500]	; (8006ad8 <HAL_UART_IRQHandler+0x3dc>)
 80068e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fd faad 	bl	8003e4a <HAL_DMA_Abort_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e00e      	b.n	8006924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f990 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	e00a      	b.n	8006924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f98c 	bl	8006c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	e006      	b.n	8006924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f988 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006922:	e170      	b.n	8006c06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	bf00      	nop
    return;
 8006926:	e16e      	b.n	8006c06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	f040 814a 	bne.w	8006bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8143 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 813c 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	f040 80b4 	bne.w	8006adc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8140 	beq.w	8006c0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800698e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006992:	429a      	cmp	r2, r3
 8006994:	f080 8139 	bcs.w	8006c0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800699e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	f000 8088 	beq.w	8006abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1d9      	bne.n	80069ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e1      	bne.n	80069fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3314      	adds	r3, #20
 8006a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e3      	bne.n	8006a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e3      	bne.n	8006a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fd f956 	bl	8003d6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8b6 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ad4:	e099      	b.n	8006c0a <HAL_UART_IRQHandler+0x50e>
 8006ad6:	bf00      	nop
 8006ad8:	08006e6f 	.word	0x08006e6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 808b 	beq.w	8006c0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8086 	beq.w	8006c0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b26:	647a      	str	r2, [r7, #68]	; 0x44
 8006b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e3      	bne.n	8006b02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	623b      	str	r3, [r7, #32]
   return(result);
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f83e 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bc4:	e023      	b.n	8006c0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_UART_IRQHandler+0x4ea>
 8006bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f959 	bl	8006e96 <UART_Transmit_IT>
    return;
 8006be4:	e014      	b.n	8006c10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <HAL_UART_IRQHandler+0x514>
 8006bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f999 	bl	8006f36 <UART_EndTransmit_IT>
    return;
 8006c04:	e004      	b.n	8006c10 <HAL_UART_IRQHandler+0x514>
    return;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_UART_IRQHandler+0x514>
      return;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_UART_IRQHandler+0x514>
      return;
 8006c0e:	bf00      	nop
  }
}
 8006c10:	37e8      	adds	r7, #232	; 0xe8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b090      	sub	sp, #64	; 0x40
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c68:	e050      	b.n	8006d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d04c      	beq.n	8006d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c78:	f7fc ff36 	bl	8003ae8 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d241      	bcs.n	8006d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8006caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e5      	bne.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cdc:	623a      	str	r2, [r7, #32]
 8006cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e5      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e00f      	b.n	8006d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d09f      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3740      	adds	r7, #64	; 0x40
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	88fa      	ldrh	r2, [r7, #6]
 8006d52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2222      	movs	r2, #34	; 0x22
 8006d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695a      	ldr	r2, [r3, #20]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0220 	orr.w	r2, r2, #32
 8006d98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b095      	sub	sp, #84	; 0x54
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dd0:	643a      	str	r2, [r7, #64]	; 0x40
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e5      	bne.n	8006db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e5      	bne.n	8006de4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d119      	bne.n	8006e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f023 0310 	bic.w	r3, r3, #16
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e40:	61ba      	str	r2, [r7, #24]
 8006e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e62:	bf00      	nop
 8006e64:	3754      	adds	r7, #84	; 0x54
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fecf 	bl	8006c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b21      	cmp	r3, #33	; 0x21
 8006ea8:	d13e      	bne.n	8006f28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	d114      	bne.n	8006ede <UART_Transmit_IT+0x48>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d110      	bne.n	8006ede <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]
 8006edc:	e008      	b.n	8006ef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6211      	str	r1, [r2, #32]
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4619      	mov	r1, r3
 8006efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fe5e 	bl	8006c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b08c      	sub	sp, #48	; 0x30
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b22      	cmp	r3, #34	; 0x22
 8006f78:	f040 80ab 	bne.w	80070d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d117      	bne.n	8006fb6 <UART_Receive_IT+0x50>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d113      	bne.n	8006fb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb4:	e026      	b.n	8007004 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d007      	beq.n	8006fda <UART_Receive_IT+0x74>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <UART_Receive_IT+0x82>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	e008      	b.n	8006ffa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007014:	2b00      	cmp	r3, #0
 8007016:	d15a      	bne.n	80070ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0220 	bic.w	r2, r2, #32
 8007026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d135      	bne.n	80070c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f023 0310 	bic.w	r3, r3, #16
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	623a      	str	r2, [r7, #32]
 8007080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69f9      	ldr	r1, [r7, #28]
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	61bb      	str	r3, [r7, #24]
   return(result);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b10      	cmp	r3, #16
 800709e:	d10a      	bne.n	80070b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fdbf 	bl	8006c40 <HAL_UARTEx_RxEventCallback>
 80070c2:	e002      	b.n	80070ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fa f931 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e002      	b.n	80070d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b09f      	sub	sp, #124	; 0x7c
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	ea40 0301 	orr.w	r3, r0, r1
 80070fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	431a      	orrs	r2, r3
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	431a      	orrs	r2, r3
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	4313      	orrs	r3, r2
 8007114:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007120:	f021 010c 	bic.w	r1, r1, #12
 8007124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800712a:	430b      	orrs	r3, r1
 800712c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800712e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713a:	6999      	ldr	r1, [r3, #24]
 800713c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	ea40 0301 	orr.w	r3, r0, r1
 8007144:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4bc5      	ldr	r3, [pc, #788]	; (8007460 <UART_SetConfig+0x384>)
 800714c:	429a      	cmp	r2, r3
 800714e:	d004      	beq.n	800715a <UART_SetConfig+0x7e>
 8007150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4bc3      	ldr	r3, [pc, #780]	; (8007464 <UART_SetConfig+0x388>)
 8007156:	429a      	cmp	r2, r3
 8007158:	d103      	bne.n	8007162 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800715a:	f7fd fcc7 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 800715e:	6778      	str	r0, [r7, #116]	; 0x74
 8007160:	e002      	b.n	8007168 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007162:	f7fd fcaf 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8007166:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007170:	f040 80b6 	bne.w	80072e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	461c      	mov	r4, r3
 8007178:	f04f 0500 	mov.w	r5, #0
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	1891      	adds	r1, r2, r2
 8007182:	6439      	str	r1, [r7, #64]	; 0x40
 8007184:	415b      	adcs	r3, r3
 8007186:	647b      	str	r3, [r7, #68]	; 0x44
 8007188:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800718c:	1912      	adds	r2, r2, r4
 800718e:	eb45 0303 	adc.w	r3, r5, r3
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	00d9      	lsls	r1, r3, #3
 800719c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a0:	00d0      	lsls	r0, r2, #3
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	1911      	adds	r1, r2, r4
 80071a8:	6639      	str	r1, [r7, #96]	; 0x60
 80071aa:	416b      	adcs	r3, r5
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80071bc:	415b      	adcs	r3, r3
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071c8:	f7f9 fd56 	bl	8000c78 <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4ba5      	ldr	r3, [pc, #660]	; (8007468 <UART_SetConfig+0x38c>)
 80071d2:	fba3 2302 	umull	r2, r3, r3, r2
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	011e      	lsls	r6, r3, #4
 80071da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071dc:	461c      	mov	r4, r3
 80071de:	f04f 0500 	mov.w	r5, #0
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	1891      	adds	r1, r2, r2
 80071e8:	6339      	str	r1, [r7, #48]	; 0x30
 80071ea:	415b      	adcs	r3, r3
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
 80071ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071f2:	1912      	adds	r2, r2, r4
 80071f4:	eb45 0303 	adc.w	r3, r5, r3
 80071f8:	f04f 0000 	mov.w	r0, #0
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	00d9      	lsls	r1, r3, #3
 8007202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007206:	00d0      	lsls	r0, r2, #3
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	1911      	adds	r1, r2, r4
 800720e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007210:	416b      	adcs	r3, r5
 8007212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	461a      	mov	r2, r3
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	1891      	adds	r1, r2, r2
 8007220:	62b9      	str	r1, [r7, #40]	; 0x28
 8007222:	415b      	adcs	r3, r3
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800722a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800722e:	f7f9 fd23 	bl	8000c78 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4b8c      	ldr	r3, [pc, #560]	; (8007468 <UART_SetConfig+0x38c>)
 8007238:	fba3 1302 	umull	r1, r3, r3, r2
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	2164      	movs	r1, #100	; 0x64
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	3332      	adds	r3, #50	; 0x32
 800724a:	4a87      	ldr	r2, [pc, #540]	; (8007468 <UART_SetConfig+0x38c>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007258:	441e      	add	r6, r3
 800725a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800725c:	4618      	mov	r0, r3
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	1894      	adds	r4, r2, r2
 8007268:	623c      	str	r4, [r7, #32]
 800726a:	415b      	adcs	r3, r3
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007272:	1812      	adds	r2, r2, r0
 8007274:	eb41 0303 	adc.w	r3, r1, r3
 8007278:	f04f 0400 	mov.w	r4, #0
 800727c:	f04f 0500 	mov.w	r5, #0
 8007280:	00dd      	lsls	r5, r3, #3
 8007282:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007286:	00d4      	lsls	r4, r2, #3
 8007288:	4622      	mov	r2, r4
 800728a:	462b      	mov	r3, r5
 800728c:	1814      	adds	r4, r2, r0
 800728e:	653c      	str	r4, [r7, #80]	; 0x50
 8007290:	414b      	adcs	r3, r1
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
 8007294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	461a      	mov	r2, r3
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	1891      	adds	r1, r2, r2
 80072a0:	61b9      	str	r1, [r7, #24]
 80072a2:	415b      	adcs	r3, r3
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072ae:	f7f9 fce3 	bl	8000c78 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4b6c      	ldr	r3, [pc, #432]	; (8007468 <UART_SetConfig+0x38c>)
 80072b8:	fba3 1302 	umull	r1, r3, r3, r2
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	2164      	movs	r1, #100	; 0x64
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	3332      	adds	r3, #50	; 0x32
 80072ca:	4a67      	ldr	r2, [pc, #412]	; (8007468 <UART_SetConfig+0x38c>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	095b      	lsrs	r3, r3, #5
 80072d2:	f003 0207 	and.w	r2, r3, #7
 80072d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4432      	add	r2, r6
 80072dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072de:	e0b9      	b.n	8007454 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e2:	461c      	mov	r4, r3
 80072e4:	f04f 0500 	mov.w	r5, #0
 80072e8:	4622      	mov	r2, r4
 80072ea:	462b      	mov	r3, r5
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	6139      	str	r1, [r7, #16]
 80072f0:	415b      	adcs	r3, r3
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072f8:	1912      	adds	r2, r2, r4
 80072fa:	eb45 0303 	adc.w	r3, r5, r3
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	00d9      	lsls	r1, r3, #3
 8007308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800730c:	00d0      	lsls	r0, r2, #3
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	eb12 0804 	adds.w	r8, r2, r4
 8007316:	eb43 0905 	adc.w	r9, r3, r5
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f04f 0100 	mov.w	r1, #0
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	008b      	lsls	r3, r1, #2
 800732e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007332:	0082      	lsls	r2, r0, #2
 8007334:	4640      	mov	r0, r8
 8007336:	4649      	mov	r1, r9
 8007338:	f7f9 fc9e 	bl	8000c78 <__aeabi_uldivmod>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <UART_SetConfig+0x38c>)
 8007342:	fba3 2302 	umull	r2, r3, r3, r2
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	011e      	lsls	r6, r3, #4
 800734a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734c:	4618      	mov	r0, r3
 800734e:	f04f 0100 	mov.w	r1, #0
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	1894      	adds	r4, r2, r2
 8007358:	60bc      	str	r4, [r7, #8]
 800735a:	415b      	adcs	r3, r3
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007362:	1812      	adds	r2, r2, r0
 8007364:	eb41 0303 	adc.w	r3, r1, r3
 8007368:	f04f 0400 	mov.w	r4, #0
 800736c:	f04f 0500 	mov.w	r5, #0
 8007370:	00dd      	lsls	r5, r3, #3
 8007372:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007376:	00d4      	lsls	r4, r2, #3
 8007378:	4622      	mov	r2, r4
 800737a:	462b      	mov	r3, r5
 800737c:	1814      	adds	r4, r2, r0
 800737e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007380:	414b      	adcs	r3, r1
 8007382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4618      	mov	r0, r3
 800738a:	f04f 0100 	mov.w	r1, #0
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	008b      	lsls	r3, r1, #2
 8007398:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800739c:	0082      	lsls	r2, r0, #2
 800739e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073a2:	f7f9 fc69 	bl	8000c78 <__aeabi_uldivmod>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4b2f      	ldr	r3, [pc, #188]	; (8007468 <UART_SetConfig+0x38c>)
 80073ac:	fba3 1302 	umull	r1, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	2164      	movs	r1, #100	; 0x64
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	3332      	adds	r3, #50	; 0x32
 80073be:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <UART_SetConfig+0x38c>)
 80073c0:	fba2 2303 	umull	r2, r3, r2, r3
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ca:	441e      	add	r6, r3
 80073cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ce:	4618      	mov	r0, r3
 80073d0:	f04f 0100 	mov.w	r1, #0
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	1894      	adds	r4, r2, r2
 80073da:	603c      	str	r4, [r7, #0]
 80073dc:	415b      	adcs	r3, r3
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e4:	1812      	adds	r2, r2, r0
 80073e6:	eb41 0303 	adc.w	r3, r1, r3
 80073ea:	f04f 0400 	mov.w	r4, #0
 80073ee:	f04f 0500 	mov.w	r5, #0
 80073f2:	00dd      	lsls	r5, r3, #3
 80073f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073f8:	00d4      	lsls	r4, r2, #3
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	eb12 0a00 	adds.w	sl, r2, r0
 8007402:	eb43 0b01 	adc.w	fp, r3, r1
 8007406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	4618      	mov	r0, r3
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	008b      	lsls	r3, r1, #2
 800741a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800741e:	0082      	lsls	r2, r0, #2
 8007420:	4650      	mov	r0, sl
 8007422:	4659      	mov	r1, fp
 8007424:	f7f9 fc28 	bl	8000c78 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <UART_SetConfig+0x38c>)
 800742e:	fba3 1302 	umull	r1, r3, r3, r2
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2164      	movs	r1, #100	; 0x64
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	3332      	adds	r3, #50	; 0x32
 8007440:	4a09      	ldr	r2, [pc, #36]	; (8007468 <UART_SetConfig+0x38c>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4432      	add	r2, r6
 8007452:	609a      	str	r2, [r3, #8]
}
 8007454:	bf00      	nop
 8007456:	377c      	adds	r7, #124	; 0x7c
 8007458:	46bd      	mov	sp, r7
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	bf00      	nop
 8007460:	40011000 	.word	0x40011000
 8007464:	40011400 	.word	0x40011400
 8007468:	51eb851f 	.word	0x51eb851f

0800746c <powf>:
 800746c:	b508      	push	{r3, lr}
 800746e:	ed2d 8b04 	vpush	{d8-d9}
 8007472:	eeb0 9a40 	vmov.f32	s18, s0
 8007476:	eef0 8a60 	vmov.f32	s17, s1
 800747a:	f000 f88f 	bl	800759c <__ieee754_powf>
 800747e:	4b43      	ldr	r3, [pc, #268]	; (800758c <powf+0x120>)
 8007480:	f993 3000 	ldrsb.w	r3, [r3]
 8007484:	3301      	adds	r3, #1
 8007486:	eeb0 8a40 	vmov.f32	s16, s0
 800748a:	d012      	beq.n	80074b2 <powf+0x46>
 800748c:	eef4 8a68 	vcmp.f32	s17, s17
 8007490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007494:	d60d      	bvs.n	80074b2 <powf+0x46>
 8007496:	eeb4 9a49 	vcmp.f32	s18, s18
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	d70d      	bvc.n	80074bc <powf+0x50>
 80074a0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80074a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074ac:	bf08      	it	eq
 80074ae:	eeb0 8a67 	vmoveq.f32	s16, s15
 80074b2:	eeb0 0a48 	vmov.f32	s0, s16
 80074b6:	ecbd 8b04 	vpop	{d8-d9}
 80074ba:	bd08      	pop	{r3, pc}
 80074bc:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007590 <powf+0x124>
 80074c0:	eeb4 9a69 	vcmp.f32	s18, s19
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	d116      	bne.n	80074f8 <powf+0x8c>
 80074ca:	eef4 8a69 	vcmp.f32	s17, s19
 80074ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d2:	d057      	beq.n	8007584 <powf+0x118>
 80074d4:	eeb0 0a68 	vmov.f32	s0, s17
 80074d8:	f000 fb2a 	bl	8007b30 <finitef>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0e8      	beq.n	80074b2 <powf+0x46>
 80074e0:	eef4 8ae9 	vcmpe.f32	s17, s19
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	d5e3      	bpl.n	80074b2 <powf+0x46>
 80074ea:	f000 fc07 	bl	8007cfc <__errno>
 80074ee:	2321      	movs	r3, #33	; 0x21
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007594 <powf+0x128>
 80074f6:	e7dc      	b.n	80074b2 <powf+0x46>
 80074f8:	f000 fb1a 	bl	8007b30 <finitef>
 80074fc:	bb50      	cbnz	r0, 8007554 <powf+0xe8>
 80074fe:	eeb0 0a49 	vmov.f32	s0, s18
 8007502:	f000 fb15 	bl	8007b30 <finitef>
 8007506:	b328      	cbz	r0, 8007554 <powf+0xe8>
 8007508:	eeb0 0a68 	vmov.f32	s0, s17
 800750c:	f000 fb10 	bl	8007b30 <finitef>
 8007510:	b300      	cbz	r0, 8007554 <powf+0xe8>
 8007512:	eeb4 8a48 	vcmp.f32	s16, s16
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d706      	bvc.n	800752a <powf+0xbe>
 800751c:	f000 fbee 	bl	8007cfc <__errno>
 8007520:	2321      	movs	r3, #33	; 0x21
 8007522:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007526:	6003      	str	r3, [r0, #0]
 8007528:	e7c3      	b.n	80074b2 <powf+0x46>
 800752a:	f000 fbe7 	bl	8007cfc <__errno>
 800752e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007532:	2322      	movs	r3, #34	; 0x22
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	d508      	bpl.n	800754e <powf+0xe2>
 800753c:	eeb0 0a68 	vmov.f32	s0, s17
 8007540:	f000 fb0a 	bl	8007b58 <rintf>
 8007544:	eeb4 0a68 	vcmp.f32	s0, s17
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	d1d1      	bne.n	80074f2 <powf+0x86>
 800754e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007598 <powf+0x12c>
 8007552:	e7ae      	b.n	80074b2 <powf+0x46>
 8007554:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d1a9      	bne.n	80074b2 <powf+0x46>
 800755e:	eeb0 0a49 	vmov.f32	s0, s18
 8007562:	f000 fae5 	bl	8007b30 <finitef>
 8007566:	2800      	cmp	r0, #0
 8007568:	d0a3      	beq.n	80074b2 <powf+0x46>
 800756a:	eeb0 0a68 	vmov.f32	s0, s17
 800756e:	f000 fadf 	bl	8007b30 <finitef>
 8007572:	2800      	cmp	r0, #0
 8007574:	d09d      	beq.n	80074b2 <powf+0x46>
 8007576:	f000 fbc1 	bl	8007cfc <__errno>
 800757a:	2322      	movs	r3, #34	; 0x22
 800757c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007590 <powf+0x124>
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	e796      	b.n	80074b2 <powf+0x46>
 8007584:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007588:	e793      	b.n	80074b2 <powf+0x46>
 800758a:	bf00      	nop
 800758c:	20000019 	.word	0x20000019
 8007590:	00000000 	.word	0x00000000
 8007594:	ff800000 	.word	0xff800000
 8007598:	7f800000 	.word	0x7f800000

0800759c <__ieee754_powf>:
 800759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a0:	ee10 5a90 	vmov	r5, s1
 80075a4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80075a8:	ed2d 8b02 	vpush	{d8}
 80075ac:	eeb0 8a40 	vmov.f32	s16, s0
 80075b0:	eef0 8a60 	vmov.f32	s17, s1
 80075b4:	f000 8291 	beq.w	8007ada <__ieee754_powf+0x53e>
 80075b8:	ee10 8a10 	vmov	r8, s0
 80075bc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80075c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80075c4:	dc06      	bgt.n	80075d4 <__ieee754_powf+0x38>
 80075c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80075ca:	dd0a      	ble.n	80075e2 <__ieee754_powf+0x46>
 80075cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80075d0:	f000 8283 	beq.w	8007ada <__ieee754_powf+0x53e>
 80075d4:	ecbd 8b02 	vpop	{d8}
 80075d8:	48d8      	ldr	r0, [pc, #864]	; (800793c <__ieee754_powf+0x3a0>)
 80075da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075de:	f000 bab5 	b.w	8007b4c <nanf>
 80075e2:	f1b8 0f00 	cmp.w	r8, #0
 80075e6:	da1f      	bge.n	8007628 <__ieee754_powf+0x8c>
 80075e8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80075ec:	da2e      	bge.n	800764c <__ieee754_powf+0xb0>
 80075ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075f2:	f2c0 827b 	blt.w	8007aec <__ieee754_powf+0x550>
 80075f6:	15fb      	asrs	r3, r7, #23
 80075f8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075fc:	fa47 f603 	asr.w	r6, r7, r3
 8007600:	fa06 f303 	lsl.w	r3, r6, r3
 8007604:	42bb      	cmp	r3, r7
 8007606:	f040 8271 	bne.w	8007aec <__ieee754_powf+0x550>
 800760a:	f006 0601 	and.w	r6, r6, #1
 800760e:	f1c6 0602 	rsb	r6, r6, #2
 8007612:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007616:	d120      	bne.n	800765a <__ieee754_powf+0xbe>
 8007618:	2d00      	cmp	r5, #0
 800761a:	f280 8264 	bge.w	8007ae6 <__ieee754_powf+0x54a>
 800761e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007622:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007626:	e00d      	b.n	8007644 <__ieee754_powf+0xa8>
 8007628:	2600      	movs	r6, #0
 800762a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800762e:	d1f0      	bne.n	8007612 <__ieee754_powf+0x76>
 8007630:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007634:	f000 8251 	beq.w	8007ada <__ieee754_powf+0x53e>
 8007638:	dd0a      	ble.n	8007650 <__ieee754_powf+0xb4>
 800763a:	2d00      	cmp	r5, #0
 800763c:	f280 8250 	bge.w	8007ae0 <__ieee754_powf+0x544>
 8007640:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007940 <__ieee754_powf+0x3a4>
 8007644:	ecbd 8b02 	vpop	{d8}
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	2602      	movs	r6, #2
 800764e:	e7ec      	b.n	800762a <__ieee754_powf+0x8e>
 8007650:	2d00      	cmp	r5, #0
 8007652:	daf5      	bge.n	8007640 <__ieee754_powf+0xa4>
 8007654:	eeb1 0a68 	vneg.f32	s0, s17
 8007658:	e7f4      	b.n	8007644 <__ieee754_powf+0xa8>
 800765a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800765e:	d102      	bne.n	8007666 <__ieee754_powf+0xca>
 8007660:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007664:	e7ee      	b.n	8007644 <__ieee754_powf+0xa8>
 8007666:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800766a:	eeb0 0a48 	vmov.f32	s0, s16
 800766e:	d108      	bne.n	8007682 <__ieee754_powf+0xe6>
 8007670:	f1b8 0f00 	cmp.w	r8, #0
 8007674:	db05      	blt.n	8007682 <__ieee754_powf+0xe6>
 8007676:	ecbd 8b02 	vpop	{d8}
 800767a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800767e:	f000 ba4d 	b.w	8007b1c <__ieee754_sqrtf>
 8007682:	f000 fa4e 	bl	8007b22 <fabsf>
 8007686:	b124      	cbz	r4, 8007692 <__ieee754_powf+0xf6>
 8007688:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800768c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007690:	d117      	bne.n	80076c2 <__ieee754_powf+0x126>
 8007692:	2d00      	cmp	r5, #0
 8007694:	bfbc      	itt	lt
 8007696:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800769a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	dacf      	bge.n	8007644 <__ieee754_powf+0xa8>
 80076a4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80076a8:	ea54 0306 	orrs.w	r3, r4, r6
 80076ac:	d104      	bne.n	80076b8 <__ieee754_powf+0x11c>
 80076ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 80076b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80076b6:	e7c5      	b.n	8007644 <__ieee754_powf+0xa8>
 80076b8:	2e01      	cmp	r6, #1
 80076ba:	d1c3      	bne.n	8007644 <__ieee754_powf+0xa8>
 80076bc:	eeb1 0a40 	vneg.f32	s0, s0
 80076c0:	e7c0      	b.n	8007644 <__ieee754_powf+0xa8>
 80076c2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80076c6:	3801      	subs	r0, #1
 80076c8:	ea56 0300 	orrs.w	r3, r6, r0
 80076cc:	d104      	bne.n	80076d8 <__ieee754_powf+0x13c>
 80076ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 80076d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80076d6:	e7b5      	b.n	8007644 <__ieee754_powf+0xa8>
 80076d8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80076dc:	dd6b      	ble.n	80077b6 <__ieee754_powf+0x21a>
 80076de:	4b99      	ldr	r3, [pc, #612]	; (8007944 <__ieee754_powf+0x3a8>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	dc06      	bgt.n	80076f2 <__ieee754_powf+0x156>
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	daab      	bge.n	8007640 <__ieee754_powf+0xa4>
 80076e8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007948 <__ieee754_powf+0x3ac>
 80076ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80076f0:	e7a8      	b.n	8007644 <__ieee754_powf+0xa8>
 80076f2:	4b96      	ldr	r3, [pc, #600]	; (800794c <__ieee754_powf+0x3b0>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	dd02      	ble.n	80076fe <__ieee754_powf+0x162>
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	dcf5      	bgt.n	80076e8 <__ieee754_powf+0x14c>
 80076fc:	e7a0      	b.n	8007640 <__ieee754_powf+0xa4>
 80076fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007702:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007706:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007950 <__ieee754_powf+0x3b4>
 800770a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800770e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007716:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800771a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007954 <__ieee754_powf+0x3b8>
 8007726:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800772a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007958 <__ieee754_powf+0x3bc>
 800772e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007732:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800795c <__ieee754_powf+0x3c0>
 8007736:	eef0 6a67 	vmov.f32	s13, s15
 800773a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800773e:	ee16 3a90 	vmov	r3, s13
 8007742:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007746:	f023 030f 	bic.w	r3, r3, #15
 800774a:	ee00 3a90 	vmov	s1, r3
 800774e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007752:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007756:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800775a:	f025 050f 	bic.w	r5, r5, #15
 800775e:	ee07 5a10 	vmov	s14, r5
 8007762:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007766:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007772:	3e01      	subs	r6, #1
 8007774:	ea56 0200 	orrs.w	r2, r6, r0
 8007778:	ee07 5a10 	vmov	s14, r5
 800777c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007780:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007784:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007788:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800778c:	ee17 4a10 	vmov	r4, s14
 8007790:	bf08      	it	eq
 8007792:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007796:	2c00      	cmp	r4, #0
 8007798:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800779c:	f340 8184 	ble.w	8007aa8 <__ieee754_powf+0x50c>
 80077a0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80077a4:	f340 80fc 	ble.w	80079a0 <__ieee754_powf+0x404>
 80077a8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007948 <__ieee754_powf+0x3ac>
 80077ac:	ee28 0a27 	vmul.f32	s0, s16, s15
 80077b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077b4:	e746      	b.n	8007644 <__ieee754_powf+0xa8>
 80077b6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80077ba:	bf01      	itttt	eq
 80077bc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007960 <__ieee754_powf+0x3c4>
 80077c0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80077c4:	f06f 0217 	mvneq.w	r2, #23
 80077c8:	ee17 4a90 	vmoveq	r4, s15
 80077cc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80077d0:	bf18      	it	ne
 80077d2:	2200      	movne	r2, #0
 80077d4:	3b7f      	subs	r3, #127	; 0x7f
 80077d6:	4413      	add	r3, r2
 80077d8:	4a62      	ldr	r2, [pc, #392]	; (8007964 <__ieee754_powf+0x3c8>)
 80077da:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80077de:	4294      	cmp	r4, r2
 80077e0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80077e4:	dd06      	ble.n	80077f4 <__ieee754_powf+0x258>
 80077e6:	4a60      	ldr	r2, [pc, #384]	; (8007968 <__ieee754_powf+0x3cc>)
 80077e8:	4294      	cmp	r4, r2
 80077ea:	f340 80a4 	ble.w	8007936 <__ieee754_powf+0x39a>
 80077ee:	3301      	adds	r3, #1
 80077f0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80077f4:	2400      	movs	r4, #0
 80077f6:	4a5d      	ldr	r2, [pc, #372]	; (800796c <__ieee754_powf+0x3d0>)
 80077f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80077fc:	ee07 1a90 	vmov	s15, r1
 8007800:	ed92 7a00 	vldr	s14, [r2]
 8007804:	4a5a      	ldr	r2, [pc, #360]	; (8007970 <__ieee754_powf+0x3d4>)
 8007806:	ee37 6a27 	vadd.f32	s12, s14, s15
 800780a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800780e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007812:	1049      	asrs	r1, r1, #1
 8007814:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007818:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800781c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007820:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007824:	ee06 1a10 	vmov	s12, r1
 8007828:	ee65 4a26 	vmul.f32	s9, s10, s13
 800782c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007830:	ee14 7a90 	vmov	r7, s9
 8007834:	4017      	ands	r7, r2
 8007836:	ee05 7a90 	vmov	s11, r7
 800783a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800783e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007842:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007974 <__ieee754_powf+0x3d8>
 8007846:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800784a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800784e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007852:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007978 <__ieee754_powf+0x3dc>
 8007856:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800785a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800797c <__ieee754_powf+0x3e0>
 800785e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007862:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007950 <__ieee754_powf+0x3b4>
 8007866:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800786a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007980 <__ieee754_powf+0x3e4>
 800786e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007872:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007984 <__ieee754_powf+0x3e8>
 8007876:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800787a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800787e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007882:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007886:	eee5 6a07 	vfma.f32	s13, s10, s14
 800788a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800788e:	eef0 7a45 	vmov.f32	s15, s10
 8007892:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789a:	ee17 1a90 	vmov	r1, s15
 800789e:	4011      	ands	r1, r2
 80078a0:	ee07 1a90 	vmov	s15, r1
 80078a4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80078a8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80078ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80078b0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80078b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078b8:	eeb0 6a47 	vmov.f32	s12, s14
 80078bc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80078c0:	ee16 1a10 	vmov	r1, s12
 80078c4:	4011      	ands	r1, r2
 80078c6:	ee06 1a90 	vmov	s13, r1
 80078ca:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80078ce:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007988 <__ieee754_powf+0x3ec>
 80078d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800798c <__ieee754_powf+0x3f0>
 80078d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80078da:	ee06 1a10 	vmov	s12, r1
 80078de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007990 <__ieee754_powf+0x3f4>
 80078e6:	492b      	ldr	r1, [pc, #172]	; (8007994 <__ieee754_powf+0x3f8>)
 80078e8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078f0:	edd1 7a00 	vldr	s15, [r1]
 80078f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	4b26      	ldr	r3, [pc, #152]	; (8007998 <__ieee754_powf+0x3fc>)
 80078fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007902:	eef0 7a47 	vmov.f32	s15, s14
 8007906:	eee6 7a25 	vfma.f32	s15, s12, s11
 800790a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800790e:	edd4 0a00 	vldr	s1, [r4]
 8007912:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791a:	ee17 3a90 	vmov	r3, s15
 800791e:	4013      	ands	r3, r2
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007928:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800792c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007930:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007934:	e70f      	b.n	8007756 <__ieee754_powf+0x1ba>
 8007936:	2401      	movs	r4, #1
 8007938:	e75d      	b.n	80077f6 <__ieee754_powf+0x25a>
 800793a:	bf00      	nop
 800793c:	0800b798 	.word	0x0800b798
 8007940:	00000000 	.word	0x00000000
 8007944:	3f7ffff7 	.word	0x3f7ffff7
 8007948:	7149f2ca 	.word	0x7149f2ca
 800794c:	3f800007 	.word	0x3f800007
 8007950:	3eaaaaab 	.word	0x3eaaaaab
 8007954:	3fb8aa3b 	.word	0x3fb8aa3b
 8007958:	36eca570 	.word	0x36eca570
 800795c:	3fb8aa00 	.word	0x3fb8aa00
 8007960:	4b800000 	.word	0x4b800000
 8007964:	001cc471 	.word	0x001cc471
 8007968:	005db3d6 	.word	0x005db3d6
 800796c:	0800b3dc 	.word	0x0800b3dc
 8007970:	fffff000 	.word	0xfffff000
 8007974:	3e6c3255 	.word	0x3e6c3255
 8007978:	3e53f142 	.word	0x3e53f142
 800797c:	3e8ba305 	.word	0x3e8ba305
 8007980:	3edb6db7 	.word	0x3edb6db7
 8007984:	3f19999a 	.word	0x3f19999a
 8007988:	3f76384f 	.word	0x3f76384f
 800798c:	3f763800 	.word	0x3f763800
 8007990:	369dc3a0 	.word	0x369dc3a0
 8007994:	0800b3ec 	.word	0x0800b3ec
 8007998:	0800b3e4 	.word	0x0800b3e4
 800799c:	3338aa3c 	.word	0x3338aa3c
 80079a0:	f040 8092 	bne.w	8007ac8 <__ieee754_powf+0x52c>
 80079a4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800799c <__ieee754_powf+0x400>
 80079a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079ac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80079b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b8:	f73f aef6 	bgt.w	80077a8 <__ieee754_powf+0x20c>
 80079bc:	15db      	asrs	r3, r3, #23
 80079be:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80079c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80079c6:	4103      	asrs	r3, r0
 80079c8:	4423      	add	r3, r4
 80079ca:	4949      	ldr	r1, [pc, #292]	; (8007af0 <__ieee754_powf+0x554>)
 80079cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079d0:	3a7f      	subs	r2, #127	; 0x7f
 80079d2:	4111      	asrs	r1, r2
 80079d4:	ea23 0101 	bic.w	r1, r3, r1
 80079d8:	ee07 1a10 	vmov	s14, r1
 80079dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80079e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079e4:	f1c2 0217 	rsb	r2, r2, #23
 80079e8:	4110      	asrs	r0, r2
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079f0:	bfb8      	it	lt
 80079f2:	4240      	neglt	r0, r0
 80079f4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079f8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007af4 <__ieee754_powf+0x558>
 80079fc:	ee17 3a10 	vmov	r3, s14
 8007a00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a04:	f023 030f 	bic.w	r3, r3, #15
 8007a08:	ee07 3a10 	vmov	s14, r3
 8007a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007a14:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007af8 <__ieee754_powf+0x55c>
 8007a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007a20:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007afc <__ieee754_powf+0x560>
 8007a24:	eeb0 0a67 	vmov.f32	s0, s15
 8007a28:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007a2c:	eeb0 6a40 	vmov.f32	s12, s0
 8007a30:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007a34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a38:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007a3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007b00 <__ieee754_powf+0x564>
 8007a40:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007b04 <__ieee754_powf+0x568>
 8007a44:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007a48:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007b08 <__ieee754_powf+0x56c>
 8007a4c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a50:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007b0c <__ieee754_powf+0x570>
 8007a54:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a58:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007b10 <__ieee754_powf+0x574>
 8007a5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a60:	eeb0 6a40 	vmov.f32	s12, s0
 8007a64:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007a68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007a6c:	eeb0 7a46 	vmov.f32	s14, s12
 8007a70:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007a74:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007a78:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007a7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a84:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a90:	ee10 3a10 	vmov	r3, s0
 8007a94:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a9c:	da1a      	bge.n	8007ad4 <__ieee754_powf+0x538>
 8007a9e:	f000 f8b7 	bl	8007c10 <scalbnf>
 8007aa2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007aa6:	e5cd      	b.n	8007644 <__ieee754_powf+0xa8>
 8007aa8:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <__ieee754_powf+0x578>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	dd02      	ble.n	8007ab4 <__ieee754_powf+0x518>
 8007aae:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8007b18 <__ieee754_powf+0x57c>
 8007ab2:	e67b      	b.n	80077ac <__ieee754_powf+0x210>
 8007ab4:	d108      	bne.n	8007ac8 <__ieee754_powf+0x52c>
 8007ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007aba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	f6ff af7b 	blt.w	80079bc <__ieee754_powf+0x420>
 8007ac6:	e7f2      	b.n	8007aae <__ieee754_powf+0x512>
 8007ac8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007acc:	f73f af76 	bgt.w	80079bc <__ieee754_powf+0x420>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e78f      	b.n	80079f4 <__ieee754_powf+0x458>
 8007ad4:	ee00 3a10 	vmov	s0, r3
 8007ad8:	e7e3      	b.n	8007aa2 <__ieee754_powf+0x506>
 8007ada:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ade:	e5b1      	b.n	8007644 <__ieee754_powf+0xa8>
 8007ae0:	eeb0 0a68 	vmov.f32	s0, s17
 8007ae4:	e5ae      	b.n	8007644 <__ieee754_powf+0xa8>
 8007ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8007aea:	e5ab      	b.n	8007644 <__ieee754_powf+0xa8>
 8007aec:	2600      	movs	r6, #0
 8007aee:	e590      	b.n	8007612 <__ieee754_powf+0x76>
 8007af0:	007fffff 	.word	0x007fffff
 8007af4:	3f317218 	.word	0x3f317218
 8007af8:	35bfbe8c 	.word	0x35bfbe8c
 8007afc:	3f317200 	.word	0x3f317200
 8007b00:	3331bb4c 	.word	0x3331bb4c
 8007b04:	b5ddea0e 	.word	0xb5ddea0e
 8007b08:	388ab355 	.word	0x388ab355
 8007b0c:	bb360b61 	.word	0xbb360b61
 8007b10:	3e2aaaab 	.word	0x3e2aaaab
 8007b14:	43160000 	.word	0x43160000
 8007b18:	0da24260 	.word	0x0da24260

08007b1c <__ieee754_sqrtf>:
 8007b1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007b20:	4770      	bx	lr

08007b22 <fabsf>:
 8007b22:	ee10 3a10 	vmov	r3, s0
 8007b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b2a:	ee00 3a10 	vmov	s0, r3
 8007b2e:	4770      	bx	lr

08007b30 <finitef>:
 8007b30:	b082      	sub	sp, #8
 8007b32:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007b36:	9801      	ldr	r0, [sp, #4]
 8007b38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007b3c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007b40:	bfac      	ite	ge
 8007b42:	2000      	movge	r0, #0
 8007b44:	2001      	movlt	r0, #1
 8007b46:	b002      	add	sp, #8
 8007b48:	4770      	bx	lr
	...

08007b4c <nanf>:
 8007b4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b54 <nanf+0x8>
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	7fc00000 	.word	0x7fc00000

08007b58 <rintf>:
 8007b58:	ee10 2a10 	vmov	r2, s0
 8007b5c:	b513      	push	{r0, r1, r4, lr}
 8007b5e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b62:	397f      	subs	r1, #127	; 0x7f
 8007b64:	2916      	cmp	r1, #22
 8007b66:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007b6a:	dc47      	bgt.n	8007bfc <rintf+0xa4>
 8007b6c:	b32b      	cbz	r3, 8007bba <rintf+0x62>
 8007b6e:	2900      	cmp	r1, #0
 8007b70:	ee10 3a10 	vmov	r3, s0
 8007b74:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007b78:	da21      	bge.n	8007bbe <rintf+0x66>
 8007b7a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8007b7e:	425b      	negs	r3, r3
 8007b80:	4921      	ldr	r1, [pc, #132]	; (8007c08 <rintf+0xb0>)
 8007b82:	0a5b      	lsrs	r3, r3, #9
 8007b84:	0d12      	lsrs	r2, r2, #20
 8007b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8a:	0512      	lsls	r2, r2, #20
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	edd1 6a00 	vldr	s13, [r1]
 8007b9a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007b9e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007ba2:	eddd 7a01 	vldr	s15, [sp, #4]
 8007ba6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007baa:	ee17 3a90 	vmov	r3, s15
 8007bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007bb6:	ee00 3a10 	vmov	s0, r3
 8007bba:	b002      	add	sp, #8
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	4a13      	ldr	r2, [pc, #76]	; (8007c0c <rintf+0xb4>)
 8007bc0:	410a      	asrs	r2, r1
 8007bc2:	4213      	tst	r3, r2
 8007bc4:	d0f9      	beq.n	8007bba <rintf+0x62>
 8007bc6:	0854      	lsrs	r4, r2, #1
 8007bc8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8007bcc:	d006      	beq.n	8007bdc <rintf+0x84>
 8007bce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007bd2:	ea23 0304 	bic.w	r3, r3, r4
 8007bd6:	fa42 f101 	asr.w	r1, r2, r1
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <rintf+0xb0>)
 8007bde:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007be2:	ed90 7a00 	vldr	s14, [r0]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bee:	edcd 7a01 	vstr	s15, [sp, #4]
 8007bf2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007bf6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007bfa:	e7de      	b.n	8007bba <rintf+0x62>
 8007bfc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c00:	d3db      	bcc.n	8007bba <rintf+0x62>
 8007c02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c06:	e7d8      	b.n	8007bba <rintf+0x62>
 8007c08:	0800b3f4 	.word	0x0800b3f4
 8007c0c:	007fffff 	.word	0x007fffff

08007c10 <scalbnf>:
 8007c10:	ee10 3a10 	vmov	r3, s0
 8007c14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c18:	d025      	beq.n	8007c66 <scalbnf+0x56>
 8007c1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c1e:	d302      	bcc.n	8007c26 <scalbnf+0x16>
 8007c20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c24:	4770      	bx	lr
 8007c26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c2a:	d122      	bne.n	8007c72 <scalbnf+0x62>
 8007c2c:	4b2a      	ldr	r3, [pc, #168]	; (8007cd8 <scalbnf+0xc8>)
 8007c2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007cdc <scalbnf+0xcc>
 8007c32:	4298      	cmp	r0, r3
 8007c34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c38:	db16      	blt.n	8007c68 <scalbnf+0x58>
 8007c3a:	ee10 3a10 	vmov	r3, s0
 8007c3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c42:	3a19      	subs	r2, #25
 8007c44:	4402      	add	r2, r0
 8007c46:	2afe      	cmp	r2, #254	; 0xfe
 8007c48:	dd15      	ble.n	8007c76 <scalbnf+0x66>
 8007c4a:	ee10 3a10 	vmov	r3, s0
 8007c4e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007ce0 <scalbnf+0xd0>
 8007c52:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007ce4 <scalbnf+0xd4>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	eeb0 7a67 	vmov.f32	s14, s15
 8007c5c:	bfb8      	it	lt
 8007c5e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c62:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c66:	4770      	bx	lr
 8007c68:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007ce8 <scalbnf+0xd8>
 8007c6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c70:	4770      	bx	lr
 8007c72:	0dd2      	lsrs	r2, r2, #23
 8007c74:	e7e6      	b.n	8007c44 <scalbnf+0x34>
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	dd06      	ble.n	8007c88 <scalbnf+0x78>
 8007c7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c82:	ee00 3a10 	vmov	s0, r3
 8007c86:	4770      	bx	lr
 8007c88:	f112 0f16 	cmn.w	r2, #22
 8007c8c:	da1a      	bge.n	8007cc4 <scalbnf+0xb4>
 8007c8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c92:	4298      	cmp	r0, r3
 8007c94:	ee10 3a10 	vmov	r3, s0
 8007c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c9c:	dd0a      	ble.n	8007cb4 <scalbnf+0xa4>
 8007c9e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007ce0 <scalbnf+0xd0>
 8007ca2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007ce4 <scalbnf+0xd4>
 8007ca6:	eef0 7a40 	vmov.f32	s15, s0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf18      	it	ne
 8007cae:	eeb0 0a47 	vmovne.f32	s0, s14
 8007cb2:	e7db      	b.n	8007c6c <scalbnf+0x5c>
 8007cb4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007ce8 <scalbnf+0xd8>
 8007cb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007cec <scalbnf+0xdc>
 8007cbc:	eef0 7a40 	vmov.f32	s15, s0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	e7f3      	b.n	8007cac <scalbnf+0x9c>
 8007cc4:	3219      	adds	r2, #25
 8007cc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cce:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007cf0 <scalbnf+0xe0>
 8007cd2:	ee07 3a10 	vmov	s14, r3
 8007cd6:	e7c4      	b.n	8007c62 <scalbnf+0x52>
 8007cd8:	ffff3cb0 	.word	0xffff3cb0
 8007cdc:	4c000000 	.word	0x4c000000
 8007ce0:	7149f2ca 	.word	0x7149f2ca
 8007ce4:	f149f2ca 	.word	0xf149f2ca
 8007ce8:	0da24260 	.word	0x0da24260
 8007cec:	8da24260 	.word	0x8da24260
 8007cf0:	33000000 	.word	0x33000000

08007cf4 <atoi>:
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	f000 bd68 	b.w	80087cc <strtol>

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	2000001c 	.word	0x2000001c

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	; (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2600      	movs	r6, #0
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	; (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	; (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f002 ffa0 	bl	800ac60 <_init>
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2600      	movs	r6, #0
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0800b80c 	.word	0x0800b80c
 8007d44:	0800b80c 	.word	0x0800b80c
 8007d48:	0800b80c 	.word	0x0800b80c
 8007d4c:	0800b810 	.word	0x0800b810

08007d50 <__itoa>:
 8007d50:	1e93      	subs	r3, r2, #2
 8007d52:	2b22      	cmp	r3, #34	; 0x22
 8007d54:	b510      	push	{r4, lr}
 8007d56:	460c      	mov	r4, r1
 8007d58:	d904      	bls.n	8007d64 <__itoa+0x14>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	700b      	strb	r3, [r1, #0]
 8007d5e:	461c      	mov	r4, r3
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	2a0a      	cmp	r2, #10
 8007d66:	d109      	bne.n	8007d7c <__itoa+0x2c>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	da07      	bge.n	8007d7c <__itoa+0x2c>
 8007d6c:	232d      	movs	r3, #45	; 0x2d
 8007d6e:	700b      	strb	r3, [r1, #0]
 8007d70:	4240      	negs	r0, r0
 8007d72:	2101      	movs	r1, #1
 8007d74:	4421      	add	r1, r4
 8007d76:	f000 fd33 	bl	80087e0 <__utoa>
 8007d7a:	e7f1      	b.n	8007d60 <__itoa+0x10>
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	e7f9      	b.n	8007d74 <__itoa+0x24>

08007d80 <itoa>:
 8007d80:	f7ff bfe6 	b.w	8007d50 <__itoa>

08007d84 <memcpy>:
 8007d84:	440a      	add	r2, r1
 8007d86:	4291      	cmp	r1, r2
 8007d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d8c:	d100      	bne.n	8007d90 <memcpy+0xc>
 8007d8e:	4770      	bx	lr
 8007d90:	b510      	push	{r4, lr}
 8007d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	d1f9      	bne.n	8007d92 <memcpy+0xe>
 8007d9e:	bd10      	pop	{r4, pc}

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <__cvt>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	ec55 4b10 	vmov	r4, r5, d0
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	460e      	mov	r6, r1
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	bfbb      	ittet	lt
 8007dc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007dc6:	461d      	movlt	r5, r3
 8007dc8:	2300      	movge	r3, #0
 8007dca:	232d      	movlt	r3, #45	; 0x2d
 8007dcc:	700b      	strb	r3, [r1, #0]
 8007dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dd4:	4691      	mov	r9, r2
 8007dd6:	f023 0820 	bic.w	r8, r3, #32
 8007dda:	bfbc      	itt	lt
 8007ddc:	4622      	movlt	r2, r4
 8007dde:	4614      	movlt	r4, r2
 8007de0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007de4:	d005      	beq.n	8007df2 <__cvt+0x42>
 8007de6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dea:	d100      	bne.n	8007dee <__cvt+0x3e>
 8007dec:	3601      	adds	r6, #1
 8007dee:	2102      	movs	r1, #2
 8007df0:	e000      	b.n	8007df4 <__cvt+0x44>
 8007df2:	2103      	movs	r1, #3
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	ab02      	add	r3, sp, #8
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	ec45 4b10 	vmov	d0, r4, r5
 8007e00:	4653      	mov	r3, sl
 8007e02:	4632      	mov	r2, r6
 8007e04:	f000 fdbc 	bl	8008980 <_dtoa_r>
 8007e08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	d102      	bne.n	8007e16 <__cvt+0x66>
 8007e10:	f019 0f01 	tst.w	r9, #1
 8007e14:	d022      	beq.n	8007e5c <__cvt+0xac>
 8007e16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e1a:	eb07 0906 	add.w	r9, r7, r6
 8007e1e:	d110      	bne.n	8007e42 <__cvt+0x92>
 8007e20:	783b      	ldrb	r3, [r7, #0]
 8007e22:	2b30      	cmp	r3, #48	; 0x30
 8007e24:	d10a      	bne.n	8007e3c <__cvt+0x8c>
 8007e26:	2200      	movs	r2, #0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 fe63 	bl	8000af8 <__aeabi_dcmpeq>
 8007e32:	b918      	cbnz	r0, 8007e3c <__cvt+0x8c>
 8007e34:	f1c6 0601 	rsb	r6, r6, #1
 8007e38:	f8ca 6000 	str.w	r6, [sl]
 8007e3c:	f8da 3000 	ldr.w	r3, [sl]
 8007e40:	4499      	add	r9, r3
 8007e42:	2200      	movs	r2, #0
 8007e44:	2300      	movs	r3, #0
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 fe55 	bl	8000af8 <__aeabi_dcmpeq>
 8007e4e:	b108      	cbz	r0, 8007e54 <__cvt+0xa4>
 8007e50:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e54:	2230      	movs	r2, #48	; 0x30
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	454b      	cmp	r3, r9
 8007e5a:	d307      	bcc.n	8007e6c <__cvt+0xbc>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e60:	1bdb      	subs	r3, r3, r7
 8007e62:	4638      	mov	r0, r7
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	b004      	add	sp, #16
 8007e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6c:	1c59      	adds	r1, r3, #1
 8007e6e:	9103      	str	r1, [sp, #12]
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	e7f0      	b.n	8007e56 <__cvt+0xa6>

08007e74 <__exponent>:
 8007e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e76:	4603      	mov	r3, r0
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	4249      	neglt	r1, r1
 8007e7e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e82:	bfb4      	ite	lt
 8007e84:	222d      	movlt	r2, #45	; 0x2d
 8007e86:	222b      	movge	r2, #43	; 0x2b
 8007e88:	2909      	cmp	r1, #9
 8007e8a:	7042      	strb	r2, [r0, #1]
 8007e8c:	dd2a      	ble.n	8007ee4 <__exponent+0x70>
 8007e8e:	f10d 0407 	add.w	r4, sp, #7
 8007e92:	46a4      	mov	ip, r4
 8007e94:	270a      	movs	r7, #10
 8007e96:	46a6      	mov	lr, r4
 8007e98:	460a      	mov	r2, r1
 8007e9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e9e:	fb07 1516 	mls	r5, r7, r6, r1
 8007ea2:	3530      	adds	r5, #48	; 0x30
 8007ea4:	2a63      	cmp	r2, #99	; 0x63
 8007ea6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007eaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007eae:	4631      	mov	r1, r6
 8007eb0:	dcf1      	bgt.n	8007e96 <__exponent+0x22>
 8007eb2:	3130      	adds	r1, #48	; 0x30
 8007eb4:	f1ae 0502 	sub.w	r5, lr, #2
 8007eb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ebc:	1c44      	adds	r4, r0, #1
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4561      	cmp	r1, ip
 8007ec2:	d30a      	bcc.n	8007eda <__exponent+0x66>
 8007ec4:	f10d 0209 	add.w	r2, sp, #9
 8007ec8:	eba2 020e 	sub.w	r2, r2, lr
 8007ecc:	4565      	cmp	r5, ip
 8007ece:	bf88      	it	hi
 8007ed0:	2200      	movhi	r2, #0
 8007ed2:	4413      	add	r3, r2
 8007ed4:	1a18      	subs	r0, r3, r0
 8007ed6:	b003      	add	sp, #12
 8007ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ede:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ee2:	e7ed      	b.n	8007ec0 <__exponent+0x4c>
 8007ee4:	2330      	movs	r3, #48	; 0x30
 8007ee6:	3130      	adds	r1, #48	; 0x30
 8007ee8:	7083      	strb	r3, [r0, #2]
 8007eea:	70c1      	strb	r1, [r0, #3]
 8007eec:	1d03      	adds	r3, r0, #4
 8007eee:	e7f1      	b.n	8007ed4 <__exponent+0x60>

08007ef0 <_printf_float>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ed2d 8b02 	vpush	{d8}
 8007ef8:	b08d      	sub	sp, #52	; 0x34
 8007efa:	460c      	mov	r4, r1
 8007efc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f00:	4616      	mov	r6, r2
 8007f02:	461f      	mov	r7, r3
 8007f04:	4605      	mov	r5, r0
 8007f06:	f001 fb27 	bl	8009558 <_localeconv_r>
 8007f0a:	f8d0 a000 	ldr.w	sl, [r0]
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7f8 f970 	bl	80001f4 <strlen>
 8007f14:	2300      	movs	r3, #0
 8007f16:	930a      	str	r3, [sp, #40]	; 0x28
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f24:	3307      	adds	r3, #7
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	f103 0208 	add.w	r2, r3, #8
 8007f2e:	f8c8 2000 	str.w	r2, [r8]
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f42:	9307      	str	r3, [sp, #28]
 8007f44:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f48:	ee08 0a10 	vmov	s16, r0
 8007f4c:	4b9f      	ldr	r3, [pc, #636]	; (80081cc <_printf_float+0x2dc>)
 8007f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295
 8007f56:	f7f8 fe01 	bl	8000b5c <__aeabi_dcmpun>
 8007f5a:	bb88      	cbnz	r0, 8007fc0 <_printf_float+0xd0>
 8007f5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f60:	4b9a      	ldr	r3, [pc, #616]	; (80081cc <_printf_float+0x2dc>)
 8007f62:	f04f 32ff 	mov.w	r2, #4294967295
 8007f66:	f7f8 fddb 	bl	8000b20 <__aeabi_dcmple>
 8007f6a:	bb48      	cbnz	r0, 8007fc0 <_printf_float+0xd0>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4640      	mov	r0, r8
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7f8 fdca 	bl	8000b0c <__aeabi_dcmplt>
 8007f78:	b110      	cbz	r0, 8007f80 <_printf_float+0x90>
 8007f7a:	232d      	movs	r3, #45	; 0x2d
 8007f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f80:	4b93      	ldr	r3, [pc, #588]	; (80081d0 <_printf_float+0x2e0>)
 8007f82:	4894      	ldr	r0, [pc, #592]	; (80081d4 <_printf_float+0x2e4>)
 8007f84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f88:	bf94      	ite	ls
 8007f8a:	4698      	movls	r8, r3
 8007f8c:	4680      	movhi	r8, r0
 8007f8e:	2303      	movs	r3, #3
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	9b05      	ldr	r3, [sp, #20]
 8007f94:	f023 0204 	bic.w	r2, r3, #4
 8007f98:	6022      	str	r2, [r4, #0]
 8007f9a:	f04f 0900 	mov.w	r9, #0
 8007f9e:	9700      	str	r7, [sp, #0]
 8007fa0:	4633      	mov	r3, r6
 8007fa2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f9d8 	bl	800835c <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	f040 8090 	bne.w	80080d2 <_printf_float+0x1e2>
 8007fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb6:	b00d      	add	sp, #52	; 0x34
 8007fb8:	ecbd 8b02 	vpop	{d8}
 8007fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	f7f8 fdc8 	bl	8000b5c <__aeabi_dcmpun>
 8007fcc:	b140      	cbz	r0, 8007fe0 <_printf_float+0xf0>
 8007fce:	464b      	mov	r3, r9
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bfbc      	itt	lt
 8007fd4:	232d      	movlt	r3, #45	; 0x2d
 8007fd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fda:	487f      	ldr	r0, [pc, #508]	; (80081d8 <_printf_float+0x2e8>)
 8007fdc:	4b7f      	ldr	r3, [pc, #508]	; (80081dc <_printf_float+0x2ec>)
 8007fde:	e7d1      	b.n	8007f84 <_printf_float+0x94>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fe6:	9206      	str	r2, [sp, #24]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	d13f      	bne.n	800806c <_printf_float+0x17c>
 8007fec:	2306      	movs	r3, #6
 8007fee:	6063      	str	r3, [r4, #4]
 8007ff0:	9b05      	ldr	r3, [sp, #20]
 8007ff2:	6861      	ldr	r1, [r4, #4]
 8007ff4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	ab0a      	add	r3, sp, #40	; 0x28
 8007ffe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008002:	ab09      	add	r3, sp, #36	; 0x24
 8008004:	ec49 8b10 	vmov	d0, r8, r9
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008010:	4628      	mov	r0, r5
 8008012:	f7ff fecd 	bl	8007db0 <__cvt>
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800801a:	2b47      	cmp	r3, #71	; 0x47
 800801c:	4680      	mov	r8, r0
 800801e:	d108      	bne.n	8008032 <_printf_float+0x142>
 8008020:	1cc8      	adds	r0, r1, #3
 8008022:	db02      	blt.n	800802a <_printf_float+0x13a>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	4299      	cmp	r1, r3
 8008028:	dd41      	ble.n	80080ae <_printf_float+0x1be>
 800802a:	f1ab 0b02 	sub.w	fp, fp, #2
 800802e:	fa5f fb8b 	uxtb.w	fp, fp
 8008032:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008036:	d820      	bhi.n	800807a <_printf_float+0x18a>
 8008038:	3901      	subs	r1, #1
 800803a:	465a      	mov	r2, fp
 800803c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008040:	9109      	str	r1, [sp, #36]	; 0x24
 8008042:	f7ff ff17 	bl	8007e74 <__exponent>
 8008046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008048:	1813      	adds	r3, r2, r0
 800804a:	2a01      	cmp	r2, #1
 800804c:	4681      	mov	r9, r0
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	dc02      	bgt.n	8008058 <_printf_float+0x168>
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	07d2      	lsls	r2, r2, #31
 8008056:	d501      	bpl.n	800805c <_printf_float+0x16c>
 8008058:	3301      	adds	r3, #1
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008060:	2b00      	cmp	r3, #0
 8008062:	d09c      	beq.n	8007f9e <_printf_float+0xae>
 8008064:	232d      	movs	r3, #45	; 0x2d
 8008066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800806a:	e798      	b.n	8007f9e <_printf_float+0xae>
 800806c:	9a06      	ldr	r2, [sp, #24]
 800806e:	2a47      	cmp	r2, #71	; 0x47
 8008070:	d1be      	bne.n	8007ff0 <_printf_float+0x100>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1bc      	bne.n	8007ff0 <_printf_float+0x100>
 8008076:	2301      	movs	r3, #1
 8008078:	e7b9      	b.n	8007fee <_printf_float+0xfe>
 800807a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800807e:	d118      	bne.n	80080b2 <_printf_float+0x1c2>
 8008080:	2900      	cmp	r1, #0
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	dd0b      	ble.n	800809e <_printf_float+0x1ae>
 8008086:	6121      	str	r1, [r4, #16]
 8008088:	b913      	cbnz	r3, 8008090 <_printf_float+0x1a0>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	07d0      	lsls	r0, r2, #31
 800808e:	d502      	bpl.n	8008096 <_printf_float+0x1a6>
 8008090:	3301      	adds	r3, #1
 8008092:	440b      	add	r3, r1
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	65a1      	str	r1, [r4, #88]	; 0x58
 8008098:	f04f 0900 	mov.w	r9, #0
 800809c:	e7de      	b.n	800805c <_printf_float+0x16c>
 800809e:	b913      	cbnz	r3, 80080a6 <_printf_float+0x1b6>
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	07d2      	lsls	r2, r2, #31
 80080a4:	d501      	bpl.n	80080aa <_printf_float+0x1ba>
 80080a6:	3302      	adds	r3, #2
 80080a8:	e7f4      	b.n	8008094 <_printf_float+0x1a4>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e7f2      	b.n	8008094 <_printf_float+0x1a4>
 80080ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b4:	4299      	cmp	r1, r3
 80080b6:	db05      	blt.n	80080c4 <_printf_float+0x1d4>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	6121      	str	r1, [r4, #16]
 80080bc:	07d8      	lsls	r0, r3, #31
 80080be:	d5ea      	bpl.n	8008096 <_printf_float+0x1a6>
 80080c0:	1c4b      	adds	r3, r1, #1
 80080c2:	e7e7      	b.n	8008094 <_printf_float+0x1a4>
 80080c4:	2900      	cmp	r1, #0
 80080c6:	bfd4      	ite	le
 80080c8:	f1c1 0202 	rsble	r2, r1, #2
 80080cc:	2201      	movgt	r2, #1
 80080ce:	4413      	add	r3, r2
 80080d0:	e7e0      	b.n	8008094 <_printf_float+0x1a4>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	055a      	lsls	r2, r3, #21
 80080d6:	d407      	bmi.n	80080e8 <_printf_float+0x1f8>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	4642      	mov	r2, r8
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	d12c      	bne.n	8008140 <_printf_float+0x250>
 80080e6:	e764      	b.n	8007fb2 <_printf_float+0xc2>
 80080e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080ec:	f240 80e0 	bls.w	80082b0 <_printf_float+0x3c0>
 80080f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	f7f8 fcfe 	bl	8000af8 <__aeabi_dcmpeq>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d034      	beq.n	800816a <_printf_float+0x27a>
 8008100:	4a37      	ldr	r2, [pc, #220]	; (80081e0 <_printf_float+0x2f0>)
 8008102:	2301      	movs	r3, #1
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f af51 	beq.w	8007fb2 <_printf_float+0xc2>
 8008110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008114:	429a      	cmp	r2, r3
 8008116:	db02      	blt.n	800811e <_printf_float+0x22e>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	07d8      	lsls	r0, r3, #31
 800811c:	d510      	bpl.n	8008140 <_printf_float+0x250>
 800811e:	ee18 3a10 	vmov	r3, s16
 8008122:	4652      	mov	r2, sl
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f af41 	beq.w	8007fb2 <_printf_float+0xc2>
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	f104 091a 	add.w	r9, r4, #26
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	3b01      	subs	r3, #1
 800813c:	4543      	cmp	r3, r8
 800813e:	dc09      	bgt.n	8008154 <_printf_float+0x264>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	079b      	lsls	r3, r3, #30
 8008144:	f100 8105 	bmi.w	8008352 <_printf_float+0x462>
 8008148:	68e0      	ldr	r0, [r4, #12]
 800814a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814c:	4298      	cmp	r0, r3
 800814e:	bfb8      	it	lt
 8008150:	4618      	movlt	r0, r3
 8008152:	e730      	b.n	8007fb6 <_printf_float+0xc6>
 8008154:	2301      	movs	r3, #1
 8008156:	464a      	mov	r2, r9
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f af27 	beq.w	8007fb2 <_printf_float+0xc2>
 8008164:	f108 0801 	add.w	r8, r8, #1
 8008168:	e7e6      	b.n	8008138 <_printf_float+0x248>
 800816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc39      	bgt.n	80081e4 <_printf_float+0x2f4>
 8008170:	4a1b      	ldr	r2, [pc, #108]	; (80081e0 <_printf_float+0x2f0>)
 8008172:	2301      	movs	r3, #1
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	f43f af19 	beq.w	8007fb2 <_printf_float+0xc2>
 8008180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008184:	4313      	orrs	r3, r2
 8008186:	d102      	bne.n	800818e <_printf_float+0x29e>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	07d9      	lsls	r1, r3, #31
 800818c:	d5d8      	bpl.n	8008140 <_printf_float+0x250>
 800818e:	ee18 3a10 	vmov	r3, s16
 8008192:	4652      	mov	r2, sl
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f af09 	beq.w	8007fb2 <_printf_float+0xc2>
 80081a0:	f04f 0900 	mov.w	r9, #0
 80081a4:	f104 0a1a 	add.w	sl, r4, #26
 80081a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081aa:	425b      	negs	r3, r3
 80081ac:	454b      	cmp	r3, r9
 80081ae:	dc01      	bgt.n	80081b4 <_printf_float+0x2c4>
 80081b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b2:	e792      	b.n	80080da <_printf_float+0x1ea>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4652      	mov	r2, sl
 80081b8:	4631      	mov	r1, r6
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b8      	blx	r7
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f aef7 	beq.w	8007fb2 <_printf_float+0xc2>
 80081c4:	f109 0901 	add.w	r9, r9, #1
 80081c8:	e7ee      	b.n	80081a8 <_printf_float+0x2b8>
 80081ca:	bf00      	nop
 80081cc:	7fefffff 	.word	0x7fefffff
 80081d0:	0800b400 	.word	0x0800b400
 80081d4:	0800b404 	.word	0x0800b404
 80081d8:	0800b40c 	.word	0x0800b40c
 80081dc:	0800b408 	.word	0x0800b408
 80081e0:	0800b410 	.word	0x0800b410
 80081e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081e8:	429a      	cmp	r2, r3
 80081ea:	bfa8      	it	ge
 80081ec:	461a      	movge	r2, r3
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	4691      	mov	r9, r2
 80081f2:	dc37      	bgt.n	8008264 <_printf_float+0x374>
 80081f4:	f04f 0b00 	mov.w	fp, #0
 80081f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081fc:	f104 021a 	add.w	r2, r4, #26
 8008200:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	eba3 0309 	sub.w	r3, r3, r9
 8008208:	455b      	cmp	r3, fp
 800820a:	dc33      	bgt.n	8008274 <_printf_float+0x384>
 800820c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008210:	429a      	cmp	r2, r3
 8008212:	db3b      	blt.n	800828c <_printf_float+0x39c>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	07da      	lsls	r2, r3, #31
 8008218:	d438      	bmi.n	800828c <_printf_float+0x39c>
 800821a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800821c:	9b05      	ldr	r3, [sp, #20]
 800821e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	eba2 0901 	sub.w	r9, r2, r1
 8008226:	4599      	cmp	r9, r3
 8008228:	bfa8      	it	ge
 800822a:	4699      	movge	r9, r3
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	dc35      	bgt.n	800829e <_printf_float+0x3ae>
 8008232:	f04f 0800 	mov.w	r8, #0
 8008236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823a:	f104 0a1a 	add.w	sl, r4, #26
 800823e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	eba3 0309 	sub.w	r3, r3, r9
 8008248:	4543      	cmp	r3, r8
 800824a:	f77f af79 	ble.w	8008140 <_printf_float+0x250>
 800824e:	2301      	movs	r3, #1
 8008250:	4652      	mov	r2, sl
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	f43f aeaa 	beq.w	8007fb2 <_printf_float+0xc2>
 800825e:	f108 0801 	add.w	r8, r8, #1
 8008262:	e7ec      	b.n	800823e <_printf_float+0x34e>
 8008264:	4613      	mov	r3, r2
 8008266:	4631      	mov	r1, r6
 8008268:	4642      	mov	r2, r8
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	d1c0      	bne.n	80081f4 <_printf_float+0x304>
 8008272:	e69e      	b.n	8007fb2 <_printf_float+0xc2>
 8008274:	2301      	movs	r3, #1
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	9205      	str	r2, [sp, #20]
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f ae97 	beq.w	8007fb2 <_printf_float+0xc2>
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	f10b 0b01 	add.w	fp, fp, #1
 800828a:	e7b9      	b.n	8008200 <_printf_float+0x310>
 800828c:	ee18 3a10 	vmov	r3, s16
 8008290:	4652      	mov	r2, sl
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	d1be      	bne.n	800821a <_printf_float+0x32a>
 800829c:	e689      	b.n	8007fb2 <_printf_float+0xc2>
 800829e:	9a05      	ldr	r2, [sp, #20]
 80082a0:	464b      	mov	r3, r9
 80082a2:	4442      	add	r2, r8
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	d1c1      	bne.n	8008232 <_printf_float+0x342>
 80082ae:	e680      	b.n	8007fb2 <_printf_float+0xc2>
 80082b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	dc01      	bgt.n	80082ba <_printf_float+0x3ca>
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d538      	bpl.n	800832c <_printf_float+0x43c>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4642      	mov	r2, r8
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	f43f ae74 	beq.w	8007fb2 <_printf_float+0xc2>
 80082ca:	ee18 3a10 	vmov	r3, s16
 80082ce:	4652      	mov	r2, sl
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f ae6b 	beq.w	8007fb2 <_printf_float+0xc2>
 80082dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fc08 	bl	8000af8 <__aeabi_dcmpeq>
 80082e8:	b9d8      	cbnz	r0, 8008322 <_printf_float+0x432>
 80082ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ec:	f108 0201 	add.w	r2, r8, #1
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	d10e      	bne.n	800831a <_printf_float+0x42a>
 80082fc:	e659      	b.n	8007fb2 <_printf_float+0xc2>
 80082fe:	2301      	movs	r3, #1
 8008300:	4652      	mov	r2, sl
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f ae52 	beq.w	8007fb2 <_printf_float+0xc2>
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008314:	3b01      	subs	r3, #1
 8008316:	4543      	cmp	r3, r8
 8008318:	dcf1      	bgt.n	80082fe <_printf_float+0x40e>
 800831a:	464b      	mov	r3, r9
 800831c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008320:	e6dc      	b.n	80080dc <_printf_float+0x1ec>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	f104 0a1a 	add.w	sl, r4, #26
 800832a:	e7f2      	b.n	8008312 <_printf_float+0x422>
 800832c:	2301      	movs	r3, #1
 800832e:	4642      	mov	r2, r8
 8008330:	e7df      	b.n	80082f2 <_printf_float+0x402>
 8008332:	2301      	movs	r3, #1
 8008334:	464a      	mov	r2, r9
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae38 	beq.w	8007fb2 <_printf_float+0xc2>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800834a:	1a5b      	subs	r3, r3, r1
 800834c:	4543      	cmp	r3, r8
 800834e:	dcf0      	bgt.n	8008332 <_printf_float+0x442>
 8008350:	e6fa      	b.n	8008148 <_printf_float+0x258>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	f104 0919 	add.w	r9, r4, #25
 800835a:	e7f4      	b.n	8008346 <_printf_float+0x456>

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4699      	mov	r9, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800836c:	4293      	cmp	r3, r2
 800836e:	bfb8      	it	lt
 8008370:	4613      	movlt	r3, r2
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008378:	4607      	mov	r7, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc26      	bgt.n	80083f2 <_printf_common+0x96>
 80083a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a8:	1e13      	subs	r3, r2, #0
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42b      	bmi.n	800840c <_printf_common+0xb0>
 80083b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b8:	4649      	mov	r1, r9
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c0      	blx	r8
 80083be:	3001      	adds	r0, #1
 80083c0:	d01e      	beq.n	8008400 <_printf_common+0xa4>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	68e5      	ldr	r5, [r4, #12]
 80083c6:	6832      	ldr	r2, [r6, #0]
 80083c8:	f003 0306 	and.w	r3, r3, #6
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	bf08      	it	eq
 80083d0:	1aad      	subeq	r5, r5, r2
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	bf0c      	ite	eq
 80083d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083dc:	2500      	movne	r5, #0
 80083de:	4293      	cmp	r3, r2
 80083e0:	bfc4      	itt	gt
 80083e2:	1a9b      	subgt	r3, r3, r2
 80083e4:	18ed      	addgt	r5, r5, r3
 80083e6:	2600      	movs	r6, #0
 80083e8:	341a      	adds	r4, #26
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	d11a      	bne.n	8008424 <_printf_common+0xc8>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e008      	b.n	8008404 <_printf_common+0xa8>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4649      	mov	r1, r9
 80083f8:	4638      	mov	r0, r7
 80083fa:	47c0      	blx	r8
 80083fc:	3001      	adds	r0, #1
 80083fe:	d103      	bne.n	8008408 <_printf_common+0xac>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	3501      	adds	r5, #1
 800840a:	e7c6      	b.n	800839a <_printf_common+0x3e>
 800840c:	18e1      	adds	r1, r4, r3
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	2030      	movs	r0, #48	; 0x30
 8008412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008416:	4422      	add	r2, r4
 8008418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800841c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008420:	3302      	adds	r3, #2
 8008422:	e7c7      	b.n	80083b4 <_printf_common+0x58>
 8008424:	2301      	movs	r3, #1
 8008426:	4622      	mov	r2, r4
 8008428:	4649      	mov	r1, r9
 800842a:	4638      	mov	r0, r7
 800842c:	47c0      	blx	r8
 800842e:	3001      	adds	r0, #1
 8008430:	d0e6      	beq.n	8008400 <_printf_common+0xa4>
 8008432:	3601      	adds	r6, #1
 8008434:	e7d9      	b.n	80083ea <_printf_common+0x8e>
	...

08008438 <_printf_i>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4691      	mov	r9, r2
 8008440:	7e27      	ldrb	r7, [r4, #24]
 8008442:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008444:	2f78      	cmp	r7, #120	; 0x78
 8008446:	4680      	mov	r8, r0
 8008448:	469a      	mov	sl, r3
 800844a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844e:	d807      	bhi.n	8008460 <_printf_i+0x28>
 8008450:	2f62      	cmp	r7, #98	; 0x62
 8008452:	d80a      	bhi.n	800846a <_printf_i+0x32>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f000 80d8 	beq.w	800860a <_printf_i+0x1d2>
 800845a:	2f58      	cmp	r7, #88	; 0x58
 800845c:	f000 80a3 	beq.w	80085a6 <_printf_i+0x16e>
 8008460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008468:	e03a      	b.n	80084e0 <_printf_i+0xa8>
 800846a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800846e:	2b15      	cmp	r3, #21
 8008470:	d8f6      	bhi.n	8008460 <_printf_i+0x28>
 8008472:	a001      	add	r0, pc, #4	; (adr r0, 8008478 <_printf_i+0x40>)
 8008474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084e5 	.word	0x080084e5
 8008480:	08008461 	.word	0x08008461
 8008484:	08008461 	.word	0x08008461
 8008488:	08008461 	.word	0x08008461
 800848c:	08008461 	.word	0x08008461
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008461 	.word	0x08008461
 8008498:	08008461 	.word	0x08008461
 800849c:	08008461 	.word	0x08008461
 80084a0:	08008461 	.word	0x08008461
 80084a4:	080085f1 	.word	0x080085f1
 80084a8:	08008515 	.word	0x08008515
 80084ac:	080085d3 	.word	0x080085d3
 80084b0:	08008461 	.word	0x08008461
 80084b4:	08008461 	.word	0x08008461
 80084b8:	08008613 	.word	0x08008613
 80084bc:	08008461 	.word	0x08008461
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008461 	.word	0x08008461
 80084c8:	08008461 	.word	0x08008461
 80084cc:	080085db 	.word	0x080085db
 80084d0:	680b      	ldr	r3, [r1, #0]
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	600a      	str	r2, [r1, #0]
 80084d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0a3      	b.n	800862c <_printf_i+0x1f4>
 80084e4:	6825      	ldr	r5, [r4, #0]
 80084e6:	6808      	ldr	r0, [r1, #0]
 80084e8:	062e      	lsls	r6, r5, #24
 80084ea:	f100 0304 	add.w	r3, r0, #4
 80084ee:	d50a      	bpl.n	8008506 <_printf_i+0xce>
 80084f0:	6805      	ldr	r5, [r0, #0]
 80084f2:	600b      	str	r3, [r1, #0]
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	da03      	bge.n	8008500 <_printf_i+0xc8>
 80084f8:	232d      	movs	r3, #45	; 0x2d
 80084fa:	426d      	negs	r5, r5
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	485e      	ldr	r0, [pc, #376]	; (800867c <_printf_i+0x244>)
 8008502:	230a      	movs	r3, #10
 8008504:	e019      	b.n	800853a <_printf_i+0x102>
 8008506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800850a:	6805      	ldr	r5, [r0, #0]
 800850c:	600b      	str	r3, [r1, #0]
 800850e:	bf18      	it	ne
 8008510:	b22d      	sxthne	r5, r5
 8008512:	e7ef      	b.n	80084f4 <_printf_i+0xbc>
 8008514:	680b      	ldr	r3, [r1, #0]
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	1d18      	adds	r0, r3, #4
 800851a:	6008      	str	r0, [r1, #0]
 800851c:	0628      	lsls	r0, r5, #24
 800851e:	d501      	bpl.n	8008524 <_printf_i+0xec>
 8008520:	681d      	ldr	r5, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0xf2>
 8008524:	0669      	lsls	r1, r5, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0xe8>
 8008528:	881d      	ldrh	r5, [r3, #0]
 800852a:	4854      	ldr	r0, [pc, #336]	; (800867c <_printf_i+0x244>)
 800852c:	2f6f      	cmp	r7, #111	; 0x6f
 800852e:	bf0c      	ite	eq
 8008530:	2308      	moveq	r3, #8
 8008532:	230a      	movne	r3, #10
 8008534:	2100      	movs	r1, #0
 8008536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853a:	6866      	ldr	r6, [r4, #4]
 800853c:	60a6      	str	r6, [r4, #8]
 800853e:	2e00      	cmp	r6, #0
 8008540:	bfa2      	ittt	ge
 8008542:	6821      	ldrge	r1, [r4, #0]
 8008544:	f021 0104 	bicge.w	r1, r1, #4
 8008548:	6021      	strge	r1, [r4, #0]
 800854a:	b90d      	cbnz	r5, 8008550 <_printf_i+0x118>
 800854c:	2e00      	cmp	r6, #0
 800854e:	d04d      	beq.n	80085ec <_printf_i+0x1b4>
 8008550:	4616      	mov	r6, r2
 8008552:	fbb5 f1f3 	udiv	r1, r5, r3
 8008556:	fb03 5711 	mls	r7, r3, r1, r5
 800855a:	5dc7      	ldrb	r7, [r0, r7]
 800855c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008560:	462f      	mov	r7, r5
 8008562:	42bb      	cmp	r3, r7
 8008564:	460d      	mov	r5, r1
 8008566:	d9f4      	bls.n	8008552 <_printf_i+0x11a>
 8008568:	2b08      	cmp	r3, #8
 800856a:	d10b      	bne.n	8008584 <_printf_i+0x14c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07df      	lsls	r7, r3, #31
 8008570:	d508      	bpl.n	8008584 <_printf_i+0x14c>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	6861      	ldr	r1, [r4, #4]
 8008576:	4299      	cmp	r1, r3
 8008578:	bfde      	ittt	le
 800857a:	2330      	movle	r3, #48	; 0x30
 800857c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008584:	1b92      	subs	r2, r2, r6
 8008586:	6122      	str	r2, [r4, #16]
 8008588:	f8cd a000 	str.w	sl, [sp]
 800858c:	464b      	mov	r3, r9
 800858e:	aa03      	add	r2, sp, #12
 8008590:	4621      	mov	r1, r4
 8008592:	4640      	mov	r0, r8
 8008594:	f7ff fee2 	bl	800835c <_printf_common>
 8008598:	3001      	adds	r0, #1
 800859a:	d14c      	bne.n	8008636 <_printf_i+0x1fe>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b004      	add	sp, #16
 80085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a6:	4835      	ldr	r0, [pc, #212]	; (800867c <_printf_i+0x244>)
 80085a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	680e      	ldr	r6, [r1, #0]
 80085b0:	061f      	lsls	r7, r3, #24
 80085b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80085b6:	600e      	str	r6, [r1, #0]
 80085b8:	d514      	bpl.n	80085e4 <_printf_i+0x1ac>
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	bf44      	itt	mi
 80085be:	f043 0320 	orrmi.w	r3, r3, #32
 80085c2:	6023      	strmi	r3, [r4, #0]
 80085c4:	b91d      	cbnz	r5, 80085ce <_printf_i+0x196>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f023 0320 	bic.w	r3, r3, #32
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	2310      	movs	r3, #16
 80085d0:	e7b0      	b.n	8008534 <_printf_i+0xfc>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	f043 0320 	orr.w	r3, r3, #32
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	2378      	movs	r3, #120	; 0x78
 80085dc:	4828      	ldr	r0, [pc, #160]	; (8008680 <_printf_i+0x248>)
 80085de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e2:	e7e3      	b.n	80085ac <_printf_i+0x174>
 80085e4:	065e      	lsls	r6, r3, #25
 80085e6:	bf48      	it	mi
 80085e8:	b2ad      	uxthmi	r5, r5
 80085ea:	e7e6      	b.n	80085ba <_printf_i+0x182>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bb      	b.n	8008568 <_printf_i+0x130>
 80085f0:	680b      	ldr	r3, [r1, #0]
 80085f2:	6826      	ldr	r6, [r4, #0]
 80085f4:	6960      	ldr	r0, [r4, #20]
 80085f6:	1d1d      	adds	r5, r3, #4
 80085f8:	600d      	str	r5, [r1, #0]
 80085fa:	0635      	lsls	r5, r6, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1cc>
 8008600:	6018      	str	r0, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1d2>
 8008604:	0671      	lsls	r1, r6, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1c8>
 8008608:	8018      	strh	r0, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7ba      	b.n	8008588 <_printf_i+0x150>
 8008612:	680b      	ldr	r3, [r1, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	600a      	str	r2, [r1, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdf6 	bl	8000210 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1f2>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	e7a8      	b.n	8008588 <_printf_i+0x150>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ab      	beq.n	800859c <_printf_i+0x164>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x23a>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a4      	b.n	80085a0 <_printf_i+0x168>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09b      	beq.n	800859c <_printf_i+0x164>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x21e>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x212>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x22e>
 800867a:	bf00      	nop
 800867c:	0800b412 	.word	0x0800b412
 8008680:	0800b423 	.word	0x0800b423

08008684 <siprintf>:
 8008684:	b40e      	push	{r1, r2, r3}
 8008686:	b500      	push	{lr}
 8008688:	b09c      	sub	sp, #112	; 0x70
 800868a:	ab1d      	add	r3, sp, #116	; 0x74
 800868c:	9002      	str	r0, [sp, #8]
 800868e:	9006      	str	r0, [sp, #24]
 8008690:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008694:	4809      	ldr	r0, [pc, #36]	; (80086bc <siprintf+0x38>)
 8008696:	9107      	str	r1, [sp, #28]
 8008698:	9104      	str	r1, [sp, #16]
 800869a:	4909      	ldr	r1, [pc, #36]	; (80086c0 <siprintf+0x3c>)
 800869c:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	6800      	ldr	r0, [r0, #0]
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	a902      	add	r1, sp, #8
 80086a8:	f001 fbf6 	bl	8009e98 <_svfiprintf_r>
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	b01c      	add	sp, #112	; 0x70
 80086b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b8:	b003      	add	sp, #12
 80086ba:	4770      	bx	lr
 80086bc:	2000001c 	.word	0x2000001c
 80086c0:	ffff0208 	.word	0xffff0208

080086c4 <_strtol_l.isra.0>:
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ca:	d001      	beq.n	80086d0 <_strtol_l.isra.0+0xc>
 80086cc:	2b24      	cmp	r3, #36	; 0x24
 80086ce:	d906      	bls.n	80086de <_strtol_l.isra.0+0x1a>
 80086d0:	f7ff fb14 	bl	8007cfc <__errno>
 80086d4:	2316      	movs	r3, #22
 80086d6:	6003      	str	r3, [r0, #0]
 80086d8:	2000      	movs	r0, #0
 80086da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086de:	4f3a      	ldr	r7, [pc, #232]	; (80087c8 <_strtol_l.isra.0+0x104>)
 80086e0:	468e      	mov	lr, r1
 80086e2:	4676      	mov	r6, lr
 80086e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80086e8:	5de5      	ldrb	r5, [r4, r7]
 80086ea:	f015 0508 	ands.w	r5, r5, #8
 80086ee:	d1f8      	bne.n	80086e2 <_strtol_l.isra.0+0x1e>
 80086f0:	2c2d      	cmp	r4, #45	; 0x2d
 80086f2:	d134      	bne.n	800875e <_strtol_l.isra.0+0x9a>
 80086f4:	f89e 4000 	ldrb.w	r4, [lr]
 80086f8:	f04f 0801 	mov.w	r8, #1
 80086fc:	f106 0e02 	add.w	lr, r6, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05c      	beq.n	80087be <_strtol_l.isra.0+0xfa>
 8008704:	2b10      	cmp	r3, #16
 8008706:	d10c      	bne.n	8008722 <_strtol_l.isra.0+0x5e>
 8008708:	2c30      	cmp	r4, #48	; 0x30
 800870a:	d10a      	bne.n	8008722 <_strtol_l.isra.0+0x5e>
 800870c:	f89e 4000 	ldrb.w	r4, [lr]
 8008710:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008714:	2c58      	cmp	r4, #88	; 0x58
 8008716:	d14d      	bne.n	80087b4 <_strtol_l.isra.0+0xf0>
 8008718:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800871c:	2310      	movs	r3, #16
 800871e:	f10e 0e02 	add.w	lr, lr, #2
 8008722:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008726:	f10c 3cff 	add.w	ip, ip, #4294967295
 800872a:	2600      	movs	r6, #0
 800872c:	fbbc f9f3 	udiv	r9, ip, r3
 8008730:	4635      	mov	r5, r6
 8008732:	fb03 ca19 	mls	sl, r3, r9, ip
 8008736:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800873a:	2f09      	cmp	r7, #9
 800873c:	d818      	bhi.n	8008770 <_strtol_l.isra.0+0xac>
 800873e:	463c      	mov	r4, r7
 8008740:	42a3      	cmp	r3, r4
 8008742:	dd24      	ble.n	800878e <_strtol_l.isra.0+0xca>
 8008744:	2e00      	cmp	r6, #0
 8008746:	db1f      	blt.n	8008788 <_strtol_l.isra.0+0xc4>
 8008748:	45a9      	cmp	r9, r5
 800874a:	d31d      	bcc.n	8008788 <_strtol_l.isra.0+0xc4>
 800874c:	d101      	bne.n	8008752 <_strtol_l.isra.0+0x8e>
 800874e:	45a2      	cmp	sl, r4
 8008750:	db1a      	blt.n	8008788 <_strtol_l.isra.0+0xc4>
 8008752:	fb05 4503 	mla	r5, r5, r3, r4
 8008756:	2601      	movs	r6, #1
 8008758:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800875c:	e7eb      	b.n	8008736 <_strtol_l.isra.0+0x72>
 800875e:	2c2b      	cmp	r4, #43	; 0x2b
 8008760:	bf08      	it	eq
 8008762:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008766:	46a8      	mov	r8, r5
 8008768:	bf08      	it	eq
 800876a:	f106 0e02 	addeq.w	lr, r6, #2
 800876e:	e7c7      	b.n	8008700 <_strtol_l.isra.0+0x3c>
 8008770:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008774:	2f19      	cmp	r7, #25
 8008776:	d801      	bhi.n	800877c <_strtol_l.isra.0+0xb8>
 8008778:	3c37      	subs	r4, #55	; 0x37
 800877a:	e7e1      	b.n	8008740 <_strtol_l.isra.0+0x7c>
 800877c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008780:	2f19      	cmp	r7, #25
 8008782:	d804      	bhi.n	800878e <_strtol_l.isra.0+0xca>
 8008784:	3c57      	subs	r4, #87	; 0x57
 8008786:	e7db      	b.n	8008740 <_strtol_l.isra.0+0x7c>
 8008788:	f04f 36ff 	mov.w	r6, #4294967295
 800878c:	e7e4      	b.n	8008758 <_strtol_l.isra.0+0x94>
 800878e:	2e00      	cmp	r6, #0
 8008790:	da05      	bge.n	800879e <_strtol_l.isra.0+0xda>
 8008792:	2322      	movs	r3, #34	; 0x22
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	4665      	mov	r5, ip
 8008798:	b942      	cbnz	r2, 80087ac <_strtol_l.isra.0+0xe8>
 800879a:	4628      	mov	r0, r5
 800879c:	e79d      	b.n	80086da <_strtol_l.isra.0+0x16>
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	d000      	beq.n	80087a6 <_strtol_l.isra.0+0xe2>
 80087a4:	426d      	negs	r5, r5
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d0f7      	beq.n	800879a <_strtol_l.isra.0+0xd6>
 80087aa:	b10e      	cbz	r6, 80087b0 <_strtol_l.isra.0+0xec>
 80087ac:	f10e 31ff 	add.w	r1, lr, #4294967295
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	e7f2      	b.n	800879a <_strtol_l.isra.0+0xd6>
 80087b4:	2430      	movs	r4, #48	; 0x30
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1b3      	bne.n	8008722 <_strtol_l.isra.0+0x5e>
 80087ba:	2308      	movs	r3, #8
 80087bc:	e7b1      	b.n	8008722 <_strtol_l.isra.0+0x5e>
 80087be:	2c30      	cmp	r4, #48	; 0x30
 80087c0:	d0a4      	beq.n	800870c <_strtol_l.isra.0+0x48>
 80087c2:	230a      	movs	r3, #10
 80087c4:	e7ad      	b.n	8008722 <_strtol_l.isra.0+0x5e>
 80087c6:	bf00      	nop
 80087c8:	0800b45a 	.word	0x0800b45a

080087cc <strtol>:
 80087cc:	4613      	mov	r3, r2
 80087ce:	460a      	mov	r2, r1
 80087d0:	4601      	mov	r1, r0
 80087d2:	4802      	ldr	r0, [pc, #8]	; (80087dc <strtol+0x10>)
 80087d4:	6800      	ldr	r0, [r0, #0]
 80087d6:	f7ff bf75 	b.w	80086c4 <_strtol_l.isra.0>
 80087da:	bf00      	nop
 80087dc:	2000001c 	.word	0x2000001c

080087e0 <__utoa>:
 80087e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e2:	4c1f      	ldr	r4, [pc, #124]	; (8008860 <__utoa+0x80>)
 80087e4:	b08b      	sub	sp, #44	; 0x2c
 80087e6:	4605      	mov	r5, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	466e      	mov	r6, sp
 80087ec:	f104 0c20 	add.w	ip, r4, #32
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	6861      	ldr	r1, [r4, #4]
 80087f4:	4637      	mov	r7, r6
 80087f6:	c703      	stmia	r7!, {r0, r1}
 80087f8:	3408      	adds	r4, #8
 80087fa:	4564      	cmp	r4, ip
 80087fc:	463e      	mov	r6, r7
 80087fe:	d1f7      	bne.n	80087f0 <__utoa+0x10>
 8008800:	7921      	ldrb	r1, [r4, #4]
 8008802:	7139      	strb	r1, [r7, #4]
 8008804:	1e91      	subs	r1, r2, #2
 8008806:	6820      	ldr	r0, [r4, #0]
 8008808:	6038      	str	r0, [r7, #0]
 800880a:	2922      	cmp	r1, #34	; 0x22
 800880c:	f04f 0100 	mov.w	r1, #0
 8008810:	d904      	bls.n	800881c <__utoa+0x3c>
 8008812:	7019      	strb	r1, [r3, #0]
 8008814:	460b      	mov	r3, r1
 8008816:	4618      	mov	r0, r3
 8008818:	b00b      	add	sp, #44	; 0x2c
 800881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881c:	1e58      	subs	r0, r3, #1
 800881e:	4684      	mov	ip, r0
 8008820:	fbb5 f7f2 	udiv	r7, r5, r2
 8008824:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008828:	fb02 5617 	mls	r6, r2, r7, r5
 800882c:	4476      	add	r6, lr
 800882e:	460c      	mov	r4, r1
 8008830:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008834:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008838:	462e      	mov	r6, r5
 800883a:	42b2      	cmp	r2, r6
 800883c:	f101 0101 	add.w	r1, r1, #1
 8008840:	463d      	mov	r5, r7
 8008842:	d9ed      	bls.n	8008820 <__utoa+0x40>
 8008844:	2200      	movs	r2, #0
 8008846:	545a      	strb	r2, [r3, r1]
 8008848:	1919      	adds	r1, r3, r4
 800884a:	1aa5      	subs	r5, r4, r2
 800884c:	42aa      	cmp	r2, r5
 800884e:	dae2      	bge.n	8008816 <__utoa+0x36>
 8008850:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008854:	780e      	ldrb	r6, [r1, #0]
 8008856:	7006      	strb	r6, [r0, #0]
 8008858:	3201      	adds	r2, #1
 800885a:	f801 5901 	strb.w	r5, [r1], #-1
 800885e:	e7f4      	b.n	800884a <__utoa+0x6a>
 8008860:	0800b434 	.word	0x0800b434

08008864 <quorem>:
 8008864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	6903      	ldr	r3, [r0, #16]
 800886a:	690c      	ldr	r4, [r1, #16]
 800886c:	42a3      	cmp	r3, r4
 800886e:	4607      	mov	r7, r0
 8008870:	f2c0 8081 	blt.w	8008976 <quorem+0x112>
 8008874:	3c01      	subs	r4, #1
 8008876:	f101 0814 	add.w	r8, r1, #20
 800887a:	f100 0514 	add.w	r5, r0, #20
 800887e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888c:	3301      	adds	r3, #1
 800888e:	429a      	cmp	r2, r3
 8008890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008898:	fbb2 f6f3 	udiv	r6, r2, r3
 800889c:	d331      	bcc.n	8008902 <quorem+0x9e>
 800889e:	f04f 0e00 	mov.w	lr, #0
 80088a2:	4640      	mov	r0, r8
 80088a4:	46ac      	mov	ip, r5
 80088a6:	46f2      	mov	sl, lr
 80088a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ac:	b293      	uxth	r3, r2
 80088ae:	fb06 e303 	mla	r3, r6, r3, lr
 80088b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	ebaa 0303 	sub.w	r3, sl, r3
 80088bc:	0c12      	lsrs	r2, r2, #16
 80088be:	f8dc a000 	ldr.w	sl, [ip]
 80088c2:	fb06 e202 	mla	r2, r6, r2, lr
 80088c6:	fa13 f38a 	uxtah	r3, r3, sl
 80088ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ce:	fa1f fa82 	uxth.w	sl, r2
 80088d2:	f8dc 2000 	ldr.w	r2, [ip]
 80088d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088e4:	4581      	cmp	r9, r0
 80088e6:	f84c 3b04 	str.w	r3, [ip], #4
 80088ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088ee:	d2db      	bcs.n	80088a8 <quorem+0x44>
 80088f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80088f4:	b92b      	cbnz	r3, 8008902 <quorem+0x9e>
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	3b04      	subs	r3, #4
 80088fa:	429d      	cmp	r5, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	d32e      	bcc.n	800895e <quorem+0xfa>
 8008900:	613c      	str	r4, [r7, #16]
 8008902:	4638      	mov	r0, r7
 8008904:	f001 f8b2 	bl	8009a6c <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	db24      	blt.n	8008956 <quorem+0xf2>
 800890c:	3601      	adds	r6, #1
 800890e:	4628      	mov	r0, r5
 8008910:	f04f 0c00 	mov.w	ip, #0
 8008914:	f858 2b04 	ldr.w	r2, [r8], #4
 8008918:	f8d0 e000 	ldr.w	lr, [r0]
 800891c:	b293      	uxth	r3, r2
 800891e:	ebac 0303 	sub.w	r3, ip, r3
 8008922:	0c12      	lsrs	r2, r2, #16
 8008924:	fa13 f38e 	uxtah	r3, r3, lr
 8008928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800892c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008936:	45c1      	cmp	r9, r8
 8008938:	f840 3b04 	str.w	r3, [r0], #4
 800893c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008940:	d2e8      	bcs.n	8008914 <quorem+0xb0>
 8008942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800894a:	b922      	cbnz	r2, 8008956 <quorem+0xf2>
 800894c:	3b04      	subs	r3, #4
 800894e:	429d      	cmp	r5, r3
 8008950:	461a      	mov	r2, r3
 8008952:	d30a      	bcc.n	800896a <quorem+0x106>
 8008954:	613c      	str	r4, [r7, #16]
 8008956:	4630      	mov	r0, r6
 8008958:	b003      	add	sp, #12
 800895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	3b04      	subs	r3, #4
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1cc      	bne.n	8008900 <quorem+0x9c>
 8008966:	3c01      	subs	r4, #1
 8008968:	e7c7      	b.n	80088fa <quorem+0x96>
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	3b04      	subs	r3, #4
 800896e:	2a00      	cmp	r2, #0
 8008970:	d1f0      	bne.n	8008954 <quorem+0xf0>
 8008972:	3c01      	subs	r4, #1
 8008974:	e7eb      	b.n	800894e <quorem+0xea>
 8008976:	2000      	movs	r0, #0
 8008978:	e7ee      	b.n	8008958 <quorem+0xf4>
 800897a:	0000      	movs	r0, r0
 800897c:	0000      	movs	r0, r0
	...

08008980 <_dtoa_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b02 	vpush	{d8}
 8008988:	ec57 6b10 	vmov	r6, r7, d0
 800898c:	b095      	sub	sp, #84	; 0x54
 800898e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008994:	9105      	str	r1, [sp, #20]
 8008996:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800899a:	4604      	mov	r4, r0
 800899c:	9209      	str	r2, [sp, #36]	; 0x24
 800899e:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a0:	b975      	cbnz	r5, 80089c0 <_dtoa_r+0x40>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f000 fddc 	bl	8009560 <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6260      	str	r0, [r4, #36]	; 0x24
 80089ac:	b920      	cbnz	r0, 80089b8 <_dtoa_r+0x38>
 80089ae:	4bb2      	ldr	r3, [pc, #712]	; (8008c78 <_dtoa_r+0x2f8>)
 80089b0:	21ea      	movs	r1, #234	; 0xea
 80089b2:	48b2      	ldr	r0, [pc, #712]	; (8008c7c <_dtoa_r+0x2fc>)
 80089b4:	f001 fb80 	bl	800a0b8 <__assert_func>
 80089b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089bc:	6005      	str	r5, [r0, #0]
 80089be:	60c5      	str	r5, [r0, #12]
 80089c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	b151      	cbz	r1, 80089dc <_dtoa_r+0x5c>
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	604a      	str	r2, [r1, #4]
 80089ca:	2301      	movs	r3, #1
 80089cc:	4093      	lsls	r3, r2
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fe0d 	bl	80095f0 <_Bfree>
 80089d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	1e3b      	subs	r3, r7, #0
 80089de:	bfb9      	ittee	lt
 80089e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	9303      	strlt	r3, [sp, #12]
 80089e6:	2300      	movge	r3, #0
 80089e8:	f8c8 3000 	strge.w	r3, [r8]
 80089ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80089f0:	4ba3      	ldr	r3, [pc, #652]	; (8008c80 <_dtoa_r+0x300>)
 80089f2:	bfbc      	itt	lt
 80089f4:	2201      	movlt	r2, #1
 80089f6:	f8c8 2000 	strlt.w	r2, [r8]
 80089fa:	ea33 0309 	bics.w	r3, r3, r9
 80089fe:	d11b      	bne.n	8008a38 <_dtoa_r+0xb8>
 8008a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	4333      	orrs	r3, r6
 8008a0e:	f000 857a 	beq.w	8009506 <_dtoa_r+0xb86>
 8008a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a14:	b963      	cbnz	r3, 8008a30 <_dtoa_r+0xb0>
 8008a16:	4b9b      	ldr	r3, [pc, #620]	; (8008c84 <_dtoa_r+0x304>)
 8008a18:	e024      	b.n	8008a64 <_dtoa_r+0xe4>
 8008a1a:	4b9b      	ldr	r3, [pc, #620]	; (8008c88 <_dtoa_r+0x308>)
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	9800      	ldr	r0, [sp, #0]
 8008a26:	b015      	add	sp, #84	; 0x54
 8008a28:	ecbd 8b02 	vpop	{d8}
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	4b94      	ldr	r3, [pc, #592]	; (8008c84 <_dtoa_r+0x304>)
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	3303      	adds	r3, #3
 8008a36:	e7f3      	b.n	8008a20 <_dtoa_r+0xa0>
 8008a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	ec51 0b17 	vmov	r0, r1, d7
 8008a42:	2300      	movs	r3, #0
 8008a44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008a48:	f7f8 f856 	bl	8000af8 <__aeabi_dcmpeq>
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	b158      	cbz	r0, 8008a68 <_dtoa_r+0xe8>
 8008a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a52:	2301      	movs	r3, #1
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 8551 	beq.w	8009500 <_dtoa_r+0xb80>
 8008a5e:	488b      	ldr	r0, [pc, #556]	; (8008c8c <_dtoa_r+0x30c>)
 8008a60:	6018      	str	r0, [r3, #0]
 8008a62:	1e43      	subs	r3, r0, #1
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	e7dd      	b.n	8008a24 <_dtoa_r+0xa4>
 8008a68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008a6c:	aa12      	add	r2, sp, #72	; 0x48
 8008a6e:	a913      	add	r1, sp, #76	; 0x4c
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 f89f 	bl	8009bb4 <__d2b>
 8008a76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a7a:	4683      	mov	fp, r0
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	d07c      	beq.n	8008b7a <_dtoa_r+0x1fa>
 8008a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a9a:	4b7d      	ldr	r3, [pc, #500]	; (8008c90 <_dtoa_r+0x310>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fc09 	bl	80002b8 <__aeabi_dsub>
 8008aa6:	a36e      	add	r3, pc, #440	; (adr r3, 8008c60 <_dtoa_r+0x2e0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fdbc 	bl	8000628 <__aeabi_dmul>
 8008ab0:	a36d      	add	r3, pc, #436	; (adr r3, 8008c68 <_dtoa_r+0x2e8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fc01 	bl	80002bc <__adddf3>
 8008aba:	4606      	mov	r6, r0
 8008abc:	4628      	mov	r0, r5
 8008abe:	460f      	mov	r7, r1
 8008ac0:	f7f7 fd48 	bl	8000554 <__aeabi_i2d>
 8008ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8008c70 <_dtoa_r+0x2f0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fdad 	bl	8000628 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f7 fbf1 	bl	80002bc <__adddf3>
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	f7f8 f853 	bl	8000b88 <__aeabi_d2iz>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f8 f80e 	bl	8000b0c <__aeabi_dcmplt>
 8008af0:	b148      	cbz	r0, 8008b06 <_dtoa_r+0x186>
 8008af2:	4650      	mov	r0, sl
 8008af4:	f7f7 fd2e 	bl	8000554 <__aeabi_i2d>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 fffc 	bl	8000af8 <__aeabi_dcmpeq>
 8008b00:	b908      	cbnz	r0, 8008b06 <_dtoa_r+0x186>
 8008b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b06:	f1ba 0f16 	cmp.w	sl, #22
 8008b0a:	d854      	bhi.n	8008bb6 <_dtoa_r+0x236>
 8008b0c:	4b61      	ldr	r3, [pc, #388]	; (8008c94 <_dtoa_r+0x314>)
 8008b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b1a:	f7f7 fff7 	bl	8000b0c <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d04b      	beq.n	8008bba <_dtoa_r+0x23a>
 8008b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b26:	2300      	movs	r3, #0
 8008b28:	930e      	str	r3, [sp, #56]	; 0x38
 8008b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b2c:	1b5d      	subs	r5, r3, r5
 8008b2e:	1e6b      	subs	r3, r5, #1
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	bf43      	ittte	mi
 8008b34:	2300      	movmi	r3, #0
 8008b36:	f1c5 0801 	rsbmi	r8, r5, #1
 8008b3a:	9304      	strmi	r3, [sp, #16]
 8008b3c:	f04f 0800 	movpl.w	r8, #0
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	db3b      	blt.n	8008bbe <_dtoa_r+0x23e>
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008b4c:	4453      	add	r3, sl
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	2300      	movs	r3, #0
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	9b05      	ldr	r3, [sp, #20]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d869      	bhi.n	8008c2e <_dtoa_r+0x2ae>
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	bfc4      	itt	gt
 8008b5e:	3b04      	subgt	r3, #4
 8008b60:	9305      	strgt	r3, [sp, #20]
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	f1a3 0302 	sub.w	r3, r3, #2
 8008b68:	bfcc      	ite	gt
 8008b6a:	2500      	movgt	r5, #0
 8008b6c:	2501      	movle	r5, #1
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d869      	bhi.n	8008c46 <_dtoa_r+0x2c6>
 8008b72:	e8df f003 	tbb	[pc, r3]
 8008b76:	4e2c      	.short	0x4e2c
 8008b78:	5a4c      	.short	0x5a4c
 8008b7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b7e:	441d      	add	r5, r3
 8008b80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	bfc1      	itttt	gt
 8008b88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b90:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b98:	bfda      	itte	le
 8008b9a:	f1c3 0320 	rsble	r3, r3, #32
 8008b9e:	fa06 f003 	lslle.w	r0, r6, r3
 8008ba2:	4318      	orrgt	r0, r3
 8008ba4:	f7f7 fcc6 	bl	8000534 <__aeabi_ui2d>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4606      	mov	r6, r0
 8008bac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008bb0:	3d01      	subs	r5, #1
 8008bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8008bb4:	e771      	b.n	8008a9a <_dtoa_r+0x11a>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7b6      	b.n	8008b28 <_dtoa_r+0x1a8>
 8008bba:	900e      	str	r0, [sp, #56]	; 0x38
 8008bbc:	e7b5      	b.n	8008b2a <_dtoa_r+0x1aa>
 8008bbe:	f1ca 0300 	rsb	r3, sl, #0
 8008bc2:	9306      	str	r3, [sp, #24]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	eba8 080a 	sub.w	r8, r8, sl
 8008bca:	930d      	str	r3, [sp, #52]	; 0x34
 8008bcc:	e7c2      	b.n	8008b54 <_dtoa_r+0x1d4>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9308      	str	r3, [sp, #32]
 8008bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc39      	bgt.n	8008c4c <_dtoa_r+0x2cc>
 8008bd8:	f04f 0901 	mov.w	r9, #1
 8008bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008be0:	464b      	mov	r3, r9
 8008be2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008be8:	2200      	movs	r2, #0
 8008bea:	6042      	str	r2, [r0, #4]
 8008bec:	2204      	movs	r2, #4
 8008bee:	f102 0614 	add.w	r6, r2, #20
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	6841      	ldr	r1, [r0, #4]
 8008bf6:	d92f      	bls.n	8008c58 <_dtoa_r+0x2d8>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fcb9 	bl	8009570 <_Balloc>
 8008bfe:	9000      	str	r0, [sp, #0]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d14b      	bne.n	8008c9c <_dtoa_r+0x31c>
 8008c04:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <_dtoa_r+0x318>)
 8008c06:	4602      	mov	r2, r0
 8008c08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c0c:	e6d1      	b.n	80089b2 <_dtoa_r+0x32>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e7de      	b.n	8008bd0 <_dtoa_r+0x250>
 8008c12:	2300      	movs	r3, #0
 8008c14:	9308      	str	r3, [sp, #32]
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	eb0a 0903 	add.w	r9, sl, r3
 8008c1c:	f109 0301 	add.w	r3, r9, #1
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	bfb8      	it	lt
 8008c26:	2301      	movlt	r3, #1
 8008c28:	e7dd      	b.n	8008be6 <_dtoa_r+0x266>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7f2      	b.n	8008c14 <_dtoa_r+0x294>
 8008c2e:	2501      	movs	r5, #1
 8008c30:	2300      	movs	r3, #0
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	9508      	str	r5, [sp, #32]
 8008c36:	f04f 39ff 	mov.w	r9, #4294967295
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c40:	2312      	movs	r3, #18
 8008c42:	9209      	str	r2, [sp, #36]	; 0x24
 8008c44:	e7cf      	b.n	8008be6 <_dtoa_r+0x266>
 8008c46:	2301      	movs	r3, #1
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	e7f4      	b.n	8008c36 <_dtoa_r+0x2b6>
 8008c4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c54:	464b      	mov	r3, r9
 8008c56:	e7c6      	b.n	8008be6 <_dtoa_r+0x266>
 8008c58:	3101      	adds	r1, #1
 8008c5a:	6041      	str	r1, [r0, #4]
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7c6      	b.n	8008bee <_dtoa_r+0x26e>
 8008c60:	636f4361 	.word	0x636f4361
 8008c64:	3fd287a7 	.word	0x3fd287a7
 8008c68:	8b60c8b3 	.word	0x8b60c8b3
 8008c6c:	3fc68a28 	.word	0x3fc68a28
 8008c70:	509f79fb 	.word	0x509f79fb
 8008c74:	3fd34413 	.word	0x3fd34413
 8008c78:	0800b567 	.word	0x0800b567
 8008c7c:	0800b57e 	.word	0x0800b57e
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	0800b563 	.word	0x0800b563
 8008c88:	0800b55a 	.word	0x0800b55a
 8008c8c:	0800b411 	.word	0x0800b411
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	0800b678 	.word	0x0800b678
 8008c98:	0800b5dd 	.word	0x0800b5dd
 8008c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9e:	9a00      	ldr	r2, [sp, #0]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	2b0e      	cmp	r3, #14
 8008ca6:	f200 80ad 	bhi.w	8008e04 <_dtoa_r+0x484>
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	f000 80aa 	beq.w	8008e04 <_dtoa_r+0x484>
 8008cb0:	f1ba 0f00 	cmp.w	sl, #0
 8008cb4:	dd36      	ble.n	8008d24 <_dtoa_r+0x3a4>
 8008cb6:	4ac3      	ldr	r2, [pc, #780]	; (8008fc4 <_dtoa_r+0x644>)
 8008cb8:	f00a 030f 	and.w	r3, sl, #15
 8008cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cc0:	ed93 7b00 	vldr	d7, [r3]
 8008cc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008cc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008ccc:	eeb0 8a47 	vmov.f32	s16, s14
 8008cd0:	eef0 8a67 	vmov.f32	s17, s15
 8008cd4:	d016      	beq.n	8008d04 <_dtoa_r+0x384>
 8008cd6:	4bbc      	ldr	r3, [pc, #752]	; (8008fc8 <_dtoa_r+0x648>)
 8008cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ce0:	f7f7 fdcc 	bl	800087c <__aeabi_ddiv>
 8008ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce8:	f007 070f 	and.w	r7, r7, #15
 8008cec:	2503      	movs	r5, #3
 8008cee:	4eb6      	ldr	r6, [pc, #728]	; (8008fc8 <_dtoa_r+0x648>)
 8008cf0:	b957      	cbnz	r7, 8008d08 <_dtoa_r+0x388>
 8008cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf6:	ec53 2b18 	vmov	r2, r3, d8
 8008cfa:	f7f7 fdbf 	bl	800087c <__aeabi_ddiv>
 8008cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d02:	e029      	b.n	8008d58 <_dtoa_r+0x3d8>
 8008d04:	2502      	movs	r5, #2
 8008d06:	e7f2      	b.n	8008cee <_dtoa_r+0x36e>
 8008d08:	07f9      	lsls	r1, r7, #31
 8008d0a:	d508      	bpl.n	8008d1e <_dtoa_r+0x39e>
 8008d0c:	ec51 0b18 	vmov	r0, r1, d8
 8008d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d14:	f7f7 fc88 	bl	8000628 <__aeabi_dmul>
 8008d18:	ec41 0b18 	vmov	d8, r0, r1
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	107f      	asrs	r7, r7, #1
 8008d20:	3608      	adds	r6, #8
 8008d22:	e7e5      	b.n	8008cf0 <_dtoa_r+0x370>
 8008d24:	f000 80a6 	beq.w	8008e74 <_dtoa_r+0x4f4>
 8008d28:	f1ca 0600 	rsb	r6, sl, #0
 8008d2c:	4ba5      	ldr	r3, [pc, #660]	; (8008fc4 <_dtoa_r+0x644>)
 8008d2e:	4fa6      	ldr	r7, [pc, #664]	; (8008fc8 <_dtoa_r+0x648>)
 8008d30:	f006 020f 	and.w	r2, r6, #15
 8008d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d40:	f7f7 fc72 	bl	8000628 <__aeabi_dmul>
 8008d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d48:	1136      	asrs	r6, r6, #4
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2502      	movs	r5, #2
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	f040 8085 	bne.w	8008e5e <_dtoa_r+0x4de>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1d2      	bne.n	8008cfe <_dtoa_r+0x37e>
 8008d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 808c 	beq.w	8008e78 <_dtoa_r+0x4f8>
 8008d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d64:	4b99      	ldr	r3, [pc, #612]	; (8008fcc <_dtoa_r+0x64c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fece 	bl	8000b0c <__aeabi_dcmplt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f000 8081 	beq.w	8008e78 <_dtoa_r+0x4f8>
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d07d      	beq.n	8008e78 <_dtoa_r+0x4f8>
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	dd3c      	ble.n	8008dfc <_dtoa_r+0x47c>
 8008d82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4b91      	ldr	r3, [pc, #580]	; (8008fd0 <_dtoa_r+0x650>)
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4639      	mov	r1, r7
 8008d90:	f7f7 fc4a 	bl	8000628 <__aeabi_dmul>
 8008d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d98:	3501      	adds	r5, #1
 8008d9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008da2:	4628      	mov	r0, r5
 8008da4:	f7f7 fbd6 	bl	8000554 <__aeabi_i2d>
 8008da8:	4632      	mov	r2, r6
 8008daa:	463b      	mov	r3, r7
 8008dac:	f7f7 fc3c 	bl	8000628 <__aeabi_dmul>
 8008db0:	4b88      	ldr	r3, [pc, #544]	; (8008fd4 <_dtoa_r+0x654>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fa82 	bl	80002bc <__adddf3>
 8008db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d15c      	bne.n	8008e82 <_dtoa_r+0x502>
 8008dc8:	4b83      	ldr	r3, [pc, #524]	; (8008fd8 <_dtoa_r+0x658>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fa72 	bl	80002b8 <__aeabi_dsub>
 8008dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f7f7 feb4 	bl	8000b48 <__aeabi_dcmpgt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f040 8296 	bne.w	8009312 <_dtoa_r+0x992>
 8008de6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dea:	4630      	mov	r0, r6
 8008dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8288 	bne.w	800930c <_dtoa_r+0x98c>
 8008dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f2c0 8158 	blt.w	80090bc <_dtoa_r+0x73c>
 8008e0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008e10:	f300 8154 	bgt.w	80090bc <_dtoa_r+0x73c>
 8008e14:	4b6b      	ldr	r3, [pc, #428]	; (8008fc4 <_dtoa_r+0x644>)
 8008e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f280 80e3 	bge.w	8008fec <_dtoa_r+0x66c>
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f300 80df 	bgt.w	8008fec <_dtoa_r+0x66c>
 8008e2e:	f040 826d 	bne.w	800930c <_dtoa_r+0x98c>
 8008e32:	4b69      	ldr	r3, [pc, #420]	; (8008fd8 <_dtoa_r+0x658>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbf5 	bl	8000628 <__aeabi_dmul>
 8008e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e42:	f7f7 fe77 	bl	8000b34 <__aeabi_dcmpge>
 8008e46:	9e01      	ldr	r6, [sp, #4]
 8008e48:	4637      	mov	r7, r6
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f040 8243 	bne.w	80092d6 <_dtoa_r+0x956>
 8008e50:	9d00      	ldr	r5, [sp, #0]
 8008e52:	2331      	movs	r3, #49	; 0x31
 8008e54:	f805 3b01 	strb.w	r3, [r5], #1
 8008e58:	f10a 0a01 	add.w	sl, sl, #1
 8008e5c:	e23f      	b.n	80092de <_dtoa_r+0x95e>
 8008e5e:	07f2      	lsls	r2, r6, #31
 8008e60:	d505      	bpl.n	8008e6e <_dtoa_r+0x4ee>
 8008e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e66:	f7f7 fbdf 	bl	8000628 <__aeabi_dmul>
 8008e6a:	3501      	adds	r5, #1
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	1076      	asrs	r6, r6, #1
 8008e70:	3708      	adds	r7, #8
 8008e72:	e76c      	b.n	8008d4e <_dtoa_r+0x3ce>
 8008e74:	2502      	movs	r5, #2
 8008e76:	e76f      	b.n	8008d58 <_dtoa_r+0x3d8>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e80:	e78d      	b.n	8008d9e <_dtoa_r+0x41e>
 8008e82:	9900      	ldr	r1, [sp, #0]
 8008e84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e88:	4b4e      	ldr	r3, [pc, #312]	; (8008fc4 <_dtoa_r+0x644>)
 8008e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e8e:	4401      	add	r1, r0
 8008e90:	9102      	str	r1, [sp, #8]
 8008e92:	9908      	ldr	r1, [sp, #32]
 8008e94:	eeb0 8a47 	vmov.f32	s16, s14
 8008e98:	eef0 8a67 	vmov.f32	s17, s15
 8008e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d045      	beq.n	8008f34 <_dtoa_r+0x5b4>
 8008ea8:	494c      	ldr	r1, [pc, #304]	; (8008fdc <_dtoa_r+0x65c>)
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f7f7 fce6 	bl	800087c <__aeabi_ddiv>
 8008eb0:	ec53 2b18 	vmov	r2, r3, d8
 8008eb4:	f7f7 fa00 	bl	80002b8 <__aeabi_dsub>
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	ec41 0b18 	vmov	d8, r0, r1
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7f7 fe61 	bl	8000b88 <__aeabi_d2iz>
 8008ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8008ec8:	f7f7 fb44 	bl	8000554 <__aeabi_i2d>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 f9f0 	bl	80002b8 <__aeabi_dsub>
 8008ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eda:	3330      	adds	r3, #48	; 0x30
 8008edc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ee0:	ec53 2b18 	vmov	r2, r3, d8
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	f7f7 fe10 	bl	8000b0c <__aeabi_dcmplt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d165      	bne.n	8008fbc <_dtoa_r+0x63c>
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	4935      	ldr	r1, [pc, #212]	; (8008fcc <_dtoa_r+0x64c>)
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f7f7 f9de 	bl	80002b8 <__aeabi_dsub>
 8008efc:	ec53 2b18 	vmov	r2, r3, d8
 8008f00:	f7f7 fe04 	bl	8000b0c <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f040 80b9 	bne.w	800907c <_dtoa_r+0x6fc>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	f43f af75 	beq.w	8008dfc <_dtoa_r+0x47c>
 8008f12:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <_dtoa_r+0x650>)
 8008f14:	ec51 0b18 	vmov	r0, r1, d8
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb85 	bl	8000628 <__aeabi_dmul>
 8008f1e:	4b2c      	ldr	r3, [pc, #176]	; (8008fd0 <_dtoa_r+0x650>)
 8008f20:	ec41 0b18 	vmov	d8, r0, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 fb7d 	bl	8000628 <__aeabi_dmul>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	e7c4      	b.n	8008ebe <_dtoa_r+0x53e>
 8008f34:	ec51 0b17 	vmov	r0, r1, d7
 8008f38:	f7f7 fb76 	bl	8000628 <__aeabi_dmul>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	9d00      	ldr	r5, [sp, #0]
 8008f40:	930c      	str	r3, [sp, #48]	; 0x30
 8008f42:	ec41 0b18 	vmov	d8, r0, r1
 8008f46:	4639      	mov	r1, r7
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7f7 fe1d 	bl	8000b88 <__aeabi_d2iz>
 8008f4e:	9011      	str	r0, [sp, #68]	; 0x44
 8008f50:	f7f7 fb00 	bl	8000554 <__aeabi_i2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 f9ac 	bl	80002b8 <__aeabi_dsub>
 8008f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f62:	3330      	adds	r3, #48	; 0x30
 8008f64:	f805 3b01 	strb.w	r3, [r5], #1
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	d134      	bne.n	8008fe0 <_dtoa_r+0x660>
 8008f76:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <_dtoa_r+0x65c>)
 8008f78:	ec51 0b18 	vmov	r0, r1, d8
 8008f7c:	f7f7 f99e 	bl	80002bc <__adddf3>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fdde 	bl	8000b48 <__aeabi_dcmpgt>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d175      	bne.n	800907c <_dtoa_r+0x6fc>
 8008f90:	ec53 2b18 	vmov	r2, r3, d8
 8008f94:	4911      	ldr	r1, [pc, #68]	; (8008fdc <_dtoa_r+0x65c>)
 8008f96:	2000      	movs	r0, #0
 8008f98:	f7f7 f98e 	bl	80002b8 <__aeabi_dsub>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fdb2 	bl	8000b0c <__aeabi_dcmplt>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	f43f af27 	beq.w	8008dfc <_dtoa_r+0x47c>
 8008fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fb0:	1e6b      	subs	r3, r5, #1
 8008fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d0f8      	beq.n	8008fae <_dtoa_r+0x62e>
 8008fbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008fc0:	e04a      	b.n	8009058 <_dtoa_r+0x6d8>
 8008fc2:	bf00      	nop
 8008fc4:	0800b678 	.word	0x0800b678
 8008fc8:	0800b650 	.word	0x0800b650
 8008fcc:	3ff00000 	.word	0x3ff00000
 8008fd0:	40240000 	.word	0x40240000
 8008fd4:	401c0000 	.word	0x401c0000
 8008fd8:	40140000 	.word	0x40140000
 8008fdc:	3fe00000 	.word	0x3fe00000
 8008fe0:	4baf      	ldr	r3, [pc, #700]	; (80092a0 <_dtoa_r+0x920>)
 8008fe2:	f7f7 fb21 	bl	8000628 <__aeabi_dmul>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	e7ac      	b.n	8008f46 <_dtoa_r+0x5c6>
 8008fec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ff0:	9d00      	ldr	r5, [sp, #0]
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 fc3f 	bl	800087c <__aeabi_ddiv>
 8008ffe:	f7f7 fdc3 	bl	8000b88 <__aeabi_d2iz>
 8009002:	9002      	str	r0, [sp, #8]
 8009004:	f7f7 faa6 	bl	8000554 <__aeabi_i2d>
 8009008:	4642      	mov	r2, r8
 800900a:	464b      	mov	r3, r9
 800900c:	f7f7 fb0c 	bl	8000628 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f94e 	bl	80002b8 <__aeabi_dsub>
 800901c:	9e02      	ldr	r6, [sp, #8]
 800901e:	9f01      	ldr	r7, [sp, #4]
 8009020:	3630      	adds	r6, #48	; 0x30
 8009022:	f805 6b01 	strb.w	r6, [r5], #1
 8009026:	9e00      	ldr	r6, [sp, #0]
 8009028:	1bae      	subs	r6, r5, r6
 800902a:	42b7      	cmp	r7, r6
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	d137      	bne.n	80090a2 <_dtoa_r+0x722>
 8009032:	f7f7 f943 	bl	80002bc <__adddf3>
 8009036:	4642      	mov	r2, r8
 8009038:	464b      	mov	r3, r9
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	f7f7 fd83 	bl	8000b48 <__aeabi_dcmpgt>
 8009042:	b9c8      	cbnz	r0, 8009078 <_dtoa_r+0x6f8>
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd54 	bl	8000af8 <__aeabi_dcmpeq>
 8009050:	b110      	cbz	r0, 8009058 <_dtoa_r+0x6d8>
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	d40f      	bmi.n	8009078 <_dtoa_r+0x6f8>
 8009058:	4620      	mov	r0, r4
 800905a:	4659      	mov	r1, fp
 800905c:	f000 fac8 	bl	80095f0 <_Bfree>
 8009060:	2300      	movs	r3, #0
 8009062:	702b      	strb	r3, [r5, #0]
 8009064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009066:	f10a 0001 	add.w	r0, sl, #1
 800906a:	6018      	str	r0, [r3, #0]
 800906c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906e:	2b00      	cmp	r3, #0
 8009070:	f43f acd8 	beq.w	8008a24 <_dtoa_r+0xa4>
 8009074:	601d      	str	r5, [r3, #0]
 8009076:	e4d5      	b.n	8008a24 <_dtoa_r+0xa4>
 8009078:	f8cd a01c 	str.w	sl, [sp, #28]
 800907c:	462b      	mov	r3, r5
 800907e:	461d      	mov	r5, r3
 8009080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009084:	2a39      	cmp	r2, #57	; 0x39
 8009086:	d108      	bne.n	800909a <_dtoa_r+0x71a>
 8009088:	9a00      	ldr	r2, [sp, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d1f7      	bne.n	800907e <_dtoa_r+0x6fe>
 800908e:	9a07      	ldr	r2, [sp, #28]
 8009090:	9900      	ldr	r1, [sp, #0]
 8009092:	3201      	adds	r2, #1
 8009094:	9207      	str	r2, [sp, #28]
 8009096:	2230      	movs	r2, #48	; 0x30
 8009098:	700a      	strb	r2, [r1, #0]
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	3201      	adds	r2, #1
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e78c      	b.n	8008fbc <_dtoa_r+0x63c>
 80090a2:	4b7f      	ldr	r3, [pc, #508]	; (80092a0 <_dtoa_r+0x920>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	f7f7 fabf 	bl	8000628 <__aeabi_dmul>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	4606      	mov	r6, r0
 80090b0:	460f      	mov	r7, r1
 80090b2:	f7f7 fd21 	bl	8000af8 <__aeabi_dcmpeq>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d09b      	beq.n	8008ff2 <_dtoa_r+0x672>
 80090ba:	e7cd      	b.n	8009058 <_dtoa_r+0x6d8>
 80090bc:	9a08      	ldr	r2, [sp, #32]
 80090be:	2a00      	cmp	r2, #0
 80090c0:	f000 80c4 	beq.w	800924c <_dtoa_r+0x8cc>
 80090c4:	9a05      	ldr	r2, [sp, #20]
 80090c6:	2a01      	cmp	r2, #1
 80090c8:	f300 80a8 	bgt.w	800921c <_dtoa_r+0x89c>
 80090cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	f000 80a0 	beq.w	8009214 <_dtoa_r+0x894>
 80090d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090d8:	9e06      	ldr	r6, [sp, #24]
 80090da:	4645      	mov	r5, r8
 80090dc:	9a04      	ldr	r2, [sp, #16]
 80090de:	2101      	movs	r1, #1
 80090e0:	441a      	add	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	4498      	add	r8, r3
 80090e6:	9204      	str	r2, [sp, #16]
 80090e8:	f000 fb3e 	bl	8009768 <__i2b>
 80090ec:	4607      	mov	r7, r0
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	dd0b      	ble.n	800910a <_dtoa_r+0x78a>
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd08      	ble.n	800910a <_dtoa_r+0x78a>
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	9a04      	ldr	r2, [sp, #16]
 80090fc:	bfa8      	it	ge
 80090fe:	462b      	movge	r3, r5
 8009100:	eba8 0803 	sub.w	r8, r8, r3
 8009104:	1aed      	subs	r5, r5, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	b1fb      	cbz	r3, 800914e <_dtoa_r+0x7ce>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 809f 	beq.w	8009254 <_dtoa_r+0x8d4>
 8009116:	2e00      	cmp	r6, #0
 8009118:	dd11      	ble.n	800913e <_dtoa_r+0x7be>
 800911a:	4639      	mov	r1, r7
 800911c:	4632      	mov	r2, r6
 800911e:	4620      	mov	r0, r4
 8009120:	f000 fbde 	bl	80098e0 <__pow5mult>
 8009124:	465a      	mov	r2, fp
 8009126:	4601      	mov	r1, r0
 8009128:	4607      	mov	r7, r0
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fb32 	bl	8009794 <__multiply>
 8009130:	4659      	mov	r1, fp
 8009132:	9007      	str	r0, [sp, #28]
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fa5b 	bl	80095f0 <_Bfree>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	469b      	mov	fp, r3
 800913e:	9b06      	ldr	r3, [sp, #24]
 8009140:	1b9a      	subs	r2, r3, r6
 8009142:	d004      	beq.n	800914e <_dtoa_r+0x7ce>
 8009144:	4659      	mov	r1, fp
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fbca 	bl	80098e0 <__pow5mult>
 800914c:	4683      	mov	fp, r0
 800914e:	2101      	movs	r1, #1
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fb09 	bl	8009768 <__i2b>
 8009156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009158:	2b00      	cmp	r3, #0
 800915a:	4606      	mov	r6, r0
 800915c:	dd7c      	ble.n	8009258 <_dtoa_r+0x8d8>
 800915e:	461a      	mov	r2, r3
 8009160:	4601      	mov	r1, r0
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fbbc 	bl	80098e0 <__pow5mult>
 8009168:	9b05      	ldr	r3, [sp, #20]
 800916a:	2b01      	cmp	r3, #1
 800916c:	4606      	mov	r6, r0
 800916e:	dd76      	ble.n	800925e <_dtoa_r+0x8de>
 8009170:	2300      	movs	r3, #0
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	6933      	ldr	r3, [r6, #16]
 8009176:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800917a:	6918      	ldr	r0, [r3, #16]
 800917c:	f000 faa4 	bl	80096c8 <__hi0bits>
 8009180:	f1c0 0020 	rsb	r0, r0, #32
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	4418      	add	r0, r3
 8009188:	f010 001f 	ands.w	r0, r0, #31
 800918c:	f000 8086 	beq.w	800929c <_dtoa_r+0x91c>
 8009190:	f1c0 0320 	rsb	r3, r0, #32
 8009194:	2b04      	cmp	r3, #4
 8009196:	dd7f      	ble.n	8009298 <_dtoa_r+0x918>
 8009198:	f1c0 001c 	rsb	r0, r0, #28
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	4403      	add	r3, r0
 80091a0:	4480      	add	r8, r0
 80091a2:	4405      	add	r5, r0
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	f1b8 0f00 	cmp.w	r8, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x838>
 80091ac:	4659      	mov	r1, fp
 80091ae:	4642      	mov	r2, r8
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fbef 	bl	8009994 <__lshift>
 80091b6:	4683      	mov	fp, r0
 80091b8:	9b04      	ldr	r3, [sp, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x84a>
 80091be:	4631      	mov	r1, r6
 80091c0:	461a      	mov	r2, r3
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fbe6 	bl	8009994 <__lshift>
 80091c8:	4606      	mov	r6, r0
 80091ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d069      	beq.n	80092a4 <_dtoa_r+0x924>
 80091d0:	4631      	mov	r1, r6
 80091d2:	4658      	mov	r0, fp
 80091d4:	f000 fc4a 	bl	8009a6c <__mcmp>
 80091d8:	2800      	cmp	r0, #0
 80091da:	da63      	bge.n	80092a4 <_dtoa_r+0x924>
 80091dc:	2300      	movs	r3, #0
 80091de:	4659      	mov	r1, fp
 80091e0:	220a      	movs	r2, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 fa26 	bl	8009634 <__multadd>
 80091e8:	9b08      	ldr	r3, [sp, #32]
 80091ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091ee:	4683      	mov	fp, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 818f 	beq.w	8009514 <_dtoa_r+0xb94>
 80091f6:	4639      	mov	r1, r7
 80091f8:	2300      	movs	r3, #0
 80091fa:	220a      	movs	r2, #10
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fa19 	bl	8009634 <__multadd>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	4607      	mov	r7, r0
 8009208:	f300 808e 	bgt.w	8009328 <_dtoa_r+0x9a8>
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	2b02      	cmp	r3, #2
 8009210:	dc50      	bgt.n	80092b4 <_dtoa_r+0x934>
 8009212:	e089      	b.n	8009328 <_dtoa_r+0x9a8>
 8009214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800921a:	e75d      	b.n	80090d8 <_dtoa_r+0x758>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	1e5e      	subs	r6, r3, #1
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	42b3      	cmp	r3, r6
 8009224:	bfbf      	itttt	lt
 8009226:	9b06      	ldrlt	r3, [sp, #24]
 8009228:	9606      	strlt	r6, [sp, #24]
 800922a:	1af2      	sublt	r2, r6, r3
 800922c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800922e:	bfb6      	itet	lt
 8009230:	189b      	addlt	r3, r3, r2
 8009232:	1b9e      	subge	r6, r3, r6
 8009234:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	bfb8      	it	lt
 800923a:	2600      	movlt	r6, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfb5      	itete	lt
 8009240:	eba8 0503 	sublt.w	r5, r8, r3
 8009244:	9b01      	ldrge	r3, [sp, #4]
 8009246:	2300      	movlt	r3, #0
 8009248:	4645      	movge	r5, r8
 800924a:	e747      	b.n	80090dc <_dtoa_r+0x75c>
 800924c:	9e06      	ldr	r6, [sp, #24]
 800924e:	9f08      	ldr	r7, [sp, #32]
 8009250:	4645      	mov	r5, r8
 8009252:	e74c      	b.n	80090ee <_dtoa_r+0x76e>
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	e775      	b.n	8009144 <_dtoa_r+0x7c4>
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	2b01      	cmp	r3, #1
 800925c:	dc18      	bgt.n	8009290 <_dtoa_r+0x910>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	b9b3      	cbnz	r3, 8009290 <_dtoa_r+0x910>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009268:	b9a3      	cbnz	r3, 8009294 <_dtoa_r+0x914>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	051b      	lsls	r3, r3, #20
 8009274:	b12b      	cbz	r3, 8009282 <_dtoa_r+0x902>
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	3301      	adds	r3, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	f108 0801 	add.w	r8, r8, #1
 8009280:	2301      	movs	r3, #1
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f af74 	bne.w	8009174 <_dtoa_r+0x7f4>
 800928c:	2001      	movs	r0, #1
 800928e:	e779      	b.n	8009184 <_dtoa_r+0x804>
 8009290:	2300      	movs	r3, #0
 8009292:	e7f6      	b.n	8009282 <_dtoa_r+0x902>
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	e7f4      	b.n	8009282 <_dtoa_r+0x902>
 8009298:	d085      	beq.n	80091a6 <_dtoa_r+0x826>
 800929a:	4618      	mov	r0, r3
 800929c:	301c      	adds	r0, #28
 800929e:	e77d      	b.n	800919c <_dtoa_r+0x81c>
 80092a0:	40240000 	.word	0x40240000
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dc38      	bgt.n	800931c <_dtoa_r+0x99c>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	dd35      	ble.n	800931c <_dtoa_r+0x99c>
 80092b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	d10d      	bne.n	80092d6 <_dtoa_r+0x956>
 80092ba:	4631      	mov	r1, r6
 80092bc:	464b      	mov	r3, r9
 80092be:	2205      	movs	r2, #5
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 f9b7 	bl	8009634 <__multadd>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4606      	mov	r6, r0
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fbce 	bl	8009a6c <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f73f adbd 	bgt.w	8008e50 <_dtoa_r+0x4d0>
 80092d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d8:	9d00      	ldr	r5, [sp, #0]
 80092da:	ea6f 0a03 	mvn.w	sl, r3
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	4631      	mov	r1, r6
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 f983 	bl	80095f0 <_Bfree>
 80092ea:	2f00      	cmp	r7, #0
 80092ec:	f43f aeb4 	beq.w	8009058 <_dtoa_r+0x6d8>
 80092f0:	f1b8 0f00 	cmp.w	r8, #0
 80092f4:	d005      	beq.n	8009302 <_dtoa_r+0x982>
 80092f6:	45b8      	cmp	r8, r7
 80092f8:	d003      	beq.n	8009302 <_dtoa_r+0x982>
 80092fa:	4641      	mov	r1, r8
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 f977 	bl	80095f0 <_Bfree>
 8009302:	4639      	mov	r1, r7
 8009304:	4620      	mov	r0, r4
 8009306:	f000 f973 	bl	80095f0 <_Bfree>
 800930a:	e6a5      	b.n	8009058 <_dtoa_r+0x6d8>
 800930c:	2600      	movs	r6, #0
 800930e:	4637      	mov	r7, r6
 8009310:	e7e1      	b.n	80092d6 <_dtoa_r+0x956>
 8009312:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009314:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009318:	4637      	mov	r7, r6
 800931a:	e599      	b.n	8008e50 <_dtoa_r+0x4d0>
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80fd 	beq.w	8009522 <_dtoa_r+0xba2>
 8009328:	2d00      	cmp	r5, #0
 800932a:	dd05      	ble.n	8009338 <_dtoa_r+0x9b8>
 800932c:	4639      	mov	r1, r7
 800932e:	462a      	mov	r2, r5
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fb2f 	bl	8009994 <__lshift>
 8009336:	4607      	mov	r7, r0
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d05c      	beq.n	80093f8 <_dtoa_r+0xa78>
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4620      	mov	r0, r4
 8009342:	f000 f915 	bl	8009570 <_Balloc>
 8009346:	4605      	mov	r5, r0
 8009348:	b928      	cbnz	r0, 8009356 <_dtoa_r+0x9d6>
 800934a:	4b80      	ldr	r3, [pc, #512]	; (800954c <_dtoa_r+0xbcc>)
 800934c:	4602      	mov	r2, r0
 800934e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009352:	f7ff bb2e 	b.w	80089b2 <_dtoa_r+0x32>
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	3202      	adds	r2, #2
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	f107 010c 	add.w	r1, r7, #12
 8009360:	300c      	adds	r0, #12
 8009362:	f7fe fd0f 	bl	8007d84 <memcpy>
 8009366:	2201      	movs	r2, #1
 8009368:	4629      	mov	r1, r5
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fb12 	bl	8009994 <__lshift>
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	444b      	add	r3, r9
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	46b8      	mov	r8, r7
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	4607      	mov	r7, r0
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	4631      	mov	r1, r6
 800938c:	3b01      	subs	r3, #1
 800938e:	4658      	mov	r0, fp
 8009390:	9302      	str	r3, [sp, #8]
 8009392:	f7ff fa67 	bl	8008864 <quorem>
 8009396:	4603      	mov	r3, r0
 8009398:	3330      	adds	r3, #48	; 0x30
 800939a:	9004      	str	r0, [sp, #16]
 800939c:	4641      	mov	r1, r8
 800939e:	4658      	mov	r0, fp
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	f000 fb63 	bl	8009a6c <__mcmp>
 80093a6:	463a      	mov	r2, r7
 80093a8:	4681      	mov	r9, r0
 80093aa:	4631      	mov	r1, r6
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fb79 	bl	8009aa4 <__mdiff>
 80093b2:	68c2      	ldr	r2, [r0, #12]
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	4605      	mov	r5, r0
 80093b8:	bb02      	cbnz	r2, 80093fc <_dtoa_r+0xa7c>
 80093ba:	4601      	mov	r1, r0
 80093bc:	4658      	mov	r0, fp
 80093be:	f000 fb55 	bl	8009a6c <__mcmp>
 80093c2:	9b08      	ldr	r3, [sp, #32]
 80093c4:	4602      	mov	r2, r0
 80093c6:	4629      	mov	r1, r5
 80093c8:	4620      	mov	r0, r4
 80093ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80093ce:	f000 f90f 	bl	80095f0 <_Bfree>
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d6:	9d01      	ldr	r5, [sp, #4]
 80093d8:	ea43 0102 	orr.w	r1, r3, r2
 80093dc:	9b06      	ldr	r3, [sp, #24]
 80093de:	430b      	orrs	r3, r1
 80093e0:	9b08      	ldr	r3, [sp, #32]
 80093e2:	d10d      	bne.n	8009400 <_dtoa_r+0xa80>
 80093e4:	2b39      	cmp	r3, #57	; 0x39
 80093e6:	d029      	beq.n	800943c <_dtoa_r+0xabc>
 80093e8:	f1b9 0f00 	cmp.w	r9, #0
 80093ec:	dd01      	ble.n	80093f2 <_dtoa_r+0xa72>
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	3331      	adds	r3, #49	; 0x31
 80093f2:	9a02      	ldr	r2, [sp, #8]
 80093f4:	7013      	strb	r3, [r2, #0]
 80093f6:	e774      	b.n	80092e2 <_dtoa_r+0x962>
 80093f8:	4638      	mov	r0, r7
 80093fa:	e7b9      	b.n	8009370 <_dtoa_r+0x9f0>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7e2      	b.n	80093c6 <_dtoa_r+0xa46>
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	db06      	blt.n	8009414 <_dtoa_r+0xa94>
 8009406:	9905      	ldr	r1, [sp, #20]
 8009408:	ea41 0909 	orr.w	r9, r1, r9
 800940c:	9906      	ldr	r1, [sp, #24]
 800940e:	ea59 0101 	orrs.w	r1, r9, r1
 8009412:	d120      	bne.n	8009456 <_dtoa_r+0xad6>
 8009414:	2a00      	cmp	r2, #0
 8009416:	ddec      	ble.n	80093f2 <_dtoa_r+0xa72>
 8009418:	4659      	mov	r1, fp
 800941a:	2201      	movs	r2, #1
 800941c:	4620      	mov	r0, r4
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	f000 fab8 	bl	8009994 <__lshift>
 8009424:	4631      	mov	r1, r6
 8009426:	4683      	mov	fp, r0
 8009428:	f000 fb20 	bl	8009a6c <__mcmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	dc02      	bgt.n	8009438 <_dtoa_r+0xab8>
 8009432:	d1de      	bne.n	80093f2 <_dtoa_r+0xa72>
 8009434:	07da      	lsls	r2, r3, #31
 8009436:	d5dc      	bpl.n	80093f2 <_dtoa_r+0xa72>
 8009438:	2b39      	cmp	r3, #57	; 0x39
 800943a:	d1d8      	bne.n	80093ee <_dtoa_r+0xa6e>
 800943c:	9a02      	ldr	r2, [sp, #8]
 800943e:	2339      	movs	r3, #57	; 0x39
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	462b      	mov	r3, r5
 8009444:	461d      	mov	r5, r3
 8009446:	3b01      	subs	r3, #1
 8009448:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800944c:	2a39      	cmp	r2, #57	; 0x39
 800944e:	d050      	beq.n	80094f2 <_dtoa_r+0xb72>
 8009450:	3201      	adds	r2, #1
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	e745      	b.n	80092e2 <_dtoa_r+0x962>
 8009456:	2a00      	cmp	r2, #0
 8009458:	dd03      	ble.n	8009462 <_dtoa_r+0xae2>
 800945a:	2b39      	cmp	r3, #57	; 0x39
 800945c:	d0ee      	beq.n	800943c <_dtoa_r+0xabc>
 800945e:	3301      	adds	r3, #1
 8009460:	e7c7      	b.n	80093f2 <_dtoa_r+0xa72>
 8009462:	9a01      	ldr	r2, [sp, #4]
 8009464:	9907      	ldr	r1, [sp, #28]
 8009466:	f802 3c01 	strb.w	r3, [r2, #-1]
 800946a:	428a      	cmp	r2, r1
 800946c:	d02a      	beq.n	80094c4 <_dtoa_r+0xb44>
 800946e:	4659      	mov	r1, fp
 8009470:	2300      	movs	r3, #0
 8009472:	220a      	movs	r2, #10
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f8dd 	bl	8009634 <__multadd>
 800947a:	45b8      	cmp	r8, r7
 800947c:	4683      	mov	fp, r0
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	f04f 020a 	mov.w	r2, #10
 8009486:	4641      	mov	r1, r8
 8009488:	4620      	mov	r0, r4
 800948a:	d107      	bne.n	800949c <_dtoa_r+0xb1c>
 800948c:	f000 f8d2 	bl	8009634 <__multadd>
 8009490:	4680      	mov	r8, r0
 8009492:	4607      	mov	r7, r0
 8009494:	9b01      	ldr	r3, [sp, #4]
 8009496:	3301      	adds	r3, #1
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	e775      	b.n	8009388 <_dtoa_r+0xa08>
 800949c:	f000 f8ca 	bl	8009634 <__multadd>
 80094a0:	4639      	mov	r1, r7
 80094a2:	4680      	mov	r8, r0
 80094a4:	2300      	movs	r3, #0
 80094a6:	220a      	movs	r2, #10
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 f8c3 	bl	8009634 <__multadd>
 80094ae:	4607      	mov	r7, r0
 80094b0:	e7f0      	b.n	8009494 <_dtoa_r+0xb14>
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	9a00      	ldr	r2, [sp, #0]
 80094b8:	bfcc      	ite	gt
 80094ba:	464d      	movgt	r5, r9
 80094bc:	2501      	movle	r5, #1
 80094be:	4415      	add	r5, r2
 80094c0:	f04f 0800 	mov.w	r8, #0
 80094c4:	4659      	mov	r1, fp
 80094c6:	2201      	movs	r2, #1
 80094c8:	4620      	mov	r0, r4
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f000 fa62 	bl	8009994 <__lshift>
 80094d0:	4631      	mov	r1, r6
 80094d2:	4683      	mov	fp, r0
 80094d4:	f000 faca 	bl	8009a6c <__mcmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	dcb2      	bgt.n	8009442 <_dtoa_r+0xac2>
 80094dc:	d102      	bne.n	80094e4 <_dtoa_r+0xb64>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	07db      	lsls	r3, r3, #31
 80094e2:	d4ae      	bmi.n	8009442 <_dtoa_r+0xac2>
 80094e4:	462b      	mov	r3, r5
 80094e6:	461d      	mov	r5, r3
 80094e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ec:	2a30      	cmp	r2, #48	; 0x30
 80094ee:	d0fa      	beq.n	80094e6 <_dtoa_r+0xb66>
 80094f0:	e6f7      	b.n	80092e2 <_dtoa_r+0x962>
 80094f2:	9a00      	ldr	r2, [sp, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d1a5      	bne.n	8009444 <_dtoa_r+0xac4>
 80094f8:	f10a 0a01 	add.w	sl, sl, #1
 80094fc:	2331      	movs	r3, #49	; 0x31
 80094fe:	e779      	b.n	80093f4 <_dtoa_r+0xa74>
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <_dtoa_r+0xbd0>)
 8009502:	f7ff baaf 	b.w	8008a64 <_dtoa_r+0xe4>
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	f47f aa86 	bne.w	8008a1a <_dtoa_r+0x9a>
 800950e:	4b11      	ldr	r3, [pc, #68]	; (8009554 <_dtoa_r+0xbd4>)
 8009510:	f7ff baa8 	b.w	8008a64 <_dtoa_r+0xe4>
 8009514:	f1b9 0f00 	cmp.w	r9, #0
 8009518:	dc03      	bgt.n	8009522 <_dtoa_r+0xba2>
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	2b02      	cmp	r3, #2
 800951e:	f73f aec9 	bgt.w	80092b4 <_dtoa_r+0x934>
 8009522:	9d00      	ldr	r5, [sp, #0]
 8009524:	4631      	mov	r1, r6
 8009526:	4658      	mov	r0, fp
 8009528:	f7ff f99c 	bl	8008864 <quorem>
 800952c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009530:	f805 3b01 	strb.w	r3, [r5], #1
 8009534:	9a00      	ldr	r2, [sp, #0]
 8009536:	1aaa      	subs	r2, r5, r2
 8009538:	4591      	cmp	r9, r2
 800953a:	ddba      	ble.n	80094b2 <_dtoa_r+0xb32>
 800953c:	4659      	mov	r1, fp
 800953e:	2300      	movs	r3, #0
 8009540:	220a      	movs	r2, #10
 8009542:	4620      	mov	r0, r4
 8009544:	f000 f876 	bl	8009634 <__multadd>
 8009548:	4683      	mov	fp, r0
 800954a:	e7eb      	b.n	8009524 <_dtoa_r+0xba4>
 800954c:	0800b5dd 	.word	0x0800b5dd
 8009550:	0800b410 	.word	0x0800b410
 8009554:	0800b55a 	.word	0x0800b55a

08009558 <_localeconv_r>:
 8009558:	4800      	ldr	r0, [pc, #0]	; (800955c <_localeconv_r+0x4>)
 800955a:	4770      	bx	lr
 800955c:	20000170 	.word	0x20000170

08009560 <malloc>:
 8009560:	4b02      	ldr	r3, [pc, #8]	; (800956c <malloc+0xc>)
 8009562:	4601      	mov	r1, r0
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f000 bbe1 	b.w	8009d2c <_malloc_r>
 800956a:	bf00      	nop
 800956c:	2000001c 	.word	0x2000001c

08009570 <_Balloc>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	b976      	cbnz	r6, 8009598 <_Balloc+0x28>
 800957a:	2010      	movs	r0, #16
 800957c:	f7ff fff0 	bl	8009560 <malloc>
 8009580:	4602      	mov	r2, r0
 8009582:	6260      	str	r0, [r4, #36]	; 0x24
 8009584:	b920      	cbnz	r0, 8009590 <_Balloc+0x20>
 8009586:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <_Balloc+0x78>)
 8009588:	4818      	ldr	r0, [pc, #96]	; (80095ec <_Balloc+0x7c>)
 800958a:	2166      	movs	r1, #102	; 0x66
 800958c:	f000 fd94 	bl	800a0b8 <__assert_func>
 8009590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009594:	6006      	str	r6, [r0, #0]
 8009596:	60c6      	str	r6, [r0, #12]
 8009598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800959a:	68f3      	ldr	r3, [r6, #12]
 800959c:	b183      	cbz	r3, 80095c0 <_Balloc+0x50>
 800959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095a6:	b9b8      	cbnz	r0, 80095d8 <_Balloc+0x68>
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f605 	lsl.w	r6, r1, r5
 80095ae:	1d72      	adds	r2, r6, #5
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fb5a 	bl	8009c6c <_calloc_r>
 80095b8:	b160      	cbz	r0, 80095d4 <_Balloc+0x64>
 80095ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095be:	e00e      	b.n	80095de <_Balloc+0x6e>
 80095c0:	2221      	movs	r2, #33	; 0x21
 80095c2:	2104      	movs	r1, #4
 80095c4:	4620      	mov	r0, r4
 80095c6:	f000 fb51 	bl	8009c6c <_calloc_r>
 80095ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095cc:	60f0      	str	r0, [r6, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e4      	bne.n	800959e <_Balloc+0x2e>
 80095d4:	2000      	movs	r0, #0
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	6802      	ldr	r2, [r0, #0]
 80095da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095de:	2300      	movs	r3, #0
 80095e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095e4:	e7f7      	b.n	80095d6 <_Balloc+0x66>
 80095e6:	bf00      	nop
 80095e8:	0800b567 	.word	0x0800b567
 80095ec:	0800b5ee 	.word	0x0800b5ee

080095f0 <_Bfree>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b976      	cbnz	r6, 8009618 <_Bfree+0x28>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f7ff ffb0 	bl	8009560 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	6268      	str	r0, [r5, #36]	; 0x24
 8009604:	b920      	cbnz	r0, 8009610 <_Bfree+0x20>
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <_Bfree+0x3c>)
 8009608:	4809      	ldr	r0, [pc, #36]	; (8009630 <_Bfree+0x40>)
 800960a:	218a      	movs	r1, #138	; 0x8a
 800960c:	f000 fd54 	bl	800a0b8 <__assert_func>
 8009610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009614:	6006      	str	r6, [r0, #0]
 8009616:	60c6      	str	r6, [r0, #12]
 8009618:	b13c      	cbz	r4, 800962a <_Bfree+0x3a>
 800961a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009624:	6021      	str	r1, [r4, #0]
 8009626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	0800b567 	.word	0x0800b567
 8009630:	0800b5ee 	.word	0x0800b5ee

08009634 <__multadd>:
 8009634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009638:	690e      	ldr	r6, [r1, #16]
 800963a:	4607      	mov	r7, r0
 800963c:	4698      	mov	r8, r3
 800963e:	460c      	mov	r4, r1
 8009640:	f101 0014 	add.w	r0, r1, #20
 8009644:	2300      	movs	r3, #0
 8009646:	6805      	ldr	r5, [r0, #0]
 8009648:	b2a9      	uxth	r1, r5
 800964a:	fb02 8101 	mla	r1, r2, r1, r8
 800964e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009652:	0c2d      	lsrs	r5, r5, #16
 8009654:	fb02 c505 	mla	r5, r2, r5, ip
 8009658:	b289      	uxth	r1, r1
 800965a:	3301      	adds	r3, #1
 800965c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009660:	429e      	cmp	r6, r3
 8009662:	f840 1b04 	str.w	r1, [r0], #4
 8009666:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800966a:	dcec      	bgt.n	8009646 <__multadd+0x12>
 800966c:	f1b8 0f00 	cmp.w	r8, #0
 8009670:	d022      	beq.n	80096b8 <__multadd+0x84>
 8009672:	68a3      	ldr	r3, [r4, #8]
 8009674:	42b3      	cmp	r3, r6
 8009676:	dc19      	bgt.n	80096ac <__multadd+0x78>
 8009678:	6861      	ldr	r1, [r4, #4]
 800967a:	4638      	mov	r0, r7
 800967c:	3101      	adds	r1, #1
 800967e:	f7ff ff77 	bl	8009570 <_Balloc>
 8009682:	4605      	mov	r5, r0
 8009684:	b928      	cbnz	r0, 8009692 <__multadd+0x5e>
 8009686:	4602      	mov	r2, r0
 8009688:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <__multadd+0x8c>)
 800968a:	480e      	ldr	r0, [pc, #56]	; (80096c4 <__multadd+0x90>)
 800968c:	21b5      	movs	r1, #181	; 0xb5
 800968e:	f000 fd13 	bl	800a0b8 <__assert_func>
 8009692:	6922      	ldr	r2, [r4, #16]
 8009694:	3202      	adds	r2, #2
 8009696:	f104 010c 	add.w	r1, r4, #12
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	300c      	adds	r0, #12
 800969e:	f7fe fb71 	bl	8007d84 <memcpy>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff ffa3 	bl	80095f0 <_Bfree>
 80096aa:	462c      	mov	r4, r5
 80096ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80096b0:	3601      	adds	r6, #1
 80096b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80096b6:	6126      	str	r6, [r4, #16]
 80096b8:	4620      	mov	r0, r4
 80096ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096be:	bf00      	nop
 80096c0:	0800b5dd 	.word	0x0800b5dd
 80096c4:	0800b5ee 	.word	0x0800b5ee

080096c8 <__hi0bits>:
 80096c8:	0c03      	lsrs	r3, r0, #16
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	b9d3      	cbnz	r3, 8009704 <__hi0bits+0x3c>
 80096ce:	0400      	lsls	r0, r0, #16
 80096d0:	2310      	movs	r3, #16
 80096d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096d6:	bf04      	itt	eq
 80096d8:	0200      	lsleq	r0, r0, #8
 80096da:	3308      	addeq	r3, #8
 80096dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096e0:	bf04      	itt	eq
 80096e2:	0100      	lsleq	r0, r0, #4
 80096e4:	3304      	addeq	r3, #4
 80096e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096ea:	bf04      	itt	eq
 80096ec:	0080      	lsleq	r0, r0, #2
 80096ee:	3302      	addeq	r3, #2
 80096f0:	2800      	cmp	r0, #0
 80096f2:	db05      	blt.n	8009700 <__hi0bits+0x38>
 80096f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096f8:	f103 0301 	add.w	r3, r3, #1
 80096fc:	bf08      	it	eq
 80096fe:	2320      	moveq	r3, #32
 8009700:	4618      	mov	r0, r3
 8009702:	4770      	bx	lr
 8009704:	2300      	movs	r3, #0
 8009706:	e7e4      	b.n	80096d2 <__hi0bits+0xa>

08009708 <__lo0bits>:
 8009708:	6803      	ldr	r3, [r0, #0]
 800970a:	f013 0207 	ands.w	r2, r3, #7
 800970e:	4601      	mov	r1, r0
 8009710:	d00b      	beq.n	800972a <__lo0bits+0x22>
 8009712:	07da      	lsls	r2, r3, #31
 8009714:	d424      	bmi.n	8009760 <__lo0bits+0x58>
 8009716:	0798      	lsls	r0, r3, #30
 8009718:	bf49      	itett	mi
 800971a:	085b      	lsrmi	r3, r3, #1
 800971c:	089b      	lsrpl	r3, r3, #2
 800971e:	2001      	movmi	r0, #1
 8009720:	600b      	strmi	r3, [r1, #0]
 8009722:	bf5c      	itt	pl
 8009724:	600b      	strpl	r3, [r1, #0]
 8009726:	2002      	movpl	r0, #2
 8009728:	4770      	bx	lr
 800972a:	b298      	uxth	r0, r3
 800972c:	b9b0      	cbnz	r0, 800975c <__lo0bits+0x54>
 800972e:	0c1b      	lsrs	r3, r3, #16
 8009730:	2010      	movs	r0, #16
 8009732:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009736:	bf04      	itt	eq
 8009738:	0a1b      	lsreq	r3, r3, #8
 800973a:	3008      	addeq	r0, #8
 800973c:	071a      	lsls	r2, r3, #28
 800973e:	bf04      	itt	eq
 8009740:	091b      	lsreq	r3, r3, #4
 8009742:	3004      	addeq	r0, #4
 8009744:	079a      	lsls	r2, r3, #30
 8009746:	bf04      	itt	eq
 8009748:	089b      	lsreq	r3, r3, #2
 800974a:	3002      	addeq	r0, #2
 800974c:	07da      	lsls	r2, r3, #31
 800974e:	d403      	bmi.n	8009758 <__lo0bits+0x50>
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	f100 0001 	add.w	r0, r0, #1
 8009756:	d005      	beq.n	8009764 <__lo0bits+0x5c>
 8009758:	600b      	str	r3, [r1, #0]
 800975a:	4770      	bx	lr
 800975c:	4610      	mov	r0, r2
 800975e:	e7e8      	b.n	8009732 <__lo0bits+0x2a>
 8009760:	2000      	movs	r0, #0
 8009762:	4770      	bx	lr
 8009764:	2020      	movs	r0, #32
 8009766:	4770      	bx	lr

08009768 <__i2b>:
 8009768:	b510      	push	{r4, lr}
 800976a:	460c      	mov	r4, r1
 800976c:	2101      	movs	r1, #1
 800976e:	f7ff feff 	bl	8009570 <_Balloc>
 8009772:	4602      	mov	r2, r0
 8009774:	b928      	cbnz	r0, 8009782 <__i2b+0x1a>
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <__i2b+0x24>)
 8009778:	4805      	ldr	r0, [pc, #20]	; (8009790 <__i2b+0x28>)
 800977a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800977e:	f000 fc9b 	bl	800a0b8 <__assert_func>
 8009782:	2301      	movs	r3, #1
 8009784:	6144      	str	r4, [r0, #20]
 8009786:	6103      	str	r3, [r0, #16]
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	0800b5dd 	.word	0x0800b5dd
 8009790:	0800b5ee 	.word	0x0800b5ee

08009794 <__multiply>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	4614      	mov	r4, r2
 800979a:	690a      	ldr	r2, [r1, #16]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	429a      	cmp	r2, r3
 80097a0:	bfb8      	it	lt
 80097a2:	460b      	movlt	r3, r1
 80097a4:	460d      	mov	r5, r1
 80097a6:	bfbc      	itt	lt
 80097a8:	4625      	movlt	r5, r4
 80097aa:	461c      	movlt	r4, r3
 80097ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80097b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097b4:	68ab      	ldr	r3, [r5, #8]
 80097b6:	6869      	ldr	r1, [r5, #4]
 80097b8:	eb0a 0709 	add.w	r7, sl, r9
 80097bc:	42bb      	cmp	r3, r7
 80097be:	b085      	sub	sp, #20
 80097c0:	bfb8      	it	lt
 80097c2:	3101      	addlt	r1, #1
 80097c4:	f7ff fed4 	bl	8009570 <_Balloc>
 80097c8:	b930      	cbnz	r0, 80097d8 <__multiply+0x44>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b42      	ldr	r3, [pc, #264]	; (80098d8 <__multiply+0x144>)
 80097ce:	4843      	ldr	r0, [pc, #268]	; (80098dc <__multiply+0x148>)
 80097d0:	f240 115d 	movw	r1, #349	; 0x15d
 80097d4:	f000 fc70 	bl	800a0b8 <__assert_func>
 80097d8:	f100 0614 	add.w	r6, r0, #20
 80097dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097e0:	4633      	mov	r3, r6
 80097e2:	2200      	movs	r2, #0
 80097e4:	4543      	cmp	r3, r8
 80097e6:	d31e      	bcc.n	8009826 <__multiply+0x92>
 80097e8:	f105 0c14 	add.w	ip, r5, #20
 80097ec:	f104 0314 	add.w	r3, r4, #20
 80097f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097f8:	9202      	str	r2, [sp, #8]
 80097fa:	ebac 0205 	sub.w	r2, ip, r5
 80097fe:	3a15      	subs	r2, #21
 8009800:	f022 0203 	bic.w	r2, r2, #3
 8009804:	3204      	adds	r2, #4
 8009806:	f105 0115 	add.w	r1, r5, #21
 800980a:	458c      	cmp	ip, r1
 800980c:	bf38      	it	cc
 800980e:	2204      	movcc	r2, #4
 8009810:	9201      	str	r2, [sp, #4]
 8009812:	9a02      	ldr	r2, [sp, #8]
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d808      	bhi.n	800982c <__multiply+0x98>
 800981a:	2f00      	cmp	r7, #0
 800981c:	dc55      	bgt.n	80098ca <__multiply+0x136>
 800981e:	6107      	str	r7, [r0, #16]
 8009820:	b005      	add	sp, #20
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	f843 2b04 	str.w	r2, [r3], #4
 800982a:	e7db      	b.n	80097e4 <__multiply+0x50>
 800982c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009830:	f1ba 0f00 	cmp.w	sl, #0
 8009834:	d020      	beq.n	8009878 <__multiply+0xe4>
 8009836:	f105 0e14 	add.w	lr, r5, #20
 800983a:	46b1      	mov	r9, r6
 800983c:	2200      	movs	r2, #0
 800983e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009842:	f8d9 b000 	ldr.w	fp, [r9]
 8009846:	b2a1      	uxth	r1, r4
 8009848:	fa1f fb8b 	uxth.w	fp, fp
 800984c:	fb0a b101 	mla	r1, sl, r1, fp
 8009850:	4411      	add	r1, r2
 8009852:	f8d9 2000 	ldr.w	r2, [r9]
 8009856:	0c24      	lsrs	r4, r4, #16
 8009858:	0c12      	lsrs	r2, r2, #16
 800985a:	fb0a 2404 	mla	r4, sl, r4, r2
 800985e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009862:	b289      	uxth	r1, r1
 8009864:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009868:	45f4      	cmp	ip, lr
 800986a:	f849 1b04 	str.w	r1, [r9], #4
 800986e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009872:	d8e4      	bhi.n	800983e <__multiply+0xaa>
 8009874:	9901      	ldr	r1, [sp, #4]
 8009876:	5072      	str	r2, [r6, r1]
 8009878:	9a03      	ldr	r2, [sp, #12]
 800987a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800987e:	3304      	adds	r3, #4
 8009880:	f1b9 0f00 	cmp.w	r9, #0
 8009884:	d01f      	beq.n	80098c6 <__multiply+0x132>
 8009886:	6834      	ldr	r4, [r6, #0]
 8009888:	f105 0114 	add.w	r1, r5, #20
 800988c:	46b6      	mov	lr, r6
 800988e:	f04f 0a00 	mov.w	sl, #0
 8009892:	880a      	ldrh	r2, [r1, #0]
 8009894:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009898:	fb09 b202 	mla	r2, r9, r2, fp
 800989c:	4492      	add	sl, r2
 800989e:	b2a4      	uxth	r4, r4
 80098a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80098a4:	f84e 4b04 	str.w	r4, [lr], #4
 80098a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80098ac:	f8be 2000 	ldrh.w	r2, [lr]
 80098b0:	0c24      	lsrs	r4, r4, #16
 80098b2:	fb09 2404 	mla	r4, r9, r4, r2
 80098b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80098ba:	458c      	cmp	ip, r1
 80098bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098c0:	d8e7      	bhi.n	8009892 <__multiply+0xfe>
 80098c2:	9a01      	ldr	r2, [sp, #4]
 80098c4:	50b4      	str	r4, [r6, r2]
 80098c6:	3604      	adds	r6, #4
 80098c8:	e7a3      	b.n	8009812 <__multiply+0x7e>
 80098ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1a5      	bne.n	800981e <__multiply+0x8a>
 80098d2:	3f01      	subs	r7, #1
 80098d4:	e7a1      	b.n	800981a <__multiply+0x86>
 80098d6:	bf00      	nop
 80098d8:	0800b5dd 	.word	0x0800b5dd
 80098dc:	0800b5ee 	.word	0x0800b5ee

080098e0 <__pow5mult>:
 80098e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e4:	4615      	mov	r5, r2
 80098e6:	f012 0203 	ands.w	r2, r2, #3
 80098ea:	4606      	mov	r6, r0
 80098ec:	460f      	mov	r7, r1
 80098ee:	d007      	beq.n	8009900 <__pow5mult+0x20>
 80098f0:	4c25      	ldr	r4, [pc, #148]	; (8009988 <__pow5mult+0xa8>)
 80098f2:	3a01      	subs	r2, #1
 80098f4:	2300      	movs	r3, #0
 80098f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098fa:	f7ff fe9b 	bl	8009634 <__multadd>
 80098fe:	4607      	mov	r7, r0
 8009900:	10ad      	asrs	r5, r5, #2
 8009902:	d03d      	beq.n	8009980 <__pow5mult+0xa0>
 8009904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009906:	b97c      	cbnz	r4, 8009928 <__pow5mult+0x48>
 8009908:	2010      	movs	r0, #16
 800990a:	f7ff fe29 	bl	8009560 <malloc>
 800990e:	4602      	mov	r2, r0
 8009910:	6270      	str	r0, [r6, #36]	; 0x24
 8009912:	b928      	cbnz	r0, 8009920 <__pow5mult+0x40>
 8009914:	4b1d      	ldr	r3, [pc, #116]	; (800998c <__pow5mult+0xac>)
 8009916:	481e      	ldr	r0, [pc, #120]	; (8009990 <__pow5mult+0xb0>)
 8009918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800991c:	f000 fbcc 	bl	800a0b8 <__assert_func>
 8009920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009924:	6004      	str	r4, [r0, #0]
 8009926:	60c4      	str	r4, [r0, #12]
 8009928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800992c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009930:	b94c      	cbnz	r4, 8009946 <__pow5mult+0x66>
 8009932:	f240 2171 	movw	r1, #625	; 0x271
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ff16 	bl	8009768 <__i2b>
 800993c:	2300      	movs	r3, #0
 800993e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009942:	4604      	mov	r4, r0
 8009944:	6003      	str	r3, [r0, #0]
 8009946:	f04f 0900 	mov.w	r9, #0
 800994a:	07eb      	lsls	r3, r5, #31
 800994c:	d50a      	bpl.n	8009964 <__pow5mult+0x84>
 800994e:	4639      	mov	r1, r7
 8009950:	4622      	mov	r2, r4
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ff1e 	bl	8009794 <__multiply>
 8009958:	4639      	mov	r1, r7
 800995a:	4680      	mov	r8, r0
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fe47 	bl	80095f0 <_Bfree>
 8009962:	4647      	mov	r7, r8
 8009964:	106d      	asrs	r5, r5, #1
 8009966:	d00b      	beq.n	8009980 <__pow5mult+0xa0>
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	b938      	cbnz	r0, 800997c <__pow5mult+0x9c>
 800996c:	4622      	mov	r2, r4
 800996e:	4621      	mov	r1, r4
 8009970:	4630      	mov	r0, r6
 8009972:	f7ff ff0f 	bl	8009794 <__multiply>
 8009976:	6020      	str	r0, [r4, #0]
 8009978:	f8c0 9000 	str.w	r9, [r0]
 800997c:	4604      	mov	r4, r0
 800997e:	e7e4      	b.n	800994a <__pow5mult+0x6a>
 8009980:	4638      	mov	r0, r7
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	bf00      	nop
 8009988:	0800b740 	.word	0x0800b740
 800998c:	0800b567 	.word	0x0800b567
 8009990:	0800b5ee 	.word	0x0800b5ee

08009994 <__lshift>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	6849      	ldr	r1, [r1, #4]
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	4607      	mov	r7, r0
 80099a6:	4691      	mov	r9, r2
 80099a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099ac:	f108 0601 	add.w	r6, r8, #1
 80099b0:	42b3      	cmp	r3, r6
 80099b2:	db0b      	blt.n	80099cc <__lshift+0x38>
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff fddb 	bl	8009570 <_Balloc>
 80099ba:	4605      	mov	r5, r0
 80099bc:	b948      	cbnz	r0, 80099d2 <__lshift+0x3e>
 80099be:	4602      	mov	r2, r0
 80099c0:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <__lshift+0xd0>)
 80099c2:	4829      	ldr	r0, [pc, #164]	; (8009a68 <__lshift+0xd4>)
 80099c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099c8:	f000 fb76 	bl	800a0b8 <__assert_func>
 80099cc:	3101      	adds	r1, #1
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	e7ee      	b.n	80099b0 <__lshift+0x1c>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f100 0114 	add.w	r1, r0, #20
 80099d8:	f100 0210 	add.w	r2, r0, #16
 80099dc:	4618      	mov	r0, r3
 80099de:	4553      	cmp	r3, sl
 80099e0:	db33      	blt.n	8009a4a <__lshift+0xb6>
 80099e2:	6920      	ldr	r0, [r4, #16]
 80099e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099e8:	f104 0314 	add.w	r3, r4, #20
 80099ec:	f019 091f 	ands.w	r9, r9, #31
 80099f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099f8:	d02b      	beq.n	8009a52 <__lshift+0xbe>
 80099fa:	f1c9 0e20 	rsb	lr, r9, #32
 80099fe:	468a      	mov	sl, r1
 8009a00:	2200      	movs	r2, #0
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	fa00 f009 	lsl.w	r0, r0, r9
 8009a08:	4302      	orrs	r2, r0
 8009a0a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a12:	459c      	cmp	ip, r3
 8009a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a18:	d8f3      	bhi.n	8009a02 <__lshift+0x6e>
 8009a1a:	ebac 0304 	sub.w	r3, ip, r4
 8009a1e:	3b15      	subs	r3, #21
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	3304      	adds	r3, #4
 8009a26:	f104 0015 	add.w	r0, r4, #21
 8009a2a:	4584      	cmp	ip, r0
 8009a2c:	bf38      	it	cc
 8009a2e:	2304      	movcc	r3, #4
 8009a30:	50ca      	str	r2, [r1, r3]
 8009a32:	b10a      	cbz	r2, 8009a38 <__lshift+0xa4>
 8009a34:	f108 0602 	add.w	r6, r8, #2
 8009a38:	3e01      	subs	r6, #1
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	612e      	str	r6, [r5, #16]
 8009a3e:	4621      	mov	r1, r4
 8009a40:	f7ff fdd6 	bl	80095f0 <_Bfree>
 8009a44:	4628      	mov	r0, r5
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a4e:	3301      	adds	r3, #1
 8009a50:	e7c5      	b.n	80099de <__lshift+0x4a>
 8009a52:	3904      	subs	r1, #4
 8009a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a5c:	459c      	cmp	ip, r3
 8009a5e:	d8f9      	bhi.n	8009a54 <__lshift+0xc0>
 8009a60:	e7ea      	b.n	8009a38 <__lshift+0xa4>
 8009a62:	bf00      	nop
 8009a64:	0800b5dd 	.word	0x0800b5dd
 8009a68:	0800b5ee 	.word	0x0800b5ee

08009a6c <__mcmp>:
 8009a6c:	b530      	push	{r4, r5, lr}
 8009a6e:	6902      	ldr	r2, [r0, #16]
 8009a70:	690c      	ldr	r4, [r1, #16]
 8009a72:	1b12      	subs	r2, r2, r4
 8009a74:	d10e      	bne.n	8009a94 <__mcmp+0x28>
 8009a76:	f100 0314 	add.w	r3, r0, #20
 8009a7a:	3114      	adds	r1, #20
 8009a7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a8c:	42a5      	cmp	r5, r4
 8009a8e:	d003      	beq.n	8009a98 <__mcmp+0x2c>
 8009a90:	d305      	bcc.n	8009a9e <__mcmp+0x32>
 8009a92:	2201      	movs	r2, #1
 8009a94:	4610      	mov	r0, r2
 8009a96:	bd30      	pop	{r4, r5, pc}
 8009a98:	4283      	cmp	r3, r0
 8009a9a:	d3f3      	bcc.n	8009a84 <__mcmp+0x18>
 8009a9c:	e7fa      	b.n	8009a94 <__mcmp+0x28>
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	e7f7      	b.n	8009a94 <__mcmp+0x28>

08009aa4 <__mdiff>:
 8009aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	4606      	mov	r6, r0
 8009aac:	4611      	mov	r1, r2
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4617      	mov	r7, r2
 8009ab2:	f7ff ffdb 	bl	8009a6c <__mcmp>
 8009ab6:	1e05      	subs	r5, r0, #0
 8009ab8:	d110      	bne.n	8009adc <__mdiff+0x38>
 8009aba:	4629      	mov	r1, r5
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff fd57 	bl	8009570 <_Balloc>
 8009ac2:	b930      	cbnz	r0, 8009ad2 <__mdiff+0x2e>
 8009ac4:	4b39      	ldr	r3, [pc, #228]	; (8009bac <__mdiff+0x108>)
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	f240 2132 	movw	r1, #562	; 0x232
 8009acc:	4838      	ldr	r0, [pc, #224]	; (8009bb0 <__mdiff+0x10c>)
 8009ace:	f000 faf3 	bl	800a0b8 <__assert_func>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	bfa4      	itt	ge
 8009ade:	463b      	movge	r3, r7
 8009ae0:	4627      	movge	r7, r4
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	bfa6      	itte	ge
 8009ae8:	461c      	movge	r4, r3
 8009aea:	2500      	movge	r5, #0
 8009aec:	2501      	movlt	r5, #1
 8009aee:	f7ff fd3f 	bl	8009570 <_Balloc>
 8009af2:	b920      	cbnz	r0, 8009afe <__mdiff+0x5a>
 8009af4:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <__mdiff+0x108>)
 8009af6:	4602      	mov	r2, r0
 8009af8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009afc:	e7e6      	b.n	8009acc <__mdiff+0x28>
 8009afe:	693e      	ldr	r6, [r7, #16]
 8009b00:	60c5      	str	r5, [r0, #12]
 8009b02:	6925      	ldr	r5, [r4, #16]
 8009b04:	f107 0114 	add.w	r1, r7, #20
 8009b08:	f104 0914 	add.w	r9, r4, #20
 8009b0c:	f100 0e14 	add.w	lr, r0, #20
 8009b10:	f107 0210 	add.w	r2, r7, #16
 8009b14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009b18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009b1c:	46f2      	mov	sl, lr
 8009b1e:	2700      	movs	r7, #0
 8009b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b28:	fa1f f883 	uxth.w	r8, r3
 8009b2c:	fa17 f78b 	uxtah	r7, r7, fp
 8009b30:	0c1b      	lsrs	r3, r3, #16
 8009b32:	eba7 0808 	sub.w	r8, r7, r8
 8009b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b3e:	fa1f f888 	uxth.w	r8, r8
 8009b42:	141f      	asrs	r7, r3, #16
 8009b44:	454d      	cmp	r5, r9
 8009b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8009b4e:	d8e7      	bhi.n	8009b20 <__mdiff+0x7c>
 8009b50:	1b2b      	subs	r3, r5, r4
 8009b52:	3b15      	subs	r3, #21
 8009b54:	f023 0303 	bic.w	r3, r3, #3
 8009b58:	3304      	adds	r3, #4
 8009b5a:	3415      	adds	r4, #21
 8009b5c:	42a5      	cmp	r5, r4
 8009b5e:	bf38      	it	cc
 8009b60:	2304      	movcc	r3, #4
 8009b62:	4419      	add	r1, r3
 8009b64:	4473      	add	r3, lr
 8009b66:	469e      	mov	lr, r3
 8009b68:	460d      	mov	r5, r1
 8009b6a:	4565      	cmp	r5, ip
 8009b6c:	d30e      	bcc.n	8009b8c <__mdiff+0xe8>
 8009b6e:	f10c 0203 	add.w	r2, ip, #3
 8009b72:	1a52      	subs	r2, r2, r1
 8009b74:	f022 0203 	bic.w	r2, r2, #3
 8009b78:	3903      	subs	r1, #3
 8009b7a:	458c      	cmp	ip, r1
 8009b7c:	bf38      	it	cc
 8009b7e:	2200      	movcc	r2, #0
 8009b80:	441a      	add	r2, r3
 8009b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b86:	b17b      	cbz	r3, 8009ba8 <__mdiff+0x104>
 8009b88:	6106      	str	r6, [r0, #16]
 8009b8a:	e7a5      	b.n	8009ad8 <__mdiff+0x34>
 8009b8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b90:	fa17 f488 	uxtah	r4, r7, r8
 8009b94:	1422      	asrs	r2, r4, #16
 8009b96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009b9a:	b2a4      	uxth	r4, r4
 8009b9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ba0:	f84e 4b04 	str.w	r4, [lr], #4
 8009ba4:	1417      	asrs	r7, r2, #16
 8009ba6:	e7e0      	b.n	8009b6a <__mdiff+0xc6>
 8009ba8:	3e01      	subs	r6, #1
 8009baa:	e7ea      	b.n	8009b82 <__mdiff+0xde>
 8009bac:	0800b5dd 	.word	0x0800b5dd
 8009bb0:	0800b5ee 	.word	0x0800b5ee

08009bb4 <__d2b>:
 8009bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	4689      	mov	r9, r1
 8009bba:	2101      	movs	r1, #1
 8009bbc:	ec57 6b10 	vmov	r6, r7, d0
 8009bc0:	4690      	mov	r8, r2
 8009bc2:	f7ff fcd5 	bl	8009570 <_Balloc>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	b930      	cbnz	r0, 8009bd8 <__d2b+0x24>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <__d2b+0xb0>)
 8009bce:	4826      	ldr	r0, [pc, #152]	; (8009c68 <__d2b+0xb4>)
 8009bd0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bd4:	f000 fa70 	bl	800a0b8 <__assert_func>
 8009bd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009be0:	bb35      	cbnz	r5, 8009c30 <__d2b+0x7c>
 8009be2:	2e00      	cmp	r6, #0
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	d028      	beq.n	8009c3a <__d2b+0x86>
 8009be8:	4668      	mov	r0, sp
 8009bea:	9600      	str	r6, [sp, #0]
 8009bec:	f7ff fd8c 	bl	8009708 <__lo0bits>
 8009bf0:	9900      	ldr	r1, [sp, #0]
 8009bf2:	b300      	cbz	r0, 8009c36 <__d2b+0x82>
 8009bf4:	9a01      	ldr	r2, [sp, #4]
 8009bf6:	f1c0 0320 	rsb	r3, r0, #32
 8009bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfe:	430b      	orrs	r3, r1
 8009c00:	40c2      	lsrs	r2, r0
 8009c02:	6163      	str	r3, [r4, #20]
 8009c04:	9201      	str	r2, [sp, #4]
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	61a3      	str	r3, [r4, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bf14      	ite	ne
 8009c0e:	2202      	movne	r2, #2
 8009c10:	2201      	moveq	r2, #1
 8009c12:	6122      	str	r2, [r4, #16]
 8009c14:	b1d5      	cbz	r5, 8009c4c <__d2b+0x98>
 8009c16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c1a:	4405      	add	r5, r0
 8009c1c:	f8c9 5000 	str.w	r5, [r9]
 8009c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c24:	f8c8 0000 	str.w	r0, [r8]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	b003      	add	sp, #12
 8009c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c34:	e7d5      	b.n	8009be2 <__d2b+0x2e>
 8009c36:	6161      	str	r1, [r4, #20]
 8009c38:	e7e5      	b.n	8009c06 <__d2b+0x52>
 8009c3a:	a801      	add	r0, sp, #4
 8009c3c:	f7ff fd64 	bl	8009708 <__lo0bits>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	6163      	str	r3, [r4, #20]
 8009c44:	2201      	movs	r2, #1
 8009c46:	6122      	str	r2, [r4, #16]
 8009c48:	3020      	adds	r0, #32
 8009c4a:	e7e3      	b.n	8009c14 <__d2b+0x60>
 8009c4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c54:	f8c9 0000 	str.w	r0, [r9]
 8009c58:	6918      	ldr	r0, [r3, #16]
 8009c5a:	f7ff fd35 	bl	80096c8 <__hi0bits>
 8009c5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c62:	e7df      	b.n	8009c24 <__d2b+0x70>
 8009c64:	0800b5dd 	.word	0x0800b5dd
 8009c68:	0800b5ee 	.word	0x0800b5ee

08009c6c <_calloc_r>:
 8009c6c:	b513      	push	{r0, r1, r4, lr}
 8009c6e:	434a      	muls	r2, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	9201      	str	r2, [sp, #4]
 8009c74:	f000 f85a 	bl	8009d2c <_malloc_r>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	b118      	cbz	r0, 8009c84 <_calloc_r+0x18>
 8009c7c:	9a01      	ldr	r2, [sp, #4]
 8009c7e:	2100      	movs	r1, #0
 8009c80:	f7fe f88e 	bl	8007da0 <memset>
 8009c84:	4620      	mov	r0, r4
 8009c86:	b002      	add	sp, #8
 8009c88:	bd10      	pop	{r4, pc}
	...

08009c8c <_free_r>:
 8009c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d048      	beq.n	8009d24 <_free_r+0x98>
 8009c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c96:	9001      	str	r0, [sp, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9e:	bfb8      	it	lt
 8009ca0:	18e4      	addlt	r4, r4, r3
 8009ca2:	f000 fa65 	bl	800a170 <__malloc_lock>
 8009ca6:	4a20      	ldr	r2, [pc, #128]	; (8009d28 <_free_r+0x9c>)
 8009ca8:	9801      	ldr	r0, [sp, #4]
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	4615      	mov	r5, r2
 8009cae:	b933      	cbnz	r3, 8009cbe <_free_r+0x32>
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6014      	str	r4, [r2, #0]
 8009cb4:	b003      	add	sp, #12
 8009cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cba:	f000 ba5f 	b.w	800a17c <__malloc_unlock>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d90b      	bls.n	8009cda <_free_r+0x4e>
 8009cc2:	6821      	ldr	r1, [r4, #0]
 8009cc4:	1862      	adds	r2, r4, r1
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	bf04      	itt	eq
 8009cca:	681a      	ldreq	r2, [r3, #0]
 8009ccc:	685b      	ldreq	r3, [r3, #4]
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	bf04      	itt	eq
 8009cd2:	1852      	addeq	r2, r2, r1
 8009cd4:	6022      	streq	r2, [r4, #0]
 8009cd6:	602c      	str	r4, [r5, #0]
 8009cd8:	e7ec      	b.n	8009cb4 <_free_r+0x28>
 8009cda:	461a      	mov	r2, r3
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	b10b      	cbz	r3, 8009ce4 <_free_r+0x58>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d9fa      	bls.n	8009cda <_free_r+0x4e>
 8009ce4:	6811      	ldr	r1, [r2, #0]
 8009ce6:	1855      	adds	r5, r2, r1
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	d10b      	bne.n	8009d04 <_free_r+0x78>
 8009cec:	6824      	ldr	r4, [r4, #0]
 8009cee:	4421      	add	r1, r4
 8009cf0:	1854      	adds	r4, r2, r1
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	d1dd      	bne.n	8009cb4 <_free_r+0x28>
 8009cf8:	681c      	ldr	r4, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	6053      	str	r3, [r2, #4]
 8009cfe:	4421      	add	r1, r4
 8009d00:	6011      	str	r1, [r2, #0]
 8009d02:	e7d7      	b.n	8009cb4 <_free_r+0x28>
 8009d04:	d902      	bls.n	8009d0c <_free_r+0x80>
 8009d06:	230c      	movs	r3, #12
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	e7d3      	b.n	8009cb4 <_free_r+0x28>
 8009d0c:	6825      	ldr	r5, [r4, #0]
 8009d0e:	1961      	adds	r1, r4, r5
 8009d10:	428b      	cmp	r3, r1
 8009d12:	bf04      	itt	eq
 8009d14:	6819      	ldreq	r1, [r3, #0]
 8009d16:	685b      	ldreq	r3, [r3, #4]
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	bf04      	itt	eq
 8009d1c:	1949      	addeq	r1, r1, r5
 8009d1e:	6021      	streq	r1, [r4, #0]
 8009d20:	6054      	str	r4, [r2, #4]
 8009d22:	e7c7      	b.n	8009cb4 <_free_r+0x28>
 8009d24:	b003      	add	sp, #12
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	20000210 	.word	0x20000210

08009d2c <_malloc_r>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	1ccd      	adds	r5, r1, #3
 8009d30:	f025 0503 	bic.w	r5, r5, #3
 8009d34:	3508      	adds	r5, #8
 8009d36:	2d0c      	cmp	r5, #12
 8009d38:	bf38      	it	cc
 8009d3a:	250c      	movcc	r5, #12
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	4606      	mov	r6, r0
 8009d40:	db01      	blt.n	8009d46 <_malloc_r+0x1a>
 8009d42:	42a9      	cmp	r1, r5
 8009d44:	d903      	bls.n	8009d4e <_malloc_r+0x22>
 8009d46:	230c      	movs	r3, #12
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4e:	f000 fa0f 	bl	800a170 <__malloc_lock>
 8009d52:	4921      	ldr	r1, [pc, #132]	; (8009dd8 <_malloc_r+0xac>)
 8009d54:	680a      	ldr	r2, [r1, #0]
 8009d56:	4614      	mov	r4, r2
 8009d58:	b99c      	cbnz	r4, 8009d82 <_malloc_r+0x56>
 8009d5a:	4f20      	ldr	r7, [pc, #128]	; (8009ddc <_malloc_r+0xb0>)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	b923      	cbnz	r3, 8009d6a <_malloc_r+0x3e>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 f998 	bl	800a098 <_sbrk_r>
 8009d68:	6038      	str	r0, [r7, #0]
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f000 f993 	bl	800a098 <_sbrk_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d123      	bne.n	8009dbe <_malloc_r+0x92>
 8009d76:	230c      	movs	r3, #12
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 f9fe 	bl	800a17c <__malloc_unlock>
 8009d80:	e7e3      	b.n	8009d4a <_malloc_r+0x1e>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	1b5b      	subs	r3, r3, r5
 8009d86:	d417      	bmi.n	8009db8 <_malloc_r+0x8c>
 8009d88:	2b0b      	cmp	r3, #11
 8009d8a:	d903      	bls.n	8009d94 <_malloc_r+0x68>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	441c      	add	r4, r3
 8009d90:	6025      	str	r5, [r4, #0]
 8009d92:	e004      	b.n	8009d9e <_malloc_r+0x72>
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	42a2      	cmp	r2, r4
 8009d98:	bf0c      	ite	eq
 8009d9a:	600b      	streq	r3, [r1, #0]
 8009d9c:	6053      	strne	r3, [r2, #4]
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 f9ec 	bl	800a17c <__malloc_unlock>
 8009da4:	f104 000b 	add.w	r0, r4, #11
 8009da8:	1d23      	adds	r3, r4, #4
 8009daa:	f020 0007 	bic.w	r0, r0, #7
 8009dae:	1ac2      	subs	r2, r0, r3
 8009db0:	d0cc      	beq.n	8009d4c <_malloc_r+0x20>
 8009db2:	1a1b      	subs	r3, r3, r0
 8009db4:	50a3      	str	r3, [r4, r2]
 8009db6:	e7c9      	b.n	8009d4c <_malloc_r+0x20>
 8009db8:	4622      	mov	r2, r4
 8009dba:	6864      	ldr	r4, [r4, #4]
 8009dbc:	e7cc      	b.n	8009d58 <_malloc_r+0x2c>
 8009dbe:	1cc4      	adds	r4, r0, #3
 8009dc0:	f024 0403 	bic.w	r4, r4, #3
 8009dc4:	42a0      	cmp	r0, r4
 8009dc6:	d0e3      	beq.n	8009d90 <_malloc_r+0x64>
 8009dc8:	1a21      	subs	r1, r4, r0
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f964 	bl	800a098 <_sbrk_r>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d1dd      	bne.n	8009d90 <_malloc_r+0x64>
 8009dd4:	e7cf      	b.n	8009d76 <_malloc_r+0x4a>
 8009dd6:	bf00      	nop
 8009dd8:	20000210 	.word	0x20000210
 8009ddc:	20000214 	.word	0x20000214

08009de0 <__ssputs_r>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	688e      	ldr	r6, [r1, #8]
 8009de6:	429e      	cmp	r6, r3
 8009de8:	4682      	mov	sl, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4690      	mov	r8, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	d838      	bhi.n	8009e64 <__ssputs_r+0x84>
 8009df2:	898a      	ldrh	r2, [r1, #12]
 8009df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009df8:	d032      	beq.n	8009e60 <__ssputs_r+0x80>
 8009dfa:	6825      	ldr	r5, [r4, #0]
 8009dfc:	6909      	ldr	r1, [r1, #16]
 8009dfe:	eba5 0901 	sub.w	r9, r5, r1
 8009e02:	6965      	ldr	r5, [r4, #20]
 8009e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	444b      	add	r3, r9
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	429d      	cmp	r5, r3
 8009e14:	bf38      	it	cc
 8009e16:	461d      	movcc	r5, r3
 8009e18:	0553      	lsls	r3, r2, #21
 8009e1a:	d531      	bpl.n	8009e80 <__ssputs_r+0xa0>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7ff ff85 	bl	8009d2c <_malloc_r>
 8009e22:	4606      	mov	r6, r0
 8009e24:	b950      	cbnz	r0, 8009e3c <__ssputs_r+0x5c>
 8009e26:	230c      	movs	r3, #12
 8009e28:	f8ca 3000 	str.w	r3, [sl]
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3c:	6921      	ldr	r1, [r4, #16]
 8009e3e:	464a      	mov	r2, r9
 8009e40:	f7fd ffa0 	bl	8007d84 <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	6165      	str	r5, [r4, #20]
 8009e54:	444e      	add	r6, r9
 8009e56:	eba5 0509 	sub.w	r5, r5, r9
 8009e5a:	6026      	str	r6, [r4, #0]
 8009e5c:	60a5      	str	r5, [r4, #8]
 8009e5e:	463e      	mov	r6, r7
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x86>
 8009e64:	463e      	mov	r6, r7
 8009e66:	4632      	mov	r2, r6
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f000 f966 	bl	800a13c <memmove>
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	4432      	add	r2, r6
 8009e78:	60a3      	str	r3, [r4, #8]
 8009e7a:	6022      	str	r2, [r4, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7db      	b.n	8009e38 <__ssputs_r+0x58>
 8009e80:	462a      	mov	r2, r5
 8009e82:	f000 f981 	bl	800a188 <_realloc_r>
 8009e86:	4606      	mov	r6, r0
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1e1      	bne.n	8009e50 <__ssputs_r+0x70>
 8009e8c:	6921      	ldr	r1, [r4, #16]
 8009e8e:	4650      	mov	r0, sl
 8009e90:	f7ff fefc 	bl	8009c8c <_free_r>
 8009e94:	e7c7      	b.n	8009e26 <__ssputs_r+0x46>
	...

08009e98 <_svfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	898b      	ldrh	r3, [r1, #12]
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	b09d      	sub	sp, #116	; 0x74
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	d50e      	bpl.n	8009eca <_svfiprintf_r+0x32>
 8009eac:	690b      	ldr	r3, [r1, #16]
 8009eae:	b963      	cbnz	r3, 8009eca <_svfiprintf_r+0x32>
 8009eb0:	2140      	movs	r1, #64	; 0x40
 8009eb2:	f7ff ff3b 	bl	8009d2c <_malloc_r>
 8009eb6:	6028      	str	r0, [r5, #0]
 8009eb8:	6128      	str	r0, [r5, #16]
 8009eba:	b920      	cbnz	r0, 8009ec6 <_svfiprintf_r+0x2e>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e0d1      	b.n	800a06a <_svfiprintf_r+0x1d2>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	616b      	str	r3, [r5, #20]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	2320      	movs	r3, #32
 8009ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a084 <_svfiprintf_r+0x1ec>
 8009ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee2:	f04f 0901 	mov.w	r9, #1
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	469a      	mov	sl, r3
 8009eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eee:	b10a      	cbz	r2, 8009ef4 <_svfiprintf_r+0x5c>
 8009ef0:	2a25      	cmp	r2, #37	; 0x25
 8009ef2:	d1f9      	bne.n	8009ee8 <_svfiprintf_r+0x50>
 8009ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef8:	d00b      	beq.n	8009f12 <_svfiprintf_r+0x7a>
 8009efa:	465b      	mov	r3, fp
 8009efc:	4622      	mov	r2, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff ff6d 	bl	8009de0 <__ssputs_r>
 8009f06:	3001      	adds	r0, #1
 8009f08:	f000 80aa 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0e:	445a      	add	r2, fp
 8009f10:	9209      	str	r2, [sp, #36]	; 0x24
 8009f12:	f89a 3000 	ldrb.w	r3, [sl]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80a2 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f26:	f10a 0a01 	add.w	sl, sl, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	9307      	str	r3, [sp, #28]
 8009f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f32:	931a      	str	r3, [sp, #104]	; 0x68
 8009f34:	4654      	mov	r4, sl
 8009f36:	2205      	movs	r2, #5
 8009f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3c:	4851      	ldr	r0, [pc, #324]	; (800a084 <_svfiprintf_r+0x1ec>)
 8009f3e:	f7f6 f967 	bl	8000210 <memchr>
 8009f42:	9a04      	ldr	r2, [sp, #16]
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_svfiprintf_r+0xe6>
 8009f46:	06d0      	lsls	r0, r2, #27
 8009f48:	bf44      	itt	mi
 8009f4a:	2320      	movmi	r3, #32
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	0711      	lsls	r1, r2, #28
 8009f52:	bf44      	itt	mi
 8009f54:	232b      	movmi	r3, #43	; 0x2b
 8009f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f60:	d015      	beq.n	8009f8e <_svfiprintf_r+0xf6>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4654      	mov	r4, sl
 8009f66:	2000      	movs	r0, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f72:	3b30      	subs	r3, #48	; 0x30
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d94e      	bls.n	800a016 <_svfiprintf_r+0x17e>
 8009f78:	b1b0      	cbz	r0, 8009fa8 <_svfiprintf_r+0x110>
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	e014      	b.n	8009fa8 <_svfiprintf_r+0x110>
 8009f7e:	eba0 0308 	sub.w	r3, r0, r8
 8009f82:	fa09 f303 	lsl.w	r3, r9, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	46a2      	mov	sl, r4
 8009f8c:	e7d2      	b.n	8009f34 <_svfiprintf_r+0x9c>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	9103      	str	r1, [sp, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bfbb      	ittet	lt
 8009f9a:	425b      	neglt	r3, r3
 8009f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa0:	9307      	strge	r3, [sp, #28]
 8009fa2:	9307      	strlt	r3, [sp, #28]
 8009fa4:	bfb8      	it	lt
 8009fa6:	9204      	strlt	r2, [sp, #16]
 8009fa8:	7823      	ldrb	r3, [r4, #0]
 8009faa:	2b2e      	cmp	r3, #46	; 0x2e
 8009fac:	d10c      	bne.n	8009fc8 <_svfiprintf_r+0x130>
 8009fae:	7863      	ldrb	r3, [r4, #1]
 8009fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb2:	d135      	bne.n	800a020 <_svfiprintf_r+0x188>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	9203      	str	r2, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfb8      	it	lt
 8009fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fc4:	3402      	adds	r4, #2
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a094 <_svfiprintf_r+0x1fc>
 8009fcc:	7821      	ldrb	r1, [r4, #0]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	f7f6 f91d 	bl	8000210 <memchr>
 8009fd6:	b140      	cbz	r0, 8009fea <_svfiprintf_r+0x152>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	eba0 000a 	sub.w	r0, r0, sl
 8009fde:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	4303      	orrs	r3, r0
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fee:	4826      	ldr	r0, [pc, #152]	; (800a088 <_svfiprintf_r+0x1f0>)
 8009ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	f7f6 f90b 	bl	8000210 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d038      	beq.n	800a070 <_svfiprintf_r+0x1d8>
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <_svfiprintf_r+0x1f4>)
 800a000:	bb1b      	cbnz	r3, 800a04a <_svfiprintf_r+0x1b2>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4433      	add	r3, r6
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e767      	b.n	8009ee6 <_svfiprintf_r+0x4e>
 800a016:	fb0c 3202 	mla	r2, ip, r2, r3
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	e7a5      	b.n	8009f6c <_svfiprintf_r+0xd4>
 800a020:	2300      	movs	r3, #0
 800a022:	3401      	adds	r4, #1
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	4619      	mov	r1, r3
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a032:	3a30      	subs	r2, #48	; 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_svfiprintf_r+0x1a8>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c5      	beq.n	8009fc8 <_svfiprintf_r+0x130>
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e7c3      	b.n	8009fc8 <_svfiprintf_r+0x130>
 800a040:	fb0c 2101 	mla	r1, ip, r1, r2
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	e7f0      	b.n	800a02c <_svfiprintf_r+0x194>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4638      	mov	r0, r7
 800a056:	f7fd ff4b 	bl	8007ef0 <_printf_float>
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	4606      	mov	r6, r0
 800a05e:	d1d6      	bne.n	800a00e <_svfiprintf_r+0x176>
 800a060:	89ab      	ldrh	r3, [r5, #12]
 800a062:	065b      	lsls	r3, r3, #25
 800a064:	f53f af2c 	bmi.w	8009ec0 <_svfiprintf_r+0x28>
 800a068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06a:	b01d      	add	sp, #116	; 0x74
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4638      	mov	r0, r7
 800a07c:	f7fe f9dc 	bl	8008438 <_printf_i>
 800a080:	e7eb      	b.n	800a05a <_svfiprintf_r+0x1c2>
 800a082:	bf00      	nop
 800a084:	0800b74c 	.word	0x0800b74c
 800a088:	0800b756 	.word	0x0800b756
 800a08c:	08007ef1 	.word	0x08007ef1
 800a090:	08009de1 	.word	0x08009de1
 800a094:	0800b752 	.word	0x0800b752

0800a098 <_sbrk_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d06      	ldr	r5, [pc, #24]	; (800a0b4 <_sbrk_r+0x1c>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f7 ff44 	bl	8001f30 <_sbrk>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_sbrk_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_sbrk_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20003bb4 	.word	0x20003bb4

0800a0b8 <__assert_func>:
 800a0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <__assert_func+0x2c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	68d8      	ldr	r0, [r3, #12]
 800a0c6:	b14c      	cbz	r4, 800a0dc <__assert_func+0x24>
 800a0c8:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <__assert_func+0x30>)
 800a0ca:	9100      	str	r1, [sp, #0]
 800a0cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d0:	4906      	ldr	r1, [pc, #24]	; (800a0ec <__assert_func+0x34>)
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	f000 f80e 	bl	800a0f4 <fiprintf>
 800a0d8:	f000 faa4 	bl	800a624 <abort>
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__assert_func+0x38>)
 800a0de:	461c      	mov	r4, r3
 800a0e0:	e7f3      	b.n	800a0ca <__assert_func+0x12>
 800a0e2:	bf00      	nop
 800a0e4:	2000001c 	.word	0x2000001c
 800a0e8:	0800b75d 	.word	0x0800b75d
 800a0ec:	0800b76a 	.word	0x0800b76a
 800a0f0:	0800b798 	.word	0x0800b798

0800a0f4 <fiprintf>:
 800a0f4:	b40e      	push	{r1, r2, r3}
 800a0f6:	b503      	push	{r0, r1, lr}
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	ab03      	add	r3, sp, #12
 800a0fc:	4805      	ldr	r0, [pc, #20]	; (800a114 <fiprintf+0x20>)
 800a0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	f000 f88f 	bl	800a228 <_vfiprintf_r>
 800a10a:	b002      	add	sp, #8
 800a10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a110:	b003      	add	sp, #12
 800a112:	4770      	bx	lr
 800a114:	2000001c 	.word	0x2000001c

0800a118 <__ascii_mbtowc>:
 800a118:	b082      	sub	sp, #8
 800a11a:	b901      	cbnz	r1, 800a11e <__ascii_mbtowc+0x6>
 800a11c:	a901      	add	r1, sp, #4
 800a11e:	b142      	cbz	r2, 800a132 <__ascii_mbtowc+0x1a>
 800a120:	b14b      	cbz	r3, 800a136 <__ascii_mbtowc+0x1e>
 800a122:	7813      	ldrb	r3, [r2, #0]
 800a124:	600b      	str	r3, [r1, #0]
 800a126:	7812      	ldrb	r2, [r2, #0]
 800a128:	1e10      	subs	r0, r2, #0
 800a12a:	bf18      	it	ne
 800a12c:	2001      	movne	r0, #1
 800a12e:	b002      	add	sp, #8
 800a130:	4770      	bx	lr
 800a132:	4610      	mov	r0, r2
 800a134:	e7fb      	b.n	800a12e <__ascii_mbtowc+0x16>
 800a136:	f06f 0001 	mvn.w	r0, #1
 800a13a:	e7f8      	b.n	800a12e <__ascii_mbtowc+0x16>

0800a13c <memmove>:
 800a13c:	4288      	cmp	r0, r1
 800a13e:	b510      	push	{r4, lr}
 800a140:	eb01 0402 	add.w	r4, r1, r2
 800a144:	d902      	bls.n	800a14c <memmove+0x10>
 800a146:	4284      	cmp	r4, r0
 800a148:	4623      	mov	r3, r4
 800a14a:	d807      	bhi.n	800a15c <memmove+0x20>
 800a14c:	1e43      	subs	r3, r0, #1
 800a14e:	42a1      	cmp	r1, r4
 800a150:	d008      	beq.n	800a164 <memmove+0x28>
 800a152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a15a:	e7f8      	b.n	800a14e <memmove+0x12>
 800a15c:	4402      	add	r2, r0
 800a15e:	4601      	mov	r1, r0
 800a160:	428a      	cmp	r2, r1
 800a162:	d100      	bne.n	800a166 <memmove+0x2a>
 800a164:	bd10      	pop	{r4, pc}
 800a166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a16e:	e7f7      	b.n	800a160 <memmove+0x24>

0800a170 <__malloc_lock>:
 800a170:	4801      	ldr	r0, [pc, #4]	; (800a178 <__malloc_lock+0x8>)
 800a172:	f000 bc17 	b.w	800a9a4 <__retarget_lock_acquire_recursive>
 800a176:	bf00      	nop
 800a178:	20003bbc 	.word	0x20003bbc

0800a17c <__malloc_unlock>:
 800a17c:	4801      	ldr	r0, [pc, #4]	; (800a184 <__malloc_unlock+0x8>)
 800a17e:	f000 bc12 	b.w	800a9a6 <__retarget_lock_release_recursive>
 800a182:	bf00      	nop
 800a184:	20003bbc 	.word	0x20003bbc

0800a188 <_realloc_r>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	4607      	mov	r7, r0
 800a18c:	4614      	mov	r4, r2
 800a18e:	460e      	mov	r6, r1
 800a190:	b921      	cbnz	r1, 800a19c <_realloc_r+0x14>
 800a192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a196:	4611      	mov	r1, r2
 800a198:	f7ff bdc8 	b.w	8009d2c <_malloc_r>
 800a19c:	b922      	cbnz	r2, 800a1a8 <_realloc_r+0x20>
 800a19e:	f7ff fd75 	bl	8009c8c <_free_r>
 800a1a2:	4625      	mov	r5, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a8:	f000 fc62 	bl	800aa70 <_malloc_usable_size_r>
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d20f      	bcs.n	800a1d0 <_realloc_r+0x48>
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f7ff fdba 	bl	8009d2c <_malloc_r>
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d0f2      	beq.n	800a1a4 <_realloc_r+0x1c>
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	f7fd fddf 	bl	8007d84 <memcpy>
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff fd5f 	bl	8009c8c <_free_r>
 800a1ce:	e7e9      	b.n	800a1a4 <_realloc_r+0x1c>
 800a1d0:	4635      	mov	r5, r6
 800a1d2:	e7e7      	b.n	800a1a4 <_realloc_r+0x1c>

0800a1d4 <__sfputc_r>:
 800a1d4:	6893      	ldr	r3, [r2, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	b410      	push	{r4}
 800a1dc:	6093      	str	r3, [r2, #8]
 800a1de:	da08      	bge.n	800a1f2 <__sfputc_r+0x1e>
 800a1e0:	6994      	ldr	r4, [r2, #24]
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	db01      	blt.n	800a1ea <__sfputc_r+0x16>
 800a1e6:	290a      	cmp	r1, #10
 800a1e8:	d103      	bne.n	800a1f2 <__sfputc_r+0x1e>
 800a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ee:	f000 b94b 	b.w	800a488 <__swbuf_r>
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	1c58      	adds	r0, r3, #1
 800a1f6:	6010      	str	r0, [r2, #0]
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <__sfputs_r>:
 800a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	18d5      	adds	r5, r2, r3
 800a20c:	42ac      	cmp	r4, r5
 800a20e:	d101      	bne.n	800a214 <__sfputs_r+0x12>
 800a210:	2000      	movs	r0, #0
 800a212:	e007      	b.n	800a224 <__sfputs_r+0x22>
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	463a      	mov	r2, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffda 	bl	800a1d4 <__sfputc_r>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d1f3      	bne.n	800a20c <__sfputs_r+0xa>
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	; 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f000 fb14 	bl	800a868 <__sinit>
 800a240:	4b89      	ldr	r3, [pc, #548]	; (800a468 <_vfiprintf_r+0x240>)
 800a242:	429d      	cmp	r5, r3
 800a244:	d11b      	bne.n	800a27e <_vfiprintf_r+0x56>
 800a246:	6875      	ldr	r5, [r6, #4]
 800a248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24a:	07d9      	lsls	r1, r3, #31
 800a24c:	d405      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	059a      	lsls	r2, r3, #22
 800a252:	d402      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f000 fba5 	bl	800a9a4 <__retarget_lock_acquire_recursive>
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	071b      	lsls	r3, r3, #28
 800a25e:	d501      	bpl.n	800a264 <_vfiprintf_r+0x3c>
 800a260:	692b      	ldr	r3, [r5, #16]
 800a262:	b9eb      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x78>
 800a264:	4629      	mov	r1, r5
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f96e 	bl	800a548 <__swsetup_r>
 800a26c:	b1c0      	cbz	r0, 800a2a0 <_vfiprintf_r+0x78>
 800a26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a270:	07dc      	lsls	r4, r3, #31
 800a272:	d50e      	bpl.n	800a292 <_vfiprintf_r+0x6a>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b01d      	add	sp, #116	; 0x74
 800a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <_vfiprintf_r+0x244>)
 800a280:	429d      	cmp	r5, r3
 800a282:	d101      	bne.n	800a288 <_vfiprintf_r+0x60>
 800a284:	68b5      	ldr	r5, [r6, #8]
 800a286:	e7df      	b.n	800a248 <_vfiprintf_r+0x20>
 800a288:	4b79      	ldr	r3, [pc, #484]	; (800a470 <_vfiprintf_r+0x248>)
 800a28a:	429d      	cmp	r5, r3
 800a28c:	bf08      	it	eq
 800a28e:	68f5      	ldreq	r5, [r6, #12]
 800a290:	e7da      	b.n	800a248 <_vfiprintf_r+0x20>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4ed      	bmi.n	800a274 <_vfiprintf_r+0x4c>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f000 fb84 	bl	800a9a6 <__retarget_lock_release_recursive>
 800a29e:	e7e9      	b.n	800a274 <_vfiprintf_r+0x4c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a474 <_vfiprintf_r+0x24c>
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	f04f 0901 	mov.w	r9, #1
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0xa2>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x96>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xc0>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff93 	bl	800a202 <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80aa 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a2 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4858      	ldr	r0, [pc, #352]	; (800a474 <_vfiprintf_r+0x24c>)
 800a314:	f7f5 ff7c 	bl	8000210 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x12c>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x13c>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	4654      	mov	r4, sl
 800a33c:	2000      	movs	r0, #0
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94e      	bls.n	800a3ec <_vfiprintf_r+0x1c4>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x156>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x156>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	46a2      	mov	sl, r4
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xe2>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x176>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d135      	bne.n	800a3f6 <_vfiprintf_r+0x1ce>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9203      	str	r2, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a484 <_vfiprintf_r+0x25c>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff32 	bl	8000210 <memchr>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_vfiprintf_r+0x198>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	4303      	orrs	r3, r0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	482c      	ldr	r0, [pc, #176]	; (800a478 <_vfiprintf_r+0x250>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	f7f5 ff20 	bl	8000210 <memchr>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d03f      	beq.n	800a454 <_vfiprintf_r+0x22c>
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <_vfiprintf_r+0x254>)
 800a3d6:	bb1b      	cbnz	r3, 800a420 <_vfiprintf_r+0x1f8>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	9303      	str	r3, [sp, #12]
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	443b      	add	r3, r7
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	e767      	b.n	800a2bc <_vfiprintf_r+0x94>
 800a3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e7a5      	b.n	800a342 <_vfiprintf_r+0x11a>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0c0a 	mov.w	ip, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a408:	3a30      	subs	r2, #48	; 0x30
 800a40a:	2a09      	cmp	r2, #9
 800a40c:	d903      	bls.n	800a416 <_vfiprintf_r+0x1ee>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0c5      	beq.n	800a39e <_vfiprintf_r+0x176>
 800a412:	9105      	str	r1, [sp, #20]
 800a414:	e7c3      	b.n	800a39e <_vfiprintf_r+0x176>
 800a416:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41a:	4604      	mov	r4, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	e7f0      	b.n	800a402 <_vfiprintf_r+0x1da>
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	462a      	mov	r2, r5
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <_vfiprintf_r+0x258>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7fd fd60 	bl	8007ef0 <_printf_float>
 800a430:	4607      	mov	r7, r0
 800a432:	1c78      	adds	r0, r7, #1
 800a434:	d1d6      	bne.n	800a3e4 <_vfiprintf_r+0x1bc>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d405      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	059a      	lsls	r2, r3, #22
 800a440:	d402      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a444:	f000 faaf 	bl	800a9a6 <__retarget_lock_release_recursive>
 800a448:	89ab      	ldrh	r3, [r5, #12]
 800a44a:	065b      	lsls	r3, r3, #25
 800a44c:	f53f af12 	bmi.w	800a274 <_vfiprintf_r+0x4c>
 800a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a452:	e711      	b.n	800a278 <_vfiprintf_r+0x50>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	462a      	mov	r2, r5
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <_vfiprintf_r+0x258>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f7fd ffea 	bl	8008438 <_printf_i>
 800a464:	e7e4      	b.n	800a430 <_vfiprintf_r+0x208>
 800a466:	bf00      	nop
 800a468:	0800b7c4 	.word	0x0800b7c4
 800a46c:	0800b7e4 	.word	0x0800b7e4
 800a470:	0800b7a4 	.word	0x0800b7a4
 800a474:	0800b74c 	.word	0x0800b74c
 800a478:	0800b756 	.word	0x0800b756
 800a47c:	08007ef1 	.word	0x08007ef1
 800a480:	0800a203 	.word	0x0800a203
 800a484:	0800b752 	.word	0x0800b752

0800a488 <__swbuf_r>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	4614      	mov	r4, r2
 800a48e:	4605      	mov	r5, r0
 800a490:	b118      	cbz	r0, 800a49a <__swbuf_r+0x12>
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	b90b      	cbnz	r3, 800a49a <__swbuf_r+0x12>
 800a496:	f000 f9e7 	bl	800a868 <__sinit>
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <__swbuf_r+0x98>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d12b      	bne.n	800a4f8 <__swbuf_r+0x70>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	69a3      	ldr	r3, [r4, #24]
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	071a      	lsls	r2, r3, #28
 800a4aa:	d52f      	bpl.n	800a50c <__swbuf_r+0x84>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b36b      	cbz	r3, 800a50c <__swbuf_r+0x84>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	6820      	ldr	r0, [r4, #0]
 800a4b4:	1ac0      	subs	r0, r0, r3
 800a4b6:	6963      	ldr	r3, [r4, #20]
 800a4b8:	b2f6      	uxtb	r6, r6
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	4637      	mov	r7, r6
 800a4be:	dc04      	bgt.n	800a4ca <__swbuf_r+0x42>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f93c 	bl	800a740 <_fflush_r>
 800a4c8:	bb30      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6022      	str	r2, [r4, #0]
 800a4d6:	701e      	strb	r6, [r3, #0]
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	3001      	adds	r0, #1
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	d004      	beq.n	800a4ea <__swbuf_r+0x62>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d506      	bpl.n	800a4f4 <__swbuf_r+0x6c>
 800a4e6:	2e0a      	cmp	r6, #10
 800a4e8:	d104      	bne.n	800a4f4 <__swbuf_r+0x6c>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f927 	bl	800a740 <_fflush_r>
 800a4f2:	b988      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <__swbuf_r+0x9c>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d101      	bne.n	800a502 <__swbuf_r+0x7a>
 800a4fe:	68ac      	ldr	r4, [r5, #8]
 800a500:	e7cf      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <__swbuf_r+0xa0>)
 800a504:	429c      	cmp	r4, r3
 800a506:	bf08      	it	eq
 800a508:	68ec      	ldreq	r4, [r5, #12]
 800a50a:	e7ca      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f81a 	bl	800a548 <__swsetup_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d0cb      	beq.n	800a4b0 <__swbuf_r+0x28>
 800a518:	f04f 37ff 	mov.w	r7, #4294967295
 800a51c:	e7ea      	b.n	800a4f4 <__swbuf_r+0x6c>
 800a51e:	bf00      	nop
 800a520:	0800b7c4 	.word	0x0800b7c4
 800a524:	0800b7e4 	.word	0x0800b7e4
 800a528:	0800b7a4 	.word	0x0800b7a4

0800a52c <__ascii_wctomb>:
 800a52c:	b149      	cbz	r1, 800a542 <__ascii_wctomb+0x16>
 800a52e:	2aff      	cmp	r2, #255	; 0xff
 800a530:	bf85      	ittet	hi
 800a532:	238a      	movhi	r3, #138	; 0x8a
 800a534:	6003      	strhi	r3, [r0, #0]
 800a536:	700a      	strbls	r2, [r1, #0]
 800a538:	f04f 30ff 	movhi.w	r0, #4294967295
 800a53c:	bf98      	it	ls
 800a53e:	2001      	movls	r0, #1
 800a540:	4770      	bx	lr
 800a542:	4608      	mov	r0, r1
 800a544:	4770      	bx	lr
	...

0800a548 <__swsetup_r>:
 800a548:	4b32      	ldr	r3, [pc, #200]	; (800a614 <__swsetup_r+0xcc>)
 800a54a:	b570      	push	{r4, r5, r6, lr}
 800a54c:	681d      	ldr	r5, [r3, #0]
 800a54e:	4606      	mov	r6, r0
 800a550:	460c      	mov	r4, r1
 800a552:	b125      	cbz	r5, 800a55e <__swsetup_r+0x16>
 800a554:	69ab      	ldr	r3, [r5, #24]
 800a556:	b913      	cbnz	r3, 800a55e <__swsetup_r+0x16>
 800a558:	4628      	mov	r0, r5
 800a55a:	f000 f985 	bl	800a868 <__sinit>
 800a55e:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <__swsetup_r+0xd0>)
 800a560:	429c      	cmp	r4, r3
 800a562:	d10f      	bne.n	800a584 <__swsetup_r+0x3c>
 800a564:	686c      	ldr	r4, [r5, #4]
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a56c:	0719      	lsls	r1, r3, #28
 800a56e:	d42c      	bmi.n	800a5ca <__swsetup_r+0x82>
 800a570:	06dd      	lsls	r5, r3, #27
 800a572:	d411      	bmi.n	800a598 <__swsetup_r+0x50>
 800a574:	2309      	movs	r3, #9
 800a576:	6033      	str	r3, [r6, #0]
 800a578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	f04f 30ff 	mov.w	r0, #4294967295
 800a582:	e03e      	b.n	800a602 <__swsetup_r+0xba>
 800a584:	4b25      	ldr	r3, [pc, #148]	; (800a61c <__swsetup_r+0xd4>)
 800a586:	429c      	cmp	r4, r3
 800a588:	d101      	bne.n	800a58e <__swsetup_r+0x46>
 800a58a:	68ac      	ldr	r4, [r5, #8]
 800a58c:	e7eb      	b.n	800a566 <__swsetup_r+0x1e>
 800a58e:	4b24      	ldr	r3, [pc, #144]	; (800a620 <__swsetup_r+0xd8>)
 800a590:	429c      	cmp	r4, r3
 800a592:	bf08      	it	eq
 800a594:	68ec      	ldreq	r4, [r5, #12]
 800a596:	e7e6      	b.n	800a566 <__swsetup_r+0x1e>
 800a598:	0758      	lsls	r0, r3, #29
 800a59a:	d512      	bpl.n	800a5c2 <__swsetup_r+0x7a>
 800a59c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a59e:	b141      	cbz	r1, 800a5b2 <__swsetup_r+0x6a>
 800a5a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d002      	beq.n	800a5ae <__swsetup_r+0x66>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7ff fb6f 	bl	8009c8c <_free_r>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6063      	str	r3, [r4, #4]
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f043 0308 	orr.w	r3, r3, #8
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	b94b      	cbnz	r3, 800a5e2 <__swsetup_r+0x9a>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d8:	d003      	beq.n	800a5e2 <__swsetup_r+0x9a>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 fa07 	bl	800a9f0 <__smakebuf_r>
 800a5e2:	89a0      	ldrh	r0, [r4, #12]
 800a5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5e8:	f010 0301 	ands.w	r3, r0, #1
 800a5ec:	d00a      	beq.n	800a604 <__swsetup_r+0xbc>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	6963      	ldr	r3, [r4, #20]
 800a5f4:	425b      	negs	r3, r3
 800a5f6:	61a3      	str	r3, [r4, #24]
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	b943      	cbnz	r3, 800a60e <__swsetup_r+0xc6>
 800a5fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a600:	d1ba      	bne.n	800a578 <__swsetup_r+0x30>
 800a602:	bd70      	pop	{r4, r5, r6, pc}
 800a604:	0781      	lsls	r1, r0, #30
 800a606:	bf58      	it	pl
 800a608:	6963      	ldrpl	r3, [r4, #20]
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	e7f4      	b.n	800a5f8 <__swsetup_r+0xb0>
 800a60e:	2000      	movs	r0, #0
 800a610:	e7f7      	b.n	800a602 <__swsetup_r+0xba>
 800a612:	bf00      	nop
 800a614:	2000001c 	.word	0x2000001c
 800a618:	0800b7c4 	.word	0x0800b7c4
 800a61c:	0800b7e4 	.word	0x0800b7e4
 800a620:	0800b7a4 	.word	0x0800b7a4

0800a624 <abort>:
 800a624:	b508      	push	{r3, lr}
 800a626:	2006      	movs	r0, #6
 800a628:	f000 fa52 	bl	800aad0 <raise>
 800a62c:	2001      	movs	r0, #1
 800a62e:	f7f7 fc07 	bl	8001e40 <_exit>
	...

0800a634 <__sflush_r>:
 800a634:	898a      	ldrh	r2, [r1, #12]
 800a636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	4605      	mov	r5, r0
 800a63c:	0710      	lsls	r0, r2, #28
 800a63e:	460c      	mov	r4, r1
 800a640:	d458      	bmi.n	800a6f4 <__sflush_r+0xc0>
 800a642:	684b      	ldr	r3, [r1, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	dc05      	bgt.n	800a654 <__sflush_r+0x20>
 800a648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dc02      	bgt.n	800a654 <__sflush_r+0x20>
 800a64e:	2000      	movs	r0, #0
 800a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a656:	2e00      	cmp	r6, #0
 800a658:	d0f9      	beq.n	800a64e <__sflush_r+0x1a>
 800a65a:	2300      	movs	r3, #0
 800a65c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a660:	682f      	ldr	r7, [r5, #0]
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	d032      	beq.n	800a6cc <__sflush_r+0x98>
 800a666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	075a      	lsls	r2, r3, #29
 800a66c:	d505      	bpl.n	800a67a <__sflush_r+0x46>
 800a66e:	6863      	ldr	r3, [r4, #4]
 800a670:	1ac0      	subs	r0, r0, r3
 800a672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a674:	b10b      	cbz	r3, 800a67a <__sflush_r+0x46>
 800a676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a678:	1ac0      	subs	r0, r0, r3
 800a67a:	2300      	movs	r3, #0
 800a67c:	4602      	mov	r2, r0
 800a67e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a680:	6a21      	ldr	r1, [r4, #32]
 800a682:	4628      	mov	r0, r5
 800a684:	47b0      	blx	r6
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	d106      	bne.n	800a69a <__sflush_r+0x66>
 800a68c:	6829      	ldr	r1, [r5, #0]
 800a68e:	291d      	cmp	r1, #29
 800a690:	d82c      	bhi.n	800a6ec <__sflush_r+0xb8>
 800a692:	4a2a      	ldr	r2, [pc, #168]	; (800a73c <__sflush_r+0x108>)
 800a694:	40ca      	lsrs	r2, r1
 800a696:	07d6      	lsls	r6, r2, #31
 800a698:	d528      	bpl.n	800a6ec <__sflush_r+0xb8>
 800a69a:	2200      	movs	r2, #0
 800a69c:	6062      	str	r2, [r4, #4]
 800a69e:	04d9      	lsls	r1, r3, #19
 800a6a0:	6922      	ldr	r2, [r4, #16]
 800a6a2:	6022      	str	r2, [r4, #0]
 800a6a4:	d504      	bpl.n	800a6b0 <__sflush_r+0x7c>
 800a6a6:	1c42      	adds	r2, r0, #1
 800a6a8:	d101      	bne.n	800a6ae <__sflush_r+0x7a>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b903      	cbnz	r3, 800a6b0 <__sflush_r+0x7c>
 800a6ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6b2:	602f      	str	r7, [r5, #0]
 800a6b4:	2900      	cmp	r1, #0
 800a6b6:	d0ca      	beq.n	800a64e <__sflush_r+0x1a>
 800a6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	d002      	beq.n	800a6c6 <__sflush_r+0x92>
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff fae3 	bl	8009c8c <_free_r>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ca:	e7c1      	b.n	800a650 <__sflush_r+0x1c>
 800a6cc:	6a21      	ldr	r1, [r4, #32]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b0      	blx	r6
 800a6d4:	1c41      	adds	r1, r0, #1
 800a6d6:	d1c7      	bne.n	800a668 <__sflush_r+0x34>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0c4      	beq.n	800a668 <__sflush_r+0x34>
 800a6de:	2b1d      	cmp	r3, #29
 800a6e0:	d001      	beq.n	800a6e6 <__sflush_r+0xb2>
 800a6e2:	2b16      	cmp	r3, #22
 800a6e4:	d101      	bne.n	800a6ea <__sflush_r+0xb6>
 800a6e6:	602f      	str	r7, [r5, #0]
 800a6e8:	e7b1      	b.n	800a64e <__sflush_r+0x1a>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	e7ad      	b.n	800a650 <__sflush_r+0x1c>
 800a6f4:	690f      	ldr	r7, [r1, #16]
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	d0a9      	beq.n	800a64e <__sflush_r+0x1a>
 800a6fa:	0793      	lsls	r3, r2, #30
 800a6fc:	680e      	ldr	r6, [r1, #0]
 800a6fe:	bf08      	it	eq
 800a700:	694b      	ldreq	r3, [r1, #20]
 800a702:	600f      	str	r7, [r1, #0]
 800a704:	bf18      	it	ne
 800a706:	2300      	movne	r3, #0
 800a708:	eba6 0807 	sub.w	r8, r6, r7
 800a70c:	608b      	str	r3, [r1, #8]
 800a70e:	f1b8 0f00 	cmp.w	r8, #0
 800a712:	dd9c      	ble.n	800a64e <__sflush_r+0x1a>
 800a714:	6a21      	ldr	r1, [r4, #32]
 800a716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a718:	4643      	mov	r3, r8
 800a71a:	463a      	mov	r2, r7
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b0      	blx	r6
 800a720:	2800      	cmp	r0, #0
 800a722:	dc06      	bgt.n	800a732 <__sflush_r+0xfe>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e78e      	b.n	800a650 <__sflush_r+0x1c>
 800a732:	4407      	add	r7, r0
 800a734:	eba8 0800 	sub.w	r8, r8, r0
 800a738:	e7e9      	b.n	800a70e <__sflush_r+0xda>
 800a73a:	bf00      	nop
 800a73c:	20400001 	.word	0x20400001

0800a740 <_fflush_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	690b      	ldr	r3, [r1, #16]
 800a744:	4605      	mov	r5, r0
 800a746:	460c      	mov	r4, r1
 800a748:	b913      	cbnz	r3, 800a750 <_fflush_r+0x10>
 800a74a:	2500      	movs	r5, #0
 800a74c:	4628      	mov	r0, r5
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	b118      	cbz	r0, 800a75a <_fflush_r+0x1a>
 800a752:	6983      	ldr	r3, [r0, #24]
 800a754:	b90b      	cbnz	r3, 800a75a <_fflush_r+0x1a>
 800a756:	f000 f887 	bl	800a868 <__sinit>
 800a75a:	4b14      	ldr	r3, [pc, #80]	; (800a7ac <_fflush_r+0x6c>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d11b      	bne.n	800a798 <_fflush_r+0x58>
 800a760:	686c      	ldr	r4, [r5, #4]
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0ef      	beq.n	800a74a <_fflush_r+0xa>
 800a76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a76c:	07d0      	lsls	r0, r2, #31
 800a76e:	d404      	bmi.n	800a77a <_fflush_r+0x3a>
 800a770:	0599      	lsls	r1, r3, #22
 800a772:	d402      	bmi.n	800a77a <_fflush_r+0x3a>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f000 f915 	bl	800a9a4 <__retarget_lock_acquire_recursive>
 800a77a:	4628      	mov	r0, r5
 800a77c:	4621      	mov	r1, r4
 800a77e:	f7ff ff59 	bl	800a634 <__sflush_r>
 800a782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a784:	07da      	lsls	r2, r3, #31
 800a786:	4605      	mov	r5, r0
 800a788:	d4e0      	bmi.n	800a74c <_fflush_r+0xc>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	059b      	lsls	r3, r3, #22
 800a78e:	d4dd      	bmi.n	800a74c <_fflush_r+0xc>
 800a790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a792:	f000 f908 	bl	800a9a6 <__retarget_lock_release_recursive>
 800a796:	e7d9      	b.n	800a74c <_fflush_r+0xc>
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <_fflush_r+0x70>)
 800a79a:	429c      	cmp	r4, r3
 800a79c:	d101      	bne.n	800a7a2 <_fflush_r+0x62>
 800a79e:	68ac      	ldr	r4, [r5, #8]
 800a7a0:	e7df      	b.n	800a762 <_fflush_r+0x22>
 800a7a2:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <_fflush_r+0x74>)
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	bf08      	it	eq
 800a7a8:	68ec      	ldreq	r4, [r5, #12]
 800a7aa:	e7da      	b.n	800a762 <_fflush_r+0x22>
 800a7ac:	0800b7c4 	.word	0x0800b7c4
 800a7b0:	0800b7e4 	.word	0x0800b7e4
 800a7b4:	0800b7a4 	.word	0x0800b7a4

0800a7b8 <std>:
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	b510      	push	{r4, lr}
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e9c0 3300 	strd	r3, r3, [r0]
 800a7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7c6:	6083      	str	r3, [r0, #8]
 800a7c8:	8181      	strh	r1, [r0, #12]
 800a7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a7cc:	81c2      	strh	r2, [r0, #14]
 800a7ce:	6183      	str	r3, [r0, #24]
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	2208      	movs	r2, #8
 800a7d4:	305c      	adds	r0, #92	; 0x5c
 800a7d6:	f7fd fae3 	bl	8007da0 <memset>
 800a7da:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <std+0x38>)
 800a7dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <std+0x3c>)
 800a7e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <std+0x40>)
 800a7e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <std+0x44>)
 800a7e8:	6224      	str	r4, [r4, #32]
 800a7ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0800ab09 	.word	0x0800ab09
 800a7f4:	0800ab2b 	.word	0x0800ab2b
 800a7f8:	0800ab63 	.word	0x0800ab63
 800a7fc:	0800ab87 	.word	0x0800ab87

0800a800 <_cleanup_r>:
 800a800:	4901      	ldr	r1, [pc, #4]	; (800a808 <_cleanup_r+0x8>)
 800a802:	f000 b8af 	b.w	800a964 <_fwalk_reent>
 800a806:	bf00      	nop
 800a808:	0800a741 	.word	0x0800a741

0800a80c <__sfmoreglue>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	1e4a      	subs	r2, r1, #1
 800a810:	2568      	movs	r5, #104	; 0x68
 800a812:	4355      	muls	r5, r2
 800a814:	460e      	mov	r6, r1
 800a816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a81a:	f7ff fa87 	bl	8009d2c <_malloc_r>
 800a81e:	4604      	mov	r4, r0
 800a820:	b140      	cbz	r0, 800a834 <__sfmoreglue+0x28>
 800a822:	2100      	movs	r1, #0
 800a824:	e9c0 1600 	strd	r1, r6, [r0]
 800a828:	300c      	adds	r0, #12
 800a82a:	60a0      	str	r0, [r4, #8]
 800a82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a830:	f7fd fab6 	bl	8007da0 <memset>
 800a834:	4620      	mov	r0, r4
 800a836:	bd70      	pop	{r4, r5, r6, pc}

0800a838 <__sfp_lock_acquire>:
 800a838:	4801      	ldr	r0, [pc, #4]	; (800a840 <__sfp_lock_acquire+0x8>)
 800a83a:	f000 b8b3 	b.w	800a9a4 <__retarget_lock_acquire_recursive>
 800a83e:	bf00      	nop
 800a840:	20003bc0 	.word	0x20003bc0

0800a844 <__sfp_lock_release>:
 800a844:	4801      	ldr	r0, [pc, #4]	; (800a84c <__sfp_lock_release+0x8>)
 800a846:	f000 b8ae 	b.w	800a9a6 <__retarget_lock_release_recursive>
 800a84a:	bf00      	nop
 800a84c:	20003bc0 	.word	0x20003bc0

0800a850 <__sinit_lock_acquire>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__sinit_lock_acquire+0x8>)
 800a852:	f000 b8a7 	b.w	800a9a4 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	20003bbb 	.word	0x20003bbb

0800a85c <__sinit_lock_release>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__sinit_lock_release+0x8>)
 800a85e:	f000 b8a2 	b.w	800a9a6 <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	20003bbb 	.word	0x20003bbb

0800a868 <__sinit>:
 800a868:	b510      	push	{r4, lr}
 800a86a:	4604      	mov	r4, r0
 800a86c:	f7ff fff0 	bl	800a850 <__sinit_lock_acquire>
 800a870:	69a3      	ldr	r3, [r4, #24]
 800a872:	b11b      	cbz	r3, 800a87c <__sinit+0x14>
 800a874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a878:	f7ff bff0 	b.w	800a85c <__sinit_lock_release>
 800a87c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a880:	6523      	str	r3, [r4, #80]	; 0x50
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <__sinit+0x68>)
 800a884:	4a13      	ldr	r2, [pc, #76]	; (800a8d4 <__sinit+0x6c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	62a2      	str	r2, [r4, #40]	; 0x28
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	bf04      	itt	eq
 800a88e:	2301      	moveq	r3, #1
 800a890:	61a3      	streq	r3, [r4, #24]
 800a892:	4620      	mov	r0, r4
 800a894:	f000 f820 	bl	800a8d8 <__sfp>
 800a898:	6060      	str	r0, [r4, #4]
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 f81c 	bl	800a8d8 <__sfp>
 800a8a0:	60a0      	str	r0, [r4, #8]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f818 	bl	800a8d8 <__sfp>
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	60e0      	str	r0, [r4, #12]
 800a8ac:	2104      	movs	r1, #4
 800a8ae:	6860      	ldr	r0, [r4, #4]
 800a8b0:	f7ff ff82 	bl	800a7b8 <std>
 800a8b4:	68a0      	ldr	r0, [r4, #8]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	2109      	movs	r1, #9
 800a8ba:	f7ff ff7d 	bl	800a7b8 <std>
 800a8be:	68e0      	ldr	r0, [r4, #12]
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	2112      	movs	r1, #18
 800a8c4:	f7ff ff78 	bl	800a7b8 <std>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	61a3      	str	r3, [r4, #24]
 800a8cc:	e7d2      	b.n	800a874 <__sinit+0xc>
 800a8ce:	bf00      	nop
 800a8d0:	0800b3fc 	.word	0x0800b3fc
 800a8d4:	0800a801 	.word	0x0800a801

0800a8d8 <__sfp>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	4607      	mov	r7, r0
 800a8dc:	f7ff ffac 	bl	800a838 <__sfp_lock_acquire>
 800a8e0:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <__sfp+0x84>)
 800a8e2:	681e      	ldr	r6, [r3, #0]
 800a8e4:	69b3      	ldr	r3, [r6, #24]
 800a8e6:	b913      	cbnz	r3, 800a8ee <__sfp+0x16>
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7ff ffbd 	bl	800a868 <__sinit>
 800a8ee:	3648      	adds	r6, #72	; 0x48
 800a8f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	d503      	bpl.n	800a900 <__sfp+0x28>
 800a8f8:	6833      	ldr	r3, [r6, #0]
 800a8fa:	b30b      	cbz	r3, 800a940 <__sfp+0x68>
 800a8fc:	6836      	ldr	r6, [r6, #0]
 800a8fe:	e7f7      	b.n	800a8f0 <__sfp+0x18>
 800a900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a904:	b9d5      	cbnz	r5, 800a93c <__sfp+0x64>
 800a906:	4b16      	ldr	r3, [pc, #88]	; (800a960 <__sfp+0x88>)
 800a908:	60e3      	str	r3, [r4, #12]
 800a90a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a90e:	6665      	str	r5, [r4, #100]	; 0x64
 800a910:	f000 f847 	bl	800a9a2 <__retarget_lock_init_recursive>
 800a914:	f7ff ff96 	bl	800a844 <__sfp_lock_release>
 800a918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a91c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a920:	6025      	str	r5, [r4, #0]
 800a922:	61a5      	str	r5, [r4, #24]
 800a924:	2208      	movs	r2, #8
 800a926:	4629      	mov	r1, r5
 800a928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a92c:	f7fd fa38 	bl	8007da0 <memset>
 800a930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a938:	4620      	mov	r0, r4
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93c:	3468      	adds	r4, #104	; 0x68
 800a93e:	e7d9      	b.n	800a8f4 <__sfp+0x1c>
 800a940:	2104      	movs	r1, #4
 800a942:	4638      	mov	r0, r7
 800a944:	f7ff ff62 	bl	800a80c <__sfmoreglue>
 800a948:	4604      	mov	r4, r0
 800a94a:	6030      	str	r0, [r6, #0]
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d1d5      	bne.n	800a8fc <__sfp+0x24>
 800a950:	f7ff ff78 	bl	800a844 <__sfp_lock_release>
 800a954:	230c      	movs	r3, #12
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	e7ee      	b.n	800a938 <__sfp+0x60>
 800a95a:	bf00      	nop
 800a95c:	0800b3fc 	.word	0x0800b3fc
 800a960:	ffff0001 	.word	0xffff0001

0800a964 <_fwalk_reent>:
 800a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a968:	4606      	mov	r6, r0
 800a96a:	4688      	mov	r8, r1
 800a96c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a970:	2700      	movs	r7, #0
 800a972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a976:	f1b9 0901 	subs.w	r9, r9, #1
 800a97a:	d505      	bpl.n	800a988 <_fwalk_reent+0x24>
 800a97c:	6824      	ldr	r4, [r4, #0]
 800a97e:	2c00      	cmp	r4, #0
 800a980:	d1f7      	bne.n	800a972 <_fwalk_reent+0xe>
 800a982:	4638      	mov	r0, r7
 800a984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a988:	89ab      	ldrh	r3, [r5, #12]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d907      	bls.n	800a99e <_fwalk_reent+0x3a>
 800a98e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a992:	3301      	adds	r3, #1
 800a994:	d003      	beq.n	800a99e <_fwalk_reent+0x3a>
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	47c0      	blx	r8
 800a99c:	4307      	orrs	r7, r0
 800a99e:	3568      	adds	r5, #104	; 0x68
 800a9a0:	e7e9      	b.n	800a976 <_fwalk_reent+0x12>

0800a9a2 <__retarget_lock_init_recursive>:
 800a9a2:	4770      	bx	lr

0800a9a4 <__retarget_lock_acquire_recursive>:
 800a9a4:	4770      	bx	lr

0800a9a6 <__retarget_lock_release_recursive>:
 800a9a6:	4770      	bx	lr

0800a9a8 <__swhatbuf_r>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	460e      	mov	r6, r1
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	b096      	sub	sp, #88	; 0x58
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	461d      	mov	r5, r3
 800a9b8:	da07      	bge.n	800a9ca <__swhatbuf_r+0x22>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	89b3      	ldrh	r3, [r6, #12]
 800a9c0:	061a      	lsls	r2, r3, #24
 800a9c2:	d410      	bmi.n	800a9e6 <__swhatbuf_r+0x3e>
 800a9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c8:	e00e      	b.n	800a9e8 <__swhatbuf_r+0x40>
 800a9ca:	466a      	mov	r2, sp
 800a9cc:	f000 f902 	bl	800abd4 <_fstat_r>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	dbf2      	blt.n	800a9ba <__swhatbuf_r+0x12>
 800a9d4:	9a01      	ldr	r2, [sp, #4]
 800a9d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9de:	425a      	negs	r2, r3
 800a9e0:	415a      	adcs	r2, r3
 800a9e2:	602a      	str	r2, [r5, #0]
 800a9e4:	e7ee      	b.n	800a9c4 <__swhatbuf_r+0x1c>
 800a9e6:	2340      	movs	r3, #64	; 0x40
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	b016      	add	sp, #88	; 0x58
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__smakebuf_r>:
 800a9f0:	898b      	ldrh	r3, [r1, #12]
 800a9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9f4:	079d      	lsls	r5, r3, #30
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	d507      	bpl.n	800aa0c <__smakebuf_r+0x1c>
 800a9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	2301      	movs	r3, #1
 800aa06:	6163      	str	r3, [r4, #20]
 800aa08:	b002      	add	sp, #8
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	ab01      	add	r3, sp, #4
 800aa0e:	466a      	mov	r2, sp
 800aa10:	f7ff ffca 	bl	800a9a8 <__swhatbuf_r>
 800aa14:	9900      	ldr	r1, [sp, #0]
 800aa16:	4605      	mov	r5, r0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff f987 	bl	8009d2c <_malloc_r>
 800aa1e:	b948      	cbnz	r0, 800aa34 <__smakebuf_r+0x44>
 800aa20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa24:	059a      	lsls	r2, r3, #22
 800aa26:	d4ef      	bmi.n	800aa08 <__smakebuf_r+0x18>
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	e7e3      	b.n	800a9fc <__smakebuf_r+0xc>
 800aa34:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <__smakebuf_r+0x7c>)
 800aa36:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	6020      	str	r0, [r4, #0]
 800aa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	6163      	str	r3, [r4, #20]
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	6120      	str	r0, [r4, #16]
 800aa4a:	b15b      	cbz	r3, 800aa64 <__smakebuf_r+0x74>
 800aa4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa50:	4630      	mov	r0, r6
 800aa52:	f000 f8d1 	bl	800abf8 <_isatty_r>
 800aa56:	b128      	cbz	r0, 800aa64 <__smakebuf_r+0x74>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	f043 0301 	orr.w	r3, r3, #1
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	89a0      	ldrh	r0, [r4, #12]
 800aa66:	4305      	orrs	r5, r0
 800aa68:	81a5      	strh	r5, [r4, #12]
 800aa6a:	e7cd      	b.n	800aa08 <__smakebuf_r+0x18>
 800aa6c:	0800a801 	.word	0x0800a801

0800aa70 <_malloc_usable_size_r>:
 800aa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa74:	1f18      	subs	r0, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bfbc      	itt	lt
 800aa7a:	580b      	ldrlt	r3, [r1, r0]
 800aa7c:	18c0      	addlt	r0, r0, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_raise_r>:
 800aa80:	291f      	cmp	r1, #31
 800aa82:	b538      	push	{r3, r4, r5, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	d904      	bls.n	800aa94 <_raise_r+0x14>
 800aa8a:	2316      	movs	r3, #22
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa96:	b112      	cbz	r2, 800aa9e <_raise_r+0x1e>
 800aa98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa9c:	b94b      	cbnz	r3, 800aab2 <_raise_r+0x32>
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 f830 	bl	800ab04 <_getpid_r>
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4601      	mov	r1, r0
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaae:	f000 b817 	b.w	800aae0 <_kill_r>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d00a      	beq.n	800aacc <_raise_r+0x4c>
 800aab6:	1c59      	adds	r1, r3, #1
 800aab8:	d103      	bne.n	800aac2 <_raise_r+0x42>
 800aaba:	2316      	movs	r3, #22
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	2001      	movs	r0, #1
 800aac0:	e7e7      	b.n	800aa92 <_raise_r+0x12>
 800aac2:	2400      	movs	r4, #0
 800aac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aac8:	4628      	mov	r0, r5
 800aaca:	4798      	blx	r3
 800aacc:	2000      	movs	r0, #0
 800aace:	e7e0      	b.n	800aa92 <_raise_r+0x12>

0800aad0 <raise>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <raise+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f7ff bfd3 	b.w	800aa80 <_raise_r>
 800aada:	bf00      	nop
 800aadc:	2000001c 	.word	0x2000001c

0800aae0 <_kill_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_kill_r+0x20>)
 800aae4:	2300      	movs	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	4608      	mov	r0, r1
 800aaea:	4611      	mov	r1, r2
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	f7f7 f997 	bl	8001e20 <_kill>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d102      	bne.n	800aafc <_kill_r+0x1c>
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	b103      	cbz	r3, 800aafc <_kill_r+0x1c>
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	20003bb4 	.word	0x20003bb4

0800ab04 <_getpid_r>:
 800ab04:	f7f7 b984 	b.w	8001e10 <_getpid>

0800ab08 <__sread>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab10:	f000 f894 	bl	800ac3c <_read_r>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	bfab      	itete	ge
 800ab18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab1c:	181b      	addge	r3, r3, r0
 800ab1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab22:	bfac      	ite	ge
 800ab24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab26:	81a3      	strhlt	r3, [r4, #12]
 800ab28:	bd10      	pop	{r4, pc}

0800ab2a <__swrite>:
 800ab2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	461f      	mov	r7, r3
 800ab30:	898b      	ldrh	r3, [r1, #12]
 800ab32:	05db      	lsls	r3, r3, #23
 800ab34:	4605      	mov	r5, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	4616      	mov	r6, r2
 800ab3a:	d505      	bpl.n	800ab48 <__swrite+0x1e>
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	2302      	movs	r3, #2
 800ab42:	2200      	movs	r2, #0
 800ab44:	f000 f868 	bl	800ac18 <_lseek_r>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	4632      	mov	r2, r6
 800ab56:	463b      	mov	r3, r7
 800ab58:	4628      	mov	r0, r5
 800ab5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5e:	f000 b817 	b.w	800ab90 <_write_r>

0800ab62 <__sseek>:
 800ab62:	b510      	push	{r4, lr}
 800ab64:	460c      	mov	r4, r1
 800ab66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6a:	f000 f855 	bl	800ac18 <_lseek_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	bf15      	itete	ne
 800ab74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab7e:	81a3      	strheq	r3, [r4, #12]
 800ab80:	bf18      	it	ne
 800ab82:	81a3      	strhne	r3, [r4, #12]
 800ab84:	bd10      	pop	{r4, pc}

0800ab86 <__sclose>:
 800ab86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8a:	f000 b813 	b.w	800abb4 <_close_r>
	...

0800ab90 <_write_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	; (800abb0 <_write_r+0x20>)
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	602a      	str	r2, [r5, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f7f7 f975 	bl	8001e8e <_write>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_write_r+0x1e>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_write_r+0x1e>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20003bb4 	.word	0x20003bb4

0800abb4 <_close_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d06      	ldr	r5, [pc, #24]	; (800abd0 <_close_r+0x1c>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7f7 f981 	bl	8001ec6 <_close>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_close_r+0x1a>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	b103      	cbz	r3, 800abce <_close_r+0x1a>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20003bb4 	.word	0x20003bb4

0800abd4 <_fstat_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	; (800abf4 <_fstat_r+0x20>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	4611      	mov	r1, r2
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	f7f7 f97c 	bl	8001ede <_fstat>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	d102      	bne.n	800abf0 <_fstat_r+0x1c>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	b103      	cbz	r3, 800abf0 <_fstat_r+0x1c>
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	bd38      	pop	{r3, r4, r5, pc}
 800abf2:	bf00      	nop
 800abf4:	20003bb4 	.word	0x20003bb4

0800abf8 <_isatty_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d06      	ldr	r5, [pc, #24]	; (800ac14 <_isatty_r+0x1c>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	f7f7 f97b 	bl	8001efe <_isatty>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_isatty_r+0x1a>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_isatty_r+0x1a>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20003bb4 	.word	0x20003bb4

0800ac18 <_lseek_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	; (800ac38 <_lseek_r+0x20>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7f7 f974 	bl	8001f14 <_lseek>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_lseek_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_lseek_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20003bb4 	.word	0x20003bb4

0800ac3c <_read_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4d07      	ldr	r5, [pc, #28]	; (800ac5c <_read_r+0x20>)
 800ac40:	4604      	mov	r4, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	4611      	mov	r1, r2
 800ac46:	2200      	movs	r2, #0
 800ac48:	602a      	str	r2, [r5, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f7f7 f902 	bl	8001e54 <_read>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_read_r+0x1e>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_read_r+0x1e>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20003bb4 	.word	0x20003bb4

0800ac60 <_init>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	bf00      	nop
 800ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac66:	bc08      	pop	{r3}
 800ac68:	469e      	mov	lr, r3
 800ac6a:	4770      	bx	lr

0800ac6c <_fini>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	bf00      	nop
 800ac70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac72:	bc08      	pop	{r3}
 800ac74:	469e      	mov	lr, r3
 800ac76:	4770      	bx	lr
